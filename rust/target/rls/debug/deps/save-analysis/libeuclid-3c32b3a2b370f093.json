{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3","program":"/home/comlarsic/.rustup/toolchains/1.50.0-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","euclid","--edition=2018","/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=3c32b3a2b370f093","-C","extra-filename=-3c32b3a2b370f093","--out-dir","/run/media/comlarsic/9CC2-5E4B/Projects/godot/SMB-Rust/smb_rust/target/rls/debug/deps","-L","dependency=/run/media/comlarsic/9CC2-5E4B/Projects/godot/SMB-Rust/smb_rust/target/rls/debug/deps","--extern","num_traits=/run/media/comlarsic/9CC2-5E4B/Projects/godot/SMB-Rust/smb_rust/target/rls/debug/deps/libnum_traits-39b54e63059a9cee.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/comlarsic/.rustup/toolchains/1.50.0-x86_64-unknown-linux-gnu"],"output":"/run/media/comlarsic/9CC2-5E4B/Projects/godot/SMB-Rust/smb_rust/target/rls/debug/deps/libeuclid-3c32b3a2b370f093.rmeta"},"prelude":{"crate_id":{"name":"euclid","disambiguator":[5538855416933938115,5770741552477264215]},"crate_root":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src","external_crates":[{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":4,"id":{"name":"num_traits","disambiguator":[16092176805550810084,14604817872270614192]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":5,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":6,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":7,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":8,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":9,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":10,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":13,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":14,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":15,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":17,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}}],"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":427,"byte_end":4536,"line_start":10,"line_end":115,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3667},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1894,"byte_end":1899,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"alias_span":null,"name":"Angle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":206},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1923,"byte_end":1928,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"alias_span":null,"name":"Box2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":571},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1954,"byte_end":1971,"line_start":45,"line_end":45,"column_start":25,"column_end":42},"alias_span":null,"name":"HomogeneousVector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":656},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":657},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":1292},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2027,"byte_end":2033,"line_start":47,"line_end":47,"column_start":24,"column_end":30},"alias_span":null,"name":"point2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1295},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2035,"byte_end":2041,"line_start":47,"line_end":47,"column_start":32,"column_end":38},"alias_span":null,"name":"point3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":865},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2043,"byte_end":2050,"line_start":47,"line_end":47,"column_start":40,"column_end":47},"alias_span":null,"name":"Point2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1076},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2052,"byte_end":2059,"line_start":47,"line_end":47,"column_start":49,"column_end":56},"alias_span":null,"name":"Point3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1762},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2084,"byte_end":2089,"line_start":48,"line_end":48,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1763},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2084,"byte_end":2089,"line_start":48,"line_end":48,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":2457},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2119,"byte_end":2130,"line_start":49,"line_end":49,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2636},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2160,"byte_end":2171,"line_start":50,"line_end":50,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3623},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2197,"byte_end":2202,"line_start":51,"line_end":51,"column_start":25,"column_end":30},"alias_span":null,"name":"bvec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3624},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2204,"byte_end":2209,"line_start":51,"line_end":51,"column_start":32,"column_end":37},"alias_span":null,"name":"bvec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3830},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2211,"byte_end":2223,"line_start":51,"line_end":51,"column_start":39,"column_end":51},"alias_span":null,"name":"BoolVector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3848},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2225,"byte_end":2237,"line_start":51,"line_end":51,"column_start":53,"column_end":65},"alias_span":null,"name":"BoolVector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3617},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2264,"byte_end":2268,"line_start":52,"line_end":52,"column_start":25,"column_end":29},"alias_span":null,"name":"vec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3620},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2270,"byte_end":2274,"line_start":52,"line_end":52,"column_start":31,"column_end":35},"alias_span":null,"name":"vec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3113},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2276,"byte_end":2284,"line_start":52,"line_end":52,"column_start":37,"column_end":45},"alias_span":null,"name":"Vector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3348},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2286,"byte_end":2294,"line_start":52,"line_end":52,"column_start":47,"column_end":55},"alias_span":null,"name":"Vector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":551},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2321,"byte_end":2326,"line_start":54,"line_end":54,"column_start":24,"column_end":29},"alias_span":null,"name":"box3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":391},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2328,"byte_end":2333,"line_start":54,"line_end":54,"column_start":31,"column_end":36},"alias_span":null,"name":"Box3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1506},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2358,"byte_end":2362,"line_start":55,"line_end":55,"column_start":23,"column_end":27},"alias_span":null,"name":"rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1322},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2364,"byte_end":2368,"line_start":55,"line_end":55,"column_start":29,"column_end":33},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3769},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2393,"byte_end":2409,"line_start":56,"line_end":56,"column_start":23,"column_end":39},"alias_span":null,"name":"RigidTransform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1587},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2437,"byte_end":2447,"line_start":57,"line_end":57,"column_start":27,"column_end":37},"alias_span":null,"name":"Rotation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1653},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2449,"byte_end":2459,"line_start":57,"line_end":57,"column_start":39,"column_end":49},"alias_span":null,"name":"Rotation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1879},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2491,"byte_end":2504,"line_start":58,"line_end":58,"column_start":30,"column_end":43},"alias_span":null,"name":"SideOffsets2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2189},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2528,"byte_end":2533,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"alias_span":null,"name":"size2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2423},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2535,"byte_end":2540,"line_start":59,"line_end":59,"column_start":30,"column_end":35},"alias_span":null,"name":"size3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2006},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2542,"byte_end":2548,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"alias_span":null,"name":"Size2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2216},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2550,"byte_end":2556,"line_start":59,"line_end":59,"column_start":45,"column_end":51},"alias_span":null,"name":"Size3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2849},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2588,"byte_end":2601,"line_start":60,"line_end":60,"column_start":30,"column_end":43},"alias_span":null,"name":"Translation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2953},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2603,"byte_end":2616,"line_start":60,"line_end":60,"column_start":45,"column_end":58},"alias_span":null,"name":"Translation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3061},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2640,"byte_end":2644,"line_start":61,"line_end":61,"column_start":22,"column_end":26},"alias_span":null,"name":"Trig","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":427,"byte_end":4536,"line_start":10,"line_end":115,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":3895},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":3905},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":164},{"krate":0,"index":171},{"krate":0,"index":176},{"krate":0,"index":365},{"krate":0,"index":554},{"krate":0,"index":627},{"krate":0,"index":809},{"krate":0,"index":829},{"krate":0,"index":1298},{"krate":0,"index":1509},{"krate":0,"index":1555},{"krate":0,"index":1740},{"krate":0,"index":1861},{"krate":0,"index":1970},{"krate":0,"index":2426},{"krate":0,"index":2597},{"krate":0,"index":2818},{"krate":0,"index":3060},{"krate":0,"index":3069},{"krate":0,"index":3867},{"krate":0,"index":3887},{"krate":0,"index":3886},{"krate":0,"index":3884},{"krate":0,"index":3882},{"krate":0,"index":3879},{"krate":0,"index":3880},{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3874},{"krate":0,"index":3872},{"krate":0,"index":3869},{"krate":0,"index":3625}],"decl_id":null,"docs":" A collection of strongly typed math tools for computer graphics with an inclination\n towards 2d graphics and layout.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":450,"byte_end":456,"line_start":10,"line_end":10,"column_start":24,"column_end":30}},{"value":"/ A collection of strongly typed math tools for computer graphics with an inclination","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":460,"byte_end":547,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/ towards 2d graphics and layout.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":548,"byte_end":583,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":584,"byte_end":587,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ All types are generic over the scalar type of their component (`f32`, `i32`, etc.),","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":588,"byte_end":675,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/ and tagged with a generic Unit parameter which is useful to prevent mixing","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":676,"byte_end":754,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ values from different spaces. For example it should not be legal to translate","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":755,"byte_end":836,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/ a screen-space position by a world-space vector and this can be expressed using","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":837,"byte_end":920,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ the generic Unit parameter.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":921,"byte_end":952,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":953,"byte_end":956,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This unit system is not mandatory and all structures have an alias","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":957,"byte_end":1027,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ with the default unit: `UnknownUnit`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1028,"byte_end":1069,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ for example ```default::Point2D<T>``` is equivalent to ```Point2D<T, UnknownUnit>```.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1070,"byte_end":1159,"line_start":23,"line_end":23,"column_start":1,"column_end":90}},{"value":"/ Client code typically creates a set of aliases for each type and doesn't need","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1160,"byte_end":1241,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/ to deal with the specifics of typed units further. For example:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1242,"byte_end":1309,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1310,"byte_end":1313,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1314,"byte_end":1325,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ use euclid::*;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1326,"byte_end":1344,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ pub struct ScreenSpace;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1345,"byte_end":1372,"line_start":29,"line_end":29,"column_start":1,"column_end":28}},{"value":"/ pub type ScreenPoint = Point2D<f32, ScreenSpace>;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1373,"byte_end":1426,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"/ pub type ScreenSize = Size2D<f32, ScreenSpace>;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1427,"byte_end":1478,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/ pub struct WorldSpace;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1479,"byte_end":1505,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/ pub type WorldPoint = Point3D<f32, WorldSpace>;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1506,"byte_end":1557,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/ pub type ProjectionMatrix = Transform3D<f32, WorldSpace, ScreenSpace>;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1558,"byte_end":1632,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ // etc...","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1633,"byte_end":1646,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1647,"byte_end":1654,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1655,"byte_end":1658,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ All euclid types are marked `#[repr(C)]` in order to facilitate exposing them to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1659,"byte_end":1743,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ foreign function interfaces (provided the underlying scalar type is also `repr(C)`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1744,"byte_end":1832,"line_start":39,"line_end":39,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1833,"byte_end":1836,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":1837,"byte_end":1870,"line_start":41,"line_end":41,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":3667},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6630,"byte_end":6635,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"Angle","qualname":"::angle::Angle","value":"Angle { radians }","parent":null,"children":[{"krate":0,"index":3669}],"decl_id":null,"docs":" An angle in radians\n","sig":null,"attributes":[{"value":"/ An angle in radians","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6395,"byte_end":6418,"line_start":20,"line_end":20,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":3669},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6649,"byte_end":6656,"line_start":25,"line_end":25,"column_start":9,"column_end":16},"name":"radians","qualname":"::angle::Angle::radians","value":"T","parent":{"krate":0,"index":3667},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6708,"byte_end":6715,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"radians","qualname":"<Angle<T>>::radians","value":"pub fn radians(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6687,"byte_end":6696,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6796,"byte_end":6799,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"get","qualname":"<Angle<T>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6775,"byte_end":6784,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6906,"byte_end":6913,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"degrees","qualname":"<Angle<T>>::degrees","value":"pub fn degrees(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6885,"byte_end":6894,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7039,"byte_end":7049,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"to_degrees","qualname":"<Angle<T>>::to_degrees","value":"pub fn to_degrees(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7018,"byte_end":7027,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7303,"byte_end":7311,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"positive","qualname":"<Angle<T>>::positive","value":"pub fn positive(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the [0..2*PI[ range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the [0..2*PI[ range.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7245,"byte_end":7291,"line_start":61,"line_end":61,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7572,"byte_end":7578,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"signed","qualname":"<Angle<T>>::signed","value":"pub fn signed(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the ]-PI..PI] range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the ]-PI..PI] range.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7514,"byte_end":7560,"line_start":71,"line_end":71,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7965,"byte_end":7973,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Angle<T>>::angle_to","value":"pub fn angle_to(&Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the shortest signed angle between two angles.","sig":null,"attributes":[{"value":"/ Returns the shortest signed angle between two angles.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7841,"byte_end":7898,"line_start":87,"line_end":87,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7903,"byte_end":7906,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Takes wrapping and signs into account.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7911,"byte_end":7953,"line_start":89,"line_end":89,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8259,"byte_end":8263,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Angle<T>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linear interpolation between two angles, using the shortest path.\n","sig":null,"attributes":[{"value":"/ Linear interpolation between two angles, using the shortest path.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8178,"byte_end":8247,"line_start":98,"line_end":98,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8440,"byte_end":8447,"line_start":109,"line_end":109,"column_start":12,"column_end":19},"name":"sin_cos","qualname":"<Angle<T>>::sin_cos","value":"pub fn sin_cos(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Returns (sin(self), cos(self)).\n","sig":null,"attributes":[{"value":"/ Returns (sin(self), cos(self)).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8393,"byte_end":8428,"line_start":108,"line_end":108,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8555,"byte_end":8559,"line_start":118,"line_end":118,"column_start":12,"column_end":16},"name":"zero","qualname":"<Angle<T>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8688,"byte_end":8690,"line_start":127,"line_end":127,"column_start":12,"column_end":14},"name":"pi","qualname":"<Angle<T>>::pi","value":"pub fn pi() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8753,"byte_end":8759,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"two_pi","qualname":"<Angle<T>>::two_pi","value":"pub fn two_pi() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8832,"byte_end":8841,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"frac_pi_2","qualname":"<Angle<T>>::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8911,"byte_end":8920,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"frac_pi_3","qualname":"<Angle<T>>::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8990,"byte_end":8999,"line_start":143,"line_end":143,"column_start":12,"column_end":21},"name":"frac_pi_4","qualname":"<Angle<T>>::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9190,"byte_end":9194,"line_start":154,"line_end":154,"column_start":12,"column_end":16},"name":"cast","qualname":"<Angle<T>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Angle<NewT>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9112,"byte_end":9164,"line_start":152,"line_end":152,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9169,"byte_end":9178,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9351,"byte_end":9359,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Angle<T>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Angle<NewT>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9278,"byte_end":9339,"line_start":158,"line_end":158,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9585,"byte_end":9591,"line_start":167,"line_end":167,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Angle<T>>::to_f32","value":"pub fn to_f32(&Self) -> Angle<f32>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle to `f32`.\n","sig":null,"attributes":[{"value":"/ Cast angle to `f32`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9535,"byte_end":9559,"line_start":165,"line_end":165,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9564,"byte_end":9573,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9693,"byte_end":9699,"line_start":173,"line_end":173,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Angle<T>>::to_f64","value":"pub fn to_f64(&Self) -> Angle<f64>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle `f64`.\n","sig":null,"attributes":[{"value":"/ Cast angle `f64`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9646,"byte_end":9667,"line_start":171,"line_end":171,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9672,"byte_end":9681,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":164},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxeq","qualname":"::approxeq","value":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":3703},{"krate":0,"index":3706}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":165},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":14995,"byte_end":15003,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"ApproxEq","qualname":"::approxeq::ApproxEq","value":"ApproxEq<Eps>","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"decl_id":null,"docs":" Trait for testing approximate equality\n","sig":null,"attributes":[{"value":"/ Trait for testing approximate equality","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":14942,"byte_end":14984,"line_start":10,"line_end":10,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":15048,"byte_end":15062,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"approx_epsilon","qualname":"::approxeq::ApproxEq::approx_epsilon","value":"pub fn approx_epsilon() -> Eps","parent":{"krate":0,"index":165},"children":[],"decl_id":null,"docs":" Default epsilon value\n","sig":null,"attributes":[{"value":"/ Default epsilon value","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":15015,"byte_end":15040,"line_start":12,"line_end":12,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":15200,"byte_end":15213,"line_start":17,"line_end":17,"column_start":8,"column_end":21},"name":"approx_eq_eps","qualname":"::approxeq::ApproxEq::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &Eps) -> bool","parent":{"krate":0,"index":165},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n a provided epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":15078,"byte_end":15158,"line_start":15,"line_end":15,"column_start":5,"column_end":85}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":15163,"byte_end":15192,"line_start":16,"line_end":16,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":15405,"byte_end":15414,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"approx_eq","qualname":"::approxeq::ApproxEq::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool","parent":{"krate":0,"index":165},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n the `approx_epsilon()` epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":15271,"byte_end":15351,"line_start":19,"line_end":19,"column_start":5,"column_end":85}},{"value":"/ the `approx_epsilon()` epsilon value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxeq.rs","byte_start":15356,"byte_end":15397,"line_start":20,"line_end":20,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":171},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxord.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxord","qualname":"::approxord","value":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxord.rs","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174}],"decl_id":null,"docs":" Utilities for testing approximate ordering - especially true for\n floating point types, where NaN's cannot be ordered.\n","sig":null,"attributes":[{"value":"/ Utilities for testing approximate ordering - especially true for","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxord.rs","byte_start":16391,"byte_end":16459,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/ floating point types, where NaN's cannot be ordered.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxord.rs","byte_start":16460,"byte_end":16516,"line_start":11,"line_end":11,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxord.rs","byte_start":16525,"byte_end":16528,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"min","qualname":"::approxord::min","value":"pub fn min<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/approxord.rs","byte_start":16628,"byte_end":16631,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"max","qualname":"::approxord::max","value":"pub fn max<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":206},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19483,"byte_end":19488,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"Box2D","qualname":"::box2d::Box2D","value":"Box2D { min, max }","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210}],"decl_id":null,"docs":" A 2d axis aligned rectangle represented by its minimum and maximum coordinates.","sig":null,"attributes":[{"value":"/ A 2d axis aligned rectangle represented by its minimum and maximum coordinates.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":17972,"byte_end":18055,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18056,"byte_end":18059,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18060,"byte_end":18080,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18081,"byte_end":18084,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This struct is similar to [`Rect`], but stores rectangle as two endpoints","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18085,"byte_end":18162,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ instead of origin point and size. Such representation has several advantages over","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18163,"byte_end":18248,"line_start":35,"line_end":35,"column_start":1,"column_end":86}},{"value":"/ [`Rect`] representation:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18249,"byte_end":18277,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ - Several operations are more efficient with `Box2D`, including [`intersection`],","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18278,"byte_end":18363,"line_start":37,"line_end":37,"column_start":1,"column_end":86}},{"value":"/   [`union`], and point-in-rect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18364,"byte_end":18399,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"/ - The representation is less susceptible to overflow. With [`Rect`], computation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18400,"byte_end":18484,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/   of second point can overflow for a large range of values of origin and size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18485,"byte_end":18567,"line_start":40,"line_end":40,"column_start":1,"column_end":83}},{"value":"/   However, with `Box2D`, computation of [`size`] cannot overflow if the coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18568,"byte_end":18655,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/   are signed and the resulting size is unsigned.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18656,"byte_end":18708,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18709,"byte_end":18712,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ A known disadvantage of `Box2D` is that translating the rectangle requires translating","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18713,"byte_end":18803,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ both points, whereas translating [`Rect`] only requires translating one point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18804,"byte_end":18886,"line_start":45,"line_end":45,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18887,"byte_end":18890,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Empty box","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18891,"byte_end":18906,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18907,"byte_end":18910,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ A box is considered empty (see [`is_empty`]) if any of the following is true:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18911,"byte_end":18992,"line_start":49,"line_end":49,"column_start":1,"column_end":82}},{"value":"/ - it's area is empty,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":18993,"byte_end":19018,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ - it's area is negative (`min.x > max.x` or `min.y > max.y`),","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19019,"byte_end":19084,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ - it contains NaNs.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19085,"byte_end":19108,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19109,"byte_end":19112,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`Rect`]: struct.Rect.html","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19113,"byte_end":19143,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/ [`intersection`]: #method.intersection","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19144,"byte_end":19186,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ [`is_empty`]: #method.is_empty","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19187,"byte_end":19221,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"/ [`union`]: #method.union","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19222,"byte_end":19250,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/ [`size`]: #method.size","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19251,"byte_end":19277,"line_start":58,"line_end":58,"column_start":1,"column_end":27}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19278,"byte_end":19288,"line_start":59,"line_end":59,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":209},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19505,"byte_end":19508,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"min","qualname":"::box2d::Box2D::min","value":"point::Point2D<T, U>","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":210},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19533,"byte_end":19536,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"max","qualname":"::box2d::Box2D::max","value":"point::Point2D<T, U>","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20384,"byte_end":20387,"line_start":105,"line_end":105,"column_start":18,"column_end":21},"name":"new","qualname":"<Box2D<T, U>>::new","value":"pub const fn new(Point2D<T, U>, Point2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20336,"byte_end":20352,"line_start":103,"line_end":103,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20357,"byte_end":20366,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20783,"byte_end":20794,"line_start":119,"line_end":119,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box2D<T, U>>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative area.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative area.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20528,"byte_end":20576,"line_start":114,"line_end":114,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20581,"byte_end":20584,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20589,"byte_end":20681,"line_start":116,"line_end":116,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20686,"byte_end":20757,"line_start":117,"line_end":117,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20762,"byte_end":20771,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20962,"byte_end":20970,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box2D<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, negative or NaN.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20882,"byte_end":20936,"line_start":123,"line_end":123,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20941,"byte_end":20950,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21133,"byte_end":21143,"line_start":131,"line_end":131,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box2D<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two boxes intersect.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the two boxes intersect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21061,"byte_end":21107,"line_start":129,"line_end":129,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21112,"byte_end":21121,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21569,"byte_end":21577,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box2D<T, U>>::contains","value":"pub fn contains(&Self, Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the point. Points are considered\n in the box if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the point. Points are considered","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21339,"byte_end":21411,"line_start":138,"line_end":138,"column_start":5,"column_end":77}},{"value":"/ in the box if they are on the front, left or top faces, but outside if they","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21416,"byte_end":21495,"line_start":139,"line_end":139,"column_start":5,"column_end":84}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21500,"byte_end":21543,"line_start":140,"line_end":140,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21548,"byte_end":21557,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21935,"byte_end":21947,"line_start":150,"line_end":150,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box2D<T, U>>::contains_box","value":"pub fn contains_box(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the interior of the other box. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the interior of the other box. Always","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21711,"byte_end":21788,"line_start":146,"line_end":146,"column_start":5,"column_end":82}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21793,"byte_end":21869,"line_start":147,"line_end":147,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box is empty.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21874,"byte_end":21909,"line_start":148,"line_end":148,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":21914,"byte_end":21923,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22273,"byte_end":22285,"line_start":164,"line_end":164,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box2D<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22252,"byte_end":22261,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22524,"byte_end":22536,"line_start":174,"line_end":174,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box2D<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes, returning `None` if the boxes do not intersect.\n","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes, returning `None` if the boxes do not intersect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22407,"byte_end":22498,"line_start":172,"line_end":172,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22503,"byte_end":22512,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23114,"byte_end":23136,"line_start":191,"line_end":191,"column_start":12,"column_end":34},"name":"intersection_unchecked","qualname":"<Box2D<T, U>>::intersection_unchecked","value":"pub fn intersection_unchecked(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes without check whether they do intersect.","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes without check whether they do intersect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22718,"byte_end":22801,"line_start":184,"line_end":184,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22806,"byte_end":22809,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ The result is a negative box if the boxes do not intersect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22814,"byte_end":22877,"line_start":186,"line_end":186,"column_start":5,"column_end":68}},{"value":"/ This can be useful for computing the intersection of more than two boxes, as","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22882,"byte_end":22962,"line_start":187,"line_end":187,"column_start":5,"column_end":85}},{"value":"/ it is possible to chain multiple intersection_unchecked calls and check for","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22967,"byte_end":23046,"line_start":188,"line_end":188,"column_start":5,"column_end":84}},{"value":"/ empty/negative result at the end.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23051,"byte_end":23088,"line_start":189,"line_end":189,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23093,"byte_end":23102,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23396,"byte_end":23401,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"union","qualname":"<Box2D<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23375,"byte_end":23384,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23782,"byte_end":23791,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box2D<T, U>>::translate","value":"pub fn translate(&Self, Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box, translated by a vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23707,"byte_end":23756,"line_start":211,"line_end":211,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23761,"byte_end":23770,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24018,"byte_end":24022,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"size","qualname":"<Box2D<T, U>>::size","value":"pub fn size(&Self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23997,"byte_end":24006,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24120,"byte_end":24125,"line_start":231,"line_end":231,"column_start":12,"column_end":17},"name":"width","qualname":"<Box2D<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24099,"byte_end":24108,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24204,"byte_end":24210,"line_start":236,"line_end":236,"column_start":12,"column_end":18},"name":"height","qualname":"<Box2D<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24183,"byte_end":24192,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24289,"byte_end":24296,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"to_rect","qualname":"<Box2D<T, U>>::to_rect","value":"pub fn to_rect(&Self) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24268,"byte_end":24277,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24617,"byte_end":24624,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box2D<T, U>>::inflate","value":"pub fn inflate(&Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24505,"byte_end":24575,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24580,"byte_end":24589,"line_start":254,"line_end":254,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24594,"byte_end":24605,"line_start":255,"line_end":255,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25060,"byte_end":25069,"line_start":267,"line_end":267,"column_start":12,"column_end":21},"name":"inner_box","qualname":"<Box2D<T, U>>::inner_box","value":"pub fn inner_box(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner box.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner box.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24832,"byte_end":24884,"line_start":263,"line_end":263,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24889,"byte_end":24892,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal, vertical","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24897,"byte_end":24968,"line_start":265,"line_end":265,"column_start":5,"column_end":76}},{"value":"/ and applicate offsets must not be larger than the original side length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24973,"byte_end":25048,"line_start":266,"line_end":266,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25417,"byte_end":25426,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"outer_box","qualname":"<Box2D<T, U>>::outer_box","value":"pub fn outer_box(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the b and position of an outer box.","sig":null,"attributes":[{"value":"/ Calculate the b and position of an outer box.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25280,"byte_end":25329,"line_start":274,"line_end":274,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25334,"byte_end":25337,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded box is returned.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25342,"byte_end":25405,"line_start":276,"line_end":276,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25783,"byte_end":25792,"line_start":291,"line_end":291,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box2D<T, U>>::from_size","value":"pub fn from_size(Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box2D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box2D of the given size, at offset zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25703,"byte_end":25757,"line_start":289,"line_end":289,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25762,"byte_end":25771,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":26041,"byte_end":26052,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box2D<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25962,"byte_end":26029,"line_start":297,"line_end":297,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27088,"byte_end":27092,"line_start":340,"line_end":340,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box2D<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box and another box.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box and another box.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27004,"byte_end":27062,"line_start":338,"line_end":338,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27067,"byte_end":27076,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27311,"byte_end":27317,"line_start":349,"line_end":349,"column_start":12,"column_end":18},"name":"center","qualname":"<Box2D<T, U>>::center","value":"pub fn center(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27551,"byte_end":27555,"line_start":360,"line_end":360,"column_start":12,"column_end":16},"name":"area","qualname":"<Box2D<T, U>>::area","value":"pub fn area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27530,"byte_end":27539,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27747,"byte_end":27751,"line_start":371,"line_end":371,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box2D<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27692,"byte_end":27735,"line_start":370,"line_end":370,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29600,"byte_end":29610,"line_start":448,"line_end":448,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box2D<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29520,"byte_end":29574,"line_start":446,"line_end":446,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29579,"byte_end":29588,"line_start":447,"line_end":447,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29783,"byte_end":29795,"line_start":454,"line_end":454,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box2D<T, U>>::from_untyped","value":"pub fn from_untyped(&Box2D<T, UnknownUnit>) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29721,"byte_end":29757,"line_start":452,"line_end":452,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29762,"byte_end":29771,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29973,"byte_end":29982,"line_start":460,"line_end":460,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Box2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29930,"byte_end":29947,"line_start":458,"line_end":458,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29952,"byte_end":29961,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30105,"byte_end":30110,"line_start":465,"line_end":465,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box2D<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S) -> Self where T: Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30084,"byte_end":30093,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30768,"byte_end":30772,"line_start":483,"line_end":483,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Box2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30388,"byte_end":30462,"line_start":477,"line_end":477,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30467,"byte_end":30470,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30475,"byte_end":30562,"line_start":479,"line_end":479,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30567,"byte_end":30655,"line_start":480,"line_end":480,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30660,"byte_end":30742,"line_start":481,"line_end":481,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30747,"byte_end":30756,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31254,"byte_end":31262,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Box2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30879,"byte_end":30962,"line_start":487,"line_end":487,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30967,"byte_end":30970,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30975,"byte_end":31062,"line_start":489,"line_end":489,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31067,"byte_end":31155,"line_start":490,"line_end":490,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31160,"byte_end":31242,"line_start":491,"line_end":491,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31574,"byte_end":31580,"line_start":503,"line_end":503,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box2D<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Box2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31521,"byte_end":31548,"line_start":501,"line_end":501,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31553,"byte_end":31562,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31691,"byte_end":31697,"line_start":509,"line_end":509,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box2D<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Box2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31638,"byte_end":31665,"line_start":507,"line_end":507,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31670,"byte_end":31679,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32054,"byte_end":32062,"line_start":519,"line_end":519,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box2D<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Box2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31755,"byte_end":31812,"line_start":513,"line_end":513,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31817,"byte_end":31820,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31825,"byte_end":31900,"line_start":515,"line_end":515,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31905,"byte_end":31980,"line_start":516,"line_end":516,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":31985,"byte_end":32028,"line_start":517,"line_end":517,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32033,"byte_end":32042,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32419,"byte_end":32425,"line_start":529,"line_end":529,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box2D<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Box2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32122,"byte_end":32177,"line_start":523,"line_end":523,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32182,"byte_end":32185,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32190,"byte_end":32265,"line_start":525,"line_end":525,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32270,"byte_end":32345,"line_start":526,"line_end":526,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32350,"byte_end":32393,"line_start":527,"line_end":527,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32398,"byte_end":32407,"line_start":528,"line_end":528,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32780,"byte_end":32786,"line_start":539,"line_end":539,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box2D<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Box2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32483,"byte_end":32538,"line_start":533,"line_end":533,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32543,"byte_end":32546,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32551,"byte_end":32626,"line_start":535,"line_end":535,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32631,"byte_end":32706,"line_start":536,"line_end":536,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32711,"byte_end":32754,"line_start":537,"line_end":537,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32759,"byte_end":32768,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33141,"byte_end":33147,"line_start":549,"line_end":549,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box2D<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Box2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32844,"byte_end":32899,"line_start":543,"line_end":543,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32904,"byte_end":32907,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32912,"byte_end":32987,"line_start":545,"line_end":545,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":32992,"byte_end":33067,"line_start":546,"line_end":546,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33072,"byte_end":33115,"line_start":547,"line_end":547,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33120,"byte_end":33129,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33796,"byte_end":33801,"line_start":568,"line_end":568,"column_start":12,"column_end":17},"name":"round","qualname":"<Box2D<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with edges rounded to integer coordinates, such that\n the returned box has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box with edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33252,"byte_end":33321,"line_start":558,"line_end":558,"column_start":5,"column_end":74}},{"value":"/ the returned box has the same set of pixel centers as the original","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33326,"byte_end":33396,"line_start":559,"line_end":559,"column_start":5,"column_end":75}},{"value":"/ one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33401,"byte_end":33409,"line_start":560,"line_end":560,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33414,"byte_end":33447,"line_start":561,"line_end":561,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33452,"byte_end":33514,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33519,"byte_end":33591,"line_start":563,"line_end":563,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33596,"byte_end":33628,"line_start":564,"line_end":564,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33633,"byte_end":33716,"line_start":565,"line_end":565,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33721,"byte_end":33768,"line_start":566,"line_end":566,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33773,"byte_end":33784,"line_start":567,"line_end":567,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34095,"byte_end":34103,"line_start":580,"line_end":580,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box2D<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box contains the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33939,"byte_end":34014,"line_start":577,"line_end":577,"column_start":5,"column_end":80}},{"value":"/ the original box contains the resulting box.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34019,"byte_end":34067,"line_start":578,"line_end":578,"column_start":5,"column_end":53}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34072,"byte_end":34083,"line_start":579,"line_end":579,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34393,"byte_end":34402,"line_start":589,"line_end":589,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box2D<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box is contained in the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34230,"byte_end":34305,"line_start":586,"line_end":586,"column_start":5,"column_end":80}},{"value":"/ the original box is contained in the resulting box.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34310,"byte_end":34365,"line_start":587,"line_end":587,"column_start":5,"column_end":60}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34370,"byte_end":34381,"line_start":588,"line_end":588,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":391},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":42863,"byte_end":42868,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"Box3D","qualname":"::box3d::Box3D","value":"Box3D { min, max }","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395}],"decl_id":null,"docs":" An axis aligned 3D box represented by its minimum and maximum coordinates.\n","sig":null,"attributes":[{"value":"/ An axis aligned 3D box represented by its minimum and maximum coordinates.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":42579,"byte_end":42657,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":42658,"byte_end":42668,"line_start":29,"line_end":29,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":394},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":42885,"byte_end":42888,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"min","qualname":"::box3d::Box3D::min","value":"point::Point3D<T, U>","parent":{"krate":0,"index":391},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":395},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":42913,"byte_end":42916,"line_start":37,"line_end":37,"column_start":9,"column_end":12},"name":"max","qualname":"::box3d::Box3D::max","value":"point::Point3D<T, U>","parent":{"krate":0,"index":391},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43764,"byte_end":43767,"line_start":75,"line_end":75,"column_start":18,"column_end":21},"name":"new","qualname":"<Box3D<T, U>>::new","value":"pub const fn new(Point3D<T, U>, Point3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43716,"byte_end":43732,"line_start":73,"line_end":73,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43737,"byte_end":43746,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44165,"byte_end":44176,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box3D<T, U>>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative volume.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative volume.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43908,"byte_end":43958,"line_start":84,"line_end":84,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43963,"byte_end":43966,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43971,"byte_end":44063,"line_start":86,"line_end":86,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44068,"byte_end":44139,"line_start":87,"line_end":87,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44144,"byte_end":44153,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44371,"byte_end":44379,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box3D<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, negative or NaN.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44291,"byte_end":44345,"line_start":93,"line_end":93,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44350,"byte_end":44359,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44518,"byte_end":44528,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box3D<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44497,"byte_end":44506,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45038,"byte_end":45046,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box3D<T, U>>::contains","value":"pub fn contains(&Self, Point3D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the point. Points are considered\n in the box3d if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the point. Points are considered","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44804,"byte_end":44878,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/ in the box3d if they are on the front, left or top faces, but outside if they","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44883,"byte_end":44964,"line_start":110,"line_end":110,"column_start":5,"column_end":86}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":44969,"byte_end":45012,"line_start":111,"line_end":111,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45017,"byte_end":45026,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45539,"byte_end":45551,"line_start":126,"line_end":126,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box3D<T, U>>::contains_box","value":"pub fn contains_box(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the interior of the other box3d. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box3d is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the interior of the other box3d. Always","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45309,"byte_end":45390,"line_start":122,"line_end":122,"column_start":5,"column_end":86}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45395,"byte_end":45471,"line_start":123,"line_end":123,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box3d is empty.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45476,"byte_end":45513,"line_start":124,"line_end":124,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45518,"byte_end":45527,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45967,"byte_end":45979,"line_start":142,"line_end":142,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box3D<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45946,"byte_end":45955,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":46122,"byte_end":46134,"line_start":151,"line_end":151,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box3D<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":46101,"byte_end":46110,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":46323,"byte_end":46345,"line_start":161,"line_end":161,"column_start":12,"column_end":34},"name":"intersection_unchecked","qualname":"<Box3D<T, U>>::intersection_unchecked","value":"pub fn intersection_unchecked(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":46902,"byte_end":46907,"line_start":179,"line_end":179,"column_start":12,"column_end":17},"name":"union","qualname":"<Box3D<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing both of the provided boxes.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing both of the provided boxes.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":46809,"byte_end":46876,"line_start":177,"line_end":177,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":46881,"byte_end":46890,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47498,"byte_end":47507,"line_start":202,"line_end":202,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box3D<T, U>>::translate","value":"pub fn translate(&Self, Vector3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box3d, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box3d, translated by a vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47405,"byte_end":47456,"line_start":199,"line_end":199,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47461,"byte_end":47470,"line_start":200,"line_end":200,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47475,"byte_end":47486,"line_start":201,"line_end":201,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47734,"byte_end":47738,"line_start":215,"line_end":215,"column_start":12,"column_end":16},"name":"size","qualname":"<Box3D<T, U>>::size","value":"pub fn size(&Self) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47713,"byte_end":47722,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47938,"byte_end":47943,"line_start":224,"line_end":224,"column_start":12,"column_end":17},"name":"width","qualname":"<Box3D<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47917,"byte_end":47926,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48022,"byte_end":48028,"line_start":229,"line_end":229,"column_start":12,"column_end":18},"name":"height","qualname":"<Box3D<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48001,"byte_end":48010,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48107,"byte_end":48112,"line_start":234,"line_end":234,"column_start":12,"column_end":17},"name":"depth","qualname":"<Box3D<T, U>>::depth","value":"pub fn depth(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48086,"byte_end":48095,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48370,"byte_end":48377,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box3D<T, U>>::inflate","value":"pub fn inflate(&Self, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48258,"byte_end":48328,"line_start":243,"line_end":243,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48333,"byte_end":48342,"line_start":244,"line_end":244,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48347,"byte_end":48358,"line_start":245,"line_end":245,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48787,"byte_end":48796,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box3D<T, U>>::from_size","value":"pub fn from_size(Size3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box3D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box3D of the given size, at offset zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48707,"byte_end":48761,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48766,"byte_end":48775,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":49045,"byte_end":49056,"line_start":267,"line_end":267,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box3D<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48966,"byte_end":49033,"line_start":266,"line_end":266,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50281,"byte_end":50285,"line_start":315,"line_end":315,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box3D<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box3d and another box3d.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box3d and another box3d.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50193,"byte_end":50255,"line_start":313,"line_end":313,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50260,"byte_end":50269,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50504,"byte_end":50510,"line_start":324,"line_end":324,"column_start":12,"column_end":18},"name":"center","qualname":"<Box3D<T, U>>::center","value":"pub fn center(&Self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50744,"byte_end":50750,"line_start":335,"line_end":335,"column_start":12,"column_end":18},"name":"volume","qualname":"<Box3D<T, U>>::volume","value":"pub fn volume(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50723,"byte_end":50732,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50875,"byte_end":50882,"line_start":341,"line_end":341,"column_start":12,"column_end":19},"name":"xy_area","qualname":"<Box3D<T, U>>::xy_area","value":"pub fn xy_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50854,"byte_end":50863,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50994,"byte_end":51001,"line_start":347,"line_end":347,"column_start":12,"column_end":19},"name":"yz_area","qualname":"<Box3D<T, U>>::yz_area","value":"pub fn yz_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50973,"byte_end":50982,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51113,"byte_end":51120,"line_start":353,"line_end":353,"column_start":12,"column_end":19},"name":"xz_area","qualname":"<Box3D<T, U>>::xz_area","value":"pub fn xz_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51092,"byte_end":51101,"line_start":352,"line_end":352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51311,"byte_end":51315,"line_start":364,"line_end":364,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box3D<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51256,"byte_end":51299,"line_start":363,"line_end":363,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53240,"byte_end":53250,"line_start":443,"line_end":443,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box3D<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53160,"byte_end":53214,"line_start":441,"line_end":441,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53219,"byte_end":53228,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53464,"byte_end":53476,"line_start":452,"line_end":452,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box3D<T, U>>::from_untyped","value":"pub fn from_untyped(&Box3D<T, UnknownUnit>) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53402,"byte_end":53438,"line_start":450,"line_end":450,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53443,"byte_end":53452,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53695,"byte_end":53704,"line_start":461,"line_end":461,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Box3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53652,"byte_end":53669,"line_start":459,"line_end":459,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53674,"byte_end":53683,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53827,"byte_end":53832,"line_start":466,"line_end":466,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box3D<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S, S) -> Self where T: Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53806,"byte_end":53815,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54534,"byte_end":54538,"line_start":484,"line_end":484,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Box3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54154,"byte_end":54228,"line_start":478,"line_end":478,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54233,"byte_end":54236,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54241,"byte_end":54328,"line_start":480,"line_end":480,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54333,"byte_end":54421,"line_start":481,"line_end":481,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54426,"byte_end":54508,"line_start":482,"line_end":482,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54513,"byte_end":54522,"line_start":483,"line_end":483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55020,"byte_end":55028,"line_start":493,"line_end":493,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Box3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54645,"byte_end":54728,"line_start":488,"line_end":488,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54733,"byte_end":54736,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54741,"byte_end":54828,"line_start":490,"line_end":490,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54833,"byte_end":54921,"line_start":491,"line_end":491,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54926,"byte_end":55008,"line_start":492,"line_end":492,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55342,"byte_end":55348,"line_start":504,"line_end":504,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box3D<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Box3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box3d.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55287,"byte_end":55316,"line_start":502,"line_end":502,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55321,"byte_end":55330,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55461,"byte_end":55467,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box3D<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Box3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box3d.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55406,"byte_end":55435,"line_start":508,"line_end":508,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55440,"byte_end":55449,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55828,"byte_end":55836,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box3D<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Box3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box3d, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55525,"byte_end":55584,"line_start":514,"line_end":514,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55589,"byte_end":55592,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55597,"byte_end":55674,"line_start":516,"line_end":516,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55679,"byte_end":55754,"line_start":517,"line_end":517,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55759,"byte_end":55802,"line_start":518,"line_end":518,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55807,"byte_end":55816,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56197,"byte_end":56203,"line_start":530,"line_end":530,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box3D<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Box3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box3d, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55896,"byte_end":55953,"line_start":524,"line_end":524,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55958,"byte_end":55961,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":55966,"byte_end":56043,"line_start":526,"line_end":526,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56048,"byte_end":56123,"line_start":527,"line_end":527,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56128,"byte_end":56171,"line_start":528,"line_end":528,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56176,"byte_end":56185,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56562,"byte_end":56568,"line_start":540,"line_end":540,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box3D<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Box3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box3d, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56261,"byte_end":56318,"line_start":534,"line_end":534,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56323,"byte_end":56326,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56331,"byte_end":56408,"line_start":536,"line_end":536,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56413,"byte_end":56488,"line_start":537,"line_end":537,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56493,"byte_end":56536,"line_start":538,"line_end":538,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56541,"byte_end":56550,"line_start":539,"line_end":539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56927,"byte_end":56933,"line_start":550,"line_end":550,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box3D<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Box3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box3d, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56626,"byte_end":56683,"line_start":544,"line_end":544,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56688,"byte_end":56691,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56696,"byte_end":56773,"line_start":546,"line_end":546,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56778,"byte_end":56853,"line_start":547,"line_end":547,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56858,"byte_end":56901,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":56906,"byte_end":56915,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57586,"byte_end":57591,"line_start":569,"line_end":569,"column_start":12,"column_end":17},"name":"round","qualname":"<Box3D<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with edges rounded to integer coordinates, such that\n the returned box3d has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box3d with edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57038,"byte_end":57109,"line_start":559,"line_end":559,"column_start":5,"column_end":76}},{"value":"/ the returned box3d has the same set of pixel centers as the original","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57114,"byte_end":57186,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/ one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57191,"byte_end":57199,"line_start":561,"line_end":561,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57204,"byte_end":57237,"line_start":562,"line_end":562,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57242,"byte_end":57304,"line_start":563,"line_end":563,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57309,"byte_end":57381,"line_start":564,"line_end":564,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57386,"byte_end":57418,"line_start":565,"line_end":565,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57423,"byte_end":57506,"line_start":566,"line_end":566,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57511,"byte_end":57558,"line_start":567,"line_end":567,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57563,"byte_end":57574,"line_start":568,"line_end":568,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57891,"byte_end":57899,"line_start":581,"line_end":581,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box3D<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d contains the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57729,"byte_end":57806,"line_start":578,"line_end":578,"column_start":5,"column_end":82}},{"value":"/ the original box3d contains the resulting box3d.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57811,"byte_end":57863,"line_start":579,"line_end":579,"column_start":5,"column_end":57}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57868,"byte_end":57879,"line_start":580,"line_end":580,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":58192,"byte_end":58201,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box3D<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d is contained in the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":58023,"byte_end":58100,"line_start":588,"line_end":588,"column_start":5,"column_end":82}},{"value":"/ the original box3d is contained in the resulting box3d.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":58105,"byte_end":58164,"line_start":589,"line_end":589,"column_start":5,"column_end":64}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":58169,"byte_end":58180,"line_start":590,"line_end":590,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":58576,"byte_end":58581,"line_start":609,"line_end":609,"column_start":8,"column_end":13},"name":"box3d","qualname":"::box3d::box3d","value":"pub fn box3d<T: Copy, U>(T, T, T, T, T, T) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":58485,"byte_end":58568,"line_start":608,"line_end":608,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":571},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68436,"byte_end":68453,"line_start":25,"line_end":25,"column_start":12,"column_end":29},"name":"HomogeneousVector","qualname":"::homogen::HomogeneousVector","value":"HomogeneousVector { x, y, z, w, _unit }","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578}],"decl_id":null,"docs":" Homogeneous vector in 3D space.\n","sig":null,"attributes":[{"value":"/ Homogeneous vector in 3D space.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68378,"byte_end":68413,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68414,"byte_end":68424,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":574},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68470,"byte_end":68471,"line_start":26,"line_end":26,"column_start":9,"column_end":10},"name":"x","qualname":"::homogen::HomogeneousVector::x","value":"T","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":575},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68484,"byte_end":68485,"line_start":27,"line_end":27,"column_start":9,"column_end":10},"name":"y","qualname":"::homogen::HomogeneousVector::y","value":"T","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":576},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68498,"byte_end":68499,"line_start":28,"line_end":28,"column_start":9,"column_end":10},"name":"z","qualname":"::homogen::HomogeneousVector::z","value":"T","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":577},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68512,"byte_end":68513,"line_start":29,"line_end":29,"column_start":9,"column_end":10},"name":"w","qualname":"::homogen::HomogeneousVector::w","value":"T","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":578},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68545,"byte_end":68550,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"name":"_unit","qualname":"::homogen::HomogeneousVector::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70304,"byte_end":70307,"line_start":107,"line_end":107,"column_start":18,"column_end":21},"name":"new","qualname":"<HomogeneousVector<T, U>>::new","value":"pub const fn new(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70226,"byte_end":70272,"line_start":105,"line_end":105,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70277,"byte_end":70286,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70709,"byte_end":70719,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"to_point2d","qualname":"<HomogeneousVector<T, U>>::to_point2d","value":"pub fn to_point2d(Self) -> Option<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 2D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 2D point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70569,"byte_end":70605,"line_start":119,"line_end":119,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70610,"byte_end":70613,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70618,"byte_end":70683,"line_start":121,"line_end":121,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70688,"byte_end":70697,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71045,"byte_end":71055,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"to_point3d","qualname":"<HomogeneousVector<T, U>>::to_point3d","value":"pub fn to_point3d(Self) -> Option<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 3D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 3D point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70905,"byte_end":70941,"line_start":131,"line_end":131,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70946,"byte_end":70949,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70954,"byte_end":71019,"line_start":133,"line_end":133,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71024,"byte_end":71033,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":656},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74790,"byte_end":74796,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"Length","qualname":"::length::Length","value":"","parent":null,"children":[],"decl_id":null,"docs":" A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","sig":null,"attributes":[{"value":"/ A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74102,"byte_end":74195,"line_start":28,"line_end":28,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74196,"byte_end":74199,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `T` can be any numeric type, for example a primitive type like `u64` or `f32`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74200,"byte_end":74282,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74283,"byte_end":74286,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ `Unit` is not used in the representation of a `Length` value. It is used only at compile time","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74287,"byte_end":74384,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ to ensure that a `Length` stored with one unit is converted explicitly before being used in an","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74385,"byte_end":74483,"line_start":33,"line_end":33,"column_start":1,"column_end":99}},{"value":"/ expression that requires a different unit.  It may be a type without values, such as an empty","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74484,"byte_end":74581,"line_start":34,"line_end":34,"column_start":1,"column_end":98}},{"value":"/ enum.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74582,"byte_end":74591,"line_start":35,"line_end":35,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74592,"byte_end":74595,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ You can multiply a `Length` by a `scale::Scale` to convert it from one unit to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74596,"byte_end":74678,"line_start":37,"line_end":37,"column_start":1,"column_end":83}},{"value":"/ another. See the [`Scale`] docs for an example.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74679,"byte_end":74730,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74731,"byte_end":74734,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Scale`]: struct.Scale.html","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74735,"byte_end":74767,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74768,"byte_end":74778,"line_start":41,"line_end":41,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":660},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74806,"byte_end":74811,"line_start":42,"line_end":42,"column_start":28,"column_end":33},"name":"0","qualname":"::length::Length::0","value":"T","parent":{"krate":0,"index":656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":661},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74828,"byte_end":74849,"line_start":42,"line_end":42,"column_start":50,"column_end":71},"name":"1","qualname":"::length::Length::1","value":"core::marker::PhantomData<Unit>","parent":{"krate":0,"index":656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75675,"byte_end":75678,"line_start":81,"line_end":81,"column_start":18,"column_end":21},"name":"new","qualname":"<Length<T, U>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Associate a value with a unit of measure.\n","sig":null,"attributes":[{"value":"/ Associate a value with a unit of measure.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75598,"byte_end":75643,"line_start":79,"line_end":79,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75648,"byte_end":75657,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75833,"byte_end":75836,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"get","qualname":"<Length<T, U>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Unpack the underlying value from the wrapper.\n","sig":null,"attributes":[{"value":"/ Unpack the underlying value from the wrapper.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75772,"byte_end":75821,"line_start":87,"line_end":87,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75919,"byte_end":75928,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Length<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Length<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75876,"byte_end":75893,"line_start":92,"line_end":92,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75898,"byte_end":75907,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76572,"byte_end":76576,"line_start":115,"line_end":115,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Length<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this length and another length.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this length and another length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75995,"byte_end":76059,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76064,"byte_end":76067,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76072,"byte_end":76085,"line_start":100,"line_end":100,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76090,"byte_end":76093,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76098,"byte_end":76109,"line_start":102,"line_end":102,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Length;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76114,"byte_end":76146,"line_start":103,"line_end":103,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76151,"byte_end":76154,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let from = Length::new(0.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76159,"byte_end":76191,"line_start":105,"line_end":105,"column_start":5,"column_end":37}},{"value":"/ let to = Length::new(8.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76196,"byte_end":76226,"line_start":106,"line_end":106,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76231,"byte_end":76234,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), Length::new(-8.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76239,"byte_end":76294,"line_start":108,"line_end":108,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), Length::new( 0.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76299,"byte_end":76354,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), Length::new( 4.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76359,"byte_end":76414,"line_start":110,"line_end":110,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), Length::new( 8.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76419,"byte_end":76474,"line_start":111,"line_end":111,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), Length::new(16.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76479,"byte_end":76534,"line_start":112,"line_end":112,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76539,"byte_end":76546,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76551,"byte_end":76560,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76932,"byte_end":76935,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"min","qualname":"<Length<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns minimum between this length and another length.\n","sig":null,"attributes":[{"value":"/ Returns minimum between this length and another length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76847,"byte_end":76906,"line_start":125,"line_end":125,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76911,"byte_end":76920,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77086,"byte_end":77089,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"max","qualname":"<Length<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns maximum between this length and another length.\n","sig":null,"attributes":[{"value":"/ Returns maximum between this length and another length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77001,"byte_end":77060,"line_start":131,"line_end":131,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77065,"byte_end":77074,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77300,"byte_end":77304,"line_start":141,"line_end":141,"column_start":12,"column_end":16},"name":"cast","qualname":"<Length<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Length<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77200,"byte_end":77274,"line_start":139,"line_end":139,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77279,"byte_end":77288,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77486,"byte_end":77494,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Length<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Length<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77391,"byte_end":77474,"line_start":145,"line_end":145,"column_start":5,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":809},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":3709},{"krate":0,"index":3711},{"krate":0,"index":3713},{"krate":0,"index":3715},{"krate":0,"index":3717},{"krate":0,"index":3719},{"krate":0,"index":3721},{"krate":0,"index":3723},{"krate":0,"index":3725},{"krate":0,"index":3727},{"krate":0,"index":3729},{"krate":0,"index":3731},{"krate":0,"index":3733},{"krate":0,"index":3735},{"krate":0,"index":3737},{"krate":0,"index":3739},{"krate":0,"index":3741},{"krate":0,"index":3743},{"krate":0,"index":3745},{"krate":0,"index":3747},{"krate":0,"index":3749},{"krate":0,"index":3751},{"krate":0,"index":3753},{"krate":0,"index":3755},{"krate":0,"index":3757},{"krate":0,"index":3759},{"krate":0,"index":3761},{"krate":0,"index":3763},{"krate":0,"index":3765},{"krate":0,"index":3767}],"decl_id":null,"docs":" A one-dimensional length, tagged with its units.\n","sig":null,"attributes":[{"value":"/ A one-dimensional length, tagged with its units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":89499,"byte_end":89551,"line_start":9,"line_end":9,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":811},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90680,"byte_end":90684,"line_start":28,"line_end":28,"column_start":11,"column_end":15},"name":"Zero","qualname":"::num::Zero","value":"Zero","parent":null,"children":[{"krate":0,"index":812}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90694,"byte_end":90698,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"zero","qualname":"::num::Zero::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":811},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":816},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90825,"byte_end":90828,"line_start":38,"line_end":38,"column_start":11,"column_end":14},"name":"One","qualname":"::num::One","value":"One","parent":null,"children":[{"krate":0,"index":817}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90838,"byte_end":90841,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"one","qualname":"::num::One::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":821},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91024,"byte_end":91029,"line_start":49,"line_end":49,"column_start":11,"column_end":16},"name":"Round","qualname":"::num::Round","value":"Round: Copy","parent":null,"children":[{"krate":0,"index":822}],"decl_id":null,"docs":" Defines the nearest integer value to the original value.\n","sig":null,"attributes":[{"value":"/ Defines the nearest integer value to the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90953,"byte_end":91013,"line_start":48,"line_end":48,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91194,"byte_end":91199,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"round","qualname":"::num::Round::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":" Rounds to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds to the nearest integer value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91042,"byte_end":91082,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91087,"byte_end":91090,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91095,"byte_end":91170,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91175,"byte_end":91186,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":823},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91299,"byte_end":91304,"line_start":57,"line_end":57,"column_start":11,"column_end":16},"name":"Floor","qualname":"::num::Floor","value":"Floor: Copy","parent":null,"children":[{"krate":0,"index":824}],"decl_id":null,"docs":" Defines the biggest integer equal or lower than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the biggest integer equal or lower than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91217,"byte_end":91288,"line_start":56,"line_end":56,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91502,"byte_end":91507,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"floor","qualname":"::num::Floor::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":823},"children":[],"decl_id":null,"docs":" Rounds to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91317,"byte_end":91390,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91395,"byte_end":91398,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91403,"byte_end":91478,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91483,"byte_end":91494,"line_start":61,"line_end":61,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":825},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91610,"byte_end":91614,"line_start":65,"line_end":65,"column_start":11,"column_end":15},"name":"Ceil","qualname":"::num::Ceil","value":"Ceil: Copy","parent":null,"children":[{"krate":0,"index":826}],"decl_id":null,"docs":" Defines the smallest integer equal or greater than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the smallest integer equal or greater than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91525,"byte_end":91599,"line_start":64,"line_end":64,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91815,"byte_end":91819,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"ceil","qualname":"::num::Ceil::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" Rounds to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91627,"byte_end":91703,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91708,"byte_end":91711,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91716,"byte_end":91791,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91796,"byte_end":91807,"line_start":69,"line_end":69,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":865},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":93981,"byte_end":93988,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"Point2D","qualname":"::point::Point2D","value":"Point2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870}],"decl_id":null,"docs":" A 2d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Point tagged with a unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":93924,"byte_end":93958,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":93959,"byte_end":93969,"line_start":30,"line_end":30,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":868},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":94005,"byte_end":94006,"line_start":32,"line_end":32,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point2D::x","value":"T","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":869},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":94019,"byte_end":94020,"line_start":33,"line_end":33,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point2D::y","value":"T","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":870},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":94052,"byte_end":94057,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96245,"byte_end":96251,"line_start":134,"line_end":134,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point2D<T, U>>::origin","value":"pub fn origin() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96171,"byte_end":96219,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96224,"byte_end":96233,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96420,"byte_end":96424,"line_start":143,"line_end":143,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96349,"byte_end":96394,"line_start":141,"line_end":141,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96399,"byte_end":96408,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96580,"byte_end":96583,"line_start":152,"line_end":152,"column_start":18,"column_end":21},"name":"new","qualname":"<Point2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96502,"byte_end":96548,"line_start":150,"line_end":150,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96553,"byte_end":96562,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96798,"byte_end":96810,"line_start":162,"line_end":162,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96707,"byte_end":96772,"line_start":160,"line_end":160,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96777,"byte_end":96786,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96974,"byte_end":96979,"line_start":168,"line_end":168,"column_start":12,"column_end":17},"name":"splat","qualname":"<Point2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96891,"byte_end":96948,"line_start":166,"line_end":166,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96953,"byte_end":96962,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97205,"byte_end":97217,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point2D<T, U>>::from_untyped","value":"pub fn from_untyped(Point2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97143,"byte_end":97179,"line_start":179,"line_end":179,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97184,"byte_end":97193,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97418,"byte_end":97424,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"extend","qualname":"<Point2D<T, U>>::extend","value":"pub fn extend(Self, T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d point from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d point from this one, using the specified z value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97327,"byte_end":97392,"line_start":187,"line_end":187,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97397,"byte_end":97406,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97631,"byte_end":97640,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point2D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97501,"byte_end":97535,"line_start":193,"line_end":193,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97540,"byte_end":97543,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin from this point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97548,"byte_end":97605,"line_start":195,"line_end":195,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97610,"byte_end":97619,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98064,"byte_end":98066,"line_start":218,"line_end":218,"column_start":12,"column_end":14},"name":"yx","qualname":"<Point2D<T, U>>::yx","value":"pub fn yx(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97785,"byte_end":97802,"line_start":205,"line_end":205,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97807,"byte_end":97810,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97815,"byte_end":97828,"line_start":207,"line_end":207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97833,"byte_end":97836,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97841,"byte_end":97852,"line_start":209,"line_end":209,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97857,"byte_end":97893,"line_start":210,"line_end":210,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97898,"byte_end":97912,"line_start":211,"line_end":211,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97917,"byte_end":97920,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97925,"byte_end":97971,"line_start":213,"line_end":213,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97976,"byte_end":97979,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.yx(), point2(-8, 1));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97984,"byte_end":98026,"line_start":215,"line_end":215,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98031,"byte_end":98038,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98043,"byte_end":98052,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98496,"byte_end":98506,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98125,"byte_end":98179,"line_start":222,"line_end":222,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98184,"byte_end":98187,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98192,"byte_end":98205,"line_start":224,"line_end":224,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98210,"byte_end":98213,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98218,"byte_end":98229,"line_start":226,"line_end":226,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98234,"byte_end":98270,"line_start":227,"line_end":227,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98275,"byte_end":98289,"line_start":228,"line_end":228,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98294,"byte_end":98297,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98302,"byte_end":98348,"line_start":230,"line_end":230,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98353,"byte_end":98356,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98361,"byte_end":98407,"line_start":232,"line_end":232,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98412,"byte_end":98458,"line_start":233,"line_end":233,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98463,"byte_end":98470,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98475,"byte_end":98484,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98978,"byte_end":98987,"line_start":255,"line_end":255,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Point2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98584,"byte_end":98632,"line_start":240,"line_end":240,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98637,"byte_end":98640,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98645,"byte_end":98658,"line_start":242,"line_end":242,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98663,"byte_end":98666,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98671,"byte_end":98682,"line_start":244,"line_end":244,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98687,"byte_end":98723,"line_start":245,"line_end":245,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98728,"byte_end":98742,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98747,"byte_end":98761,"line_start":247,"line_end":247,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98766,"byte_end":98769,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98774,"byte_end":98820,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98825,"byte_end":98828,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98833,"byte_end":98884,"line_start":251,"line_end":251,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98889,"byte_end":98940,"line_start":252,"line_end":252,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98945,"byte_end":98952,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":98957,"byte_end":98966,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99356,"byte_end":99364,"line_start":272,"line_end":272,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99058,"byte_end":99094,"line_start":259,"line_end":259,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99099,"byte_end":99102,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99107,"byte_end":99120,"line_start":261,"line_end":261,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99125,"byte_end":99128,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99133,"byte_end":99144,"line_start":263,"line_end":263,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99149,"byte_end":99185,"line_start":264,"line_end":264,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99190,"byte_end":99204,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99209,"byte_end":99212,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99217,"byte_end":99263,"line_start":267,"line_end":267,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99268,"byte_end":99271,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8]);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99276,"byte_end":99318,"line_start":269,"line_end":269,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99323,"byte_end":99330,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99335,"byte_end":99344,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99716,"byte_end":99724,"line_start":289,"line_end":289,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99419,"byte_end":99454,"line_start":276,"line_end":276,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99459,"byte_end":99462,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99467,"byte_end":99480,"line_start":278,"line_end":278,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99485,"byte_end":99488,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99493,"byte_end":99504,"line_start":280,"line_end":280,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99509,"byte_end":99545,"line_start":281,"line_end":281,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99550,"byte_end":99564,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99569,"byte_end":99572,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99577,"byte_end":99623,"line_start":284,"line_end":284,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99628,"byte_end":99631,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99636,"byte_end":99678,"line_start":286,"line_end":286,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99683,"byte_end":99690,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99695,"byte_end":99704,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99866,"byte_end":99871,"line_start":295,"line_end":295,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Point2D<T, U>>::to_3d","value":"pub fn to_3d(Self) -> Point3D<T, U> where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d point with z-coordinate equals to zero.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d point with z-coordinate equals to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99779,"byte_end":99840,"line_start":293,"line_end":293,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99845,"byte_end":99854,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100346,"byte_end":100351,"line_start":314,"line_end":314,"column_start":12,"column_end":17},"name":"round","qualname":"<Point2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":99984,"byte_end":100039,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100044,"byte_end":100047,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100052,"byte_end":100127,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100132,"byte_end":100135,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100140,"byte_end":100151,"line_start":306,"line_end":306,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100156,"byte_end":100181,"line_start":307,"line_end":307,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100186,"byte_end":100200,"line_start":308,"line_end":308,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100205,"byte_end":100208,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).round(), point2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100213,"byte_end":100292,"line_start":310,"line_end":310,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100297,"byte_end":100304,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100309,"byte_end":100318,"line_start":312,"line_end":312,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100323,"byte_end":100334,"line_start":313,"line_end":313,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100854,"byte_end":100858,"line_start":333,"line_end":333,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100458,"byte_end":100549,"line_start":321,"line_end":321,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100554,"byte_end":100557,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100562,"byte_end":100637,"line_start":323,"line_end":323,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100642,"byte_end":100645,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100650,"byte_end":100661,"line_start":325,"line_end":325,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100666,"byte_end":100691,"line_start":326,"line_end":326,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100696,"byte_end":100710,"line_start":327,"line_end":327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100715,"byte_end":100718,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).ceil(), point2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100723,"byte_end":100800,"line_start":329,"line_end":329,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100805,"byte_end":100812,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100817,"byte_end":100826,"line_start":331,"line_end":331,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100831,"byte_end":100842,"line_start":332,"line_end":332,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101358,"byte_end":101363,"line_start":352,"line_end":352,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":100962,"byte_end":101050,"line_start":340,"line_end":340,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101055,"byte_end":101058,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101063,"byte_end":101138,"line_start":342,"line_end":342,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101143,"byte_end":101146,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101151,"byte_end":101162,"line_start":344,"line_end":344,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101167,"byte_end":101192,"line_start":345,"line_end":345,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101197,"byte_end":101211,"line_start":346,"line_end":346,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101216,"byte_end":101219,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).floor(), point2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101224,"byte_end":101304,"line_start":348,"line_end":348,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101309,"byte_end":101316,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101321,"byte_end":101330,"line_start":350,"line_end":350,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101335,"byte_end":101346,"line_start":351,"line_end":351,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102111,"byte_end":102115,"line_start":377,"line_end":377,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101470,"byte_end":101532,"line_start":359,"line_end":359,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101537,"byte_end":101540,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101545,"byte_end":101558,"line_start":361,"line_end":361,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101563,"byte_end":101566,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101571,"byte_end":101582,"line_start":363,"line_end":363,"column_start":5,"column_end":16}},{"value":"/ use euclid::point2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101587,"byte_end":101610,"line_start":364,"line_end":364,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point2D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101615,"byte_end":101648,"line_start":365,"line_end":365,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101653,"byte_end":101656,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let from: Point2D<_> = point2(0.0, 10.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101661,"byte_end":101706,"line_start":367,"line_end":367,"column_start":5,"column_end":50}},{"value":"/ let to:  Point2D<_> = point2(8.0, -4.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101711,"byte_end":101755,"line_start":368,"line_end":368,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101760,"byte_end":101763,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point2(-8.0,  24.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101768,"byte_end":101825,"line_start":370,"line_end":370,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point2( 0.0,  10.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101830,"byte_end":101887,"line_start":371,"line_end":371,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point2( 4.0,   3.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101892,"byte_end":101949,"line_start":372,"line_end":372,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point2( 8.0,  -4.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":101954,"byte_end":102011,"line_start":373,"line_end":373,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point2(16.0, -18.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102016,"byte_end":102073,"line_start":374,"line_end":374,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102078,"byte_end":102085,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102090,"byte_end":102099,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102417,"byte_end":102420,"line_start":388,"line_end":388,"column_start":12,"column_end":15},"name":"min","qualname":"<Point2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102396,"byte_end":102405,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102541,"byte_end":102544,"line_start":393,"line_end":393,"column_start":12,"column_end":15},"name":"max","qualname":"<Point2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102520,"byte_end":102529,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102838,"byte_end":102843,"line_start":402,"line_end":402,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102644,"byte_end":102714,"line_start":397,"line_end":397,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102719,"byte_end":102755,"line_start":398,"line_end":398,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102760,"byte_end":102763,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102768,"byte_end":102812,"line_start":400,"line_end":400,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102817,"byte_end":102826,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103384,"byte_end":103388,"line_start":417,"line_end":417,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Point2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103004,"byte_end":103078,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103083,"byte_end":103086,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103091,"byte_end":103178,"line_start":413,"line_end":413,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103183,"byte_end":103271,"line_start":414,"line_end":414,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103276,"byte_end":103358,"line_start":415,"line_end":415,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103363,"byte_end":103372,"line_start":416,"line_end":416,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103851,"byte_end":103859,"line_start":426,"line_end":426,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Point2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103476,"byte_end":103559,"line_start":421,"line_end":421,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103564,"byte_end":103567,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103572,"byte_end":103659,"line_start":423,"line_end":423,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103664,"byte_end":103752,"line_start":424,"line_end":424,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":103757,"byte_end":103839,"line_start":425,"line_end":425,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104174,"byte_end":104180,"line_start":437,"line_end":437,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Point2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104119,"byte_end":104148,"line_start":435,"line_end":435,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104153,"byte_end":104162,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104294,"byte_end":104300,"line_start":443,"line_end":443,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Point2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104239,"byte_end":104268,"line_start":441,"line_end":441,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104273,"byte_end":104282,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104653,"byte_end":104661,"line_start":453,"line_end":453,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Point2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104359,"byte_end":104418,"line_start":447,"line_end":447,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104423,"byte_end":104426,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104431,"byte_end":104507,"line_start":449,"line_end":449,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104512,"byte_end":104586,"line_start":450,"line_end":450,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104591,"byte_end":104627,"line_start":451,"line_end":451,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104632,"byte_end":104641,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105014,"byte_end":105020,"line_start":463,"line_end":463,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Point2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104722,"byte_end":104779,"line_start":457,"line_end":457,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104784,"byte_end":104787,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104792,"byte_end":104868,"line_start":459,"line_end":459,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104873,"byte_end":104947,"line_start":460,"line_end":460,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104952,"byte_end":104988,"line_start":461,"line_end":461,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":104993,"byte_end":105002,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105369,"byte_end":105375,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Point2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 point, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105079,"byte_end":105134,"line_start":467,"line_end":467,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105139,"byte_end":105142,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105147,"byte_end":105223,"line_start":469,"line_end":469,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105228,"byte_end":105302,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105307,"byte_end":105343,"line_start":471,"line_end":471,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105348,"byte_end":105357,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105724,"byte_end":105730,"line_start":483,"line_end":483,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Point2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 point, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105434,"byte_end":105489,"line_start":477,"line_end":477,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105494,"byte_end":105497,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105502,"byte_end":105578,"line_start":479,"line_end":479,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105583,"byte_end":105657,"line_start":480,"line_end":480,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105662,"byte_end":105698,"line_start":481,"line_end":481,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105703,"byte_end":105712,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105866,"byte_end":105874,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point2D<T, U>>::add_size","value":"pub fn add_size(Self, &Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105845,"byte_end":105854,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106062,"byte_end":106073,"line_start":497,"line_end":497,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point2D<T, U>>::distance_to","value":"pub fn distance_to(Self, Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106041,"byte_end":106050,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1076},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111348,"byte_end":111355,"line_start":721,"line_end":721,"column_start":12,"column_end":19},"name":"Point3D","qualname":"::point::Point3D","value":"Point3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082}],"decl_id":null,"docs":" A 3d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Point tagged with a unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111291,"byte_end":111325,"line_start":719,"line_end":719,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111326,"byte_end":111336,"line_start":720,"line_end":720,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1079},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111372,"byte_end":111373,"line_start":722,"line_end":722,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point3D::x","value":"T","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1080},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111386,"byte_end":111387,"line_start":723,"line_end":723,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point3D::y","value":"T","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1081},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111400,"byte_end":111401,"line_start":724,"line_end":724,"column_start":9,"column_end":10},"name":"z","qualname":"::point::Point3D::z","value":"T","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1082},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111433,"byte_end":111438,"line_start":726,"line_end":726,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113443,"byte_end":113449,"line_start":817,"line_end":817,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point3D<T, U>>::origin","value":"pub fn origin() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113369,"byte_end":113417,"line_start":815,"line_end":815,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113422,"byte_end":113431,"line_start":816,"line_end":816,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113632,"byte_end":113636,"line_start":826,"line_end":826,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113561,"byte_end":113606,"line_start":824,"line_end":824,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113611,"byte_end":113620,"line_start":825,"line_end":825,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113792,"byte_end":113795,"line_start":835,"line_end":835,"column_start":18,"column_end":21},"name":"new","qualname":"<Point3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113714,"byte_end":113760,"line_start":833,"line_end":833,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113765,"byte_end":113774,"line_start":834,"line_end":834,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114031,"byte_end":114043,"line_start":846,"line_end":846,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113940,"byte_end":114005,"line_start":844,"line_end":844,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114010,"byte_end":114019,"line_start":845,"line_end":845,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114229,"byte_end":114234,"line_start":852,"line_end":852,"column_start":12,"column_end":17},"name":"splat","qualname":"<Point3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114146,"byte_end":114203,"line_start":850,"line_end":850,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114208,"byte_end":114217,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114486,"byte_end":114498,"line_start":866,"line_end":866,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point3D<T, U>>::from_untyped","value":"pub fn from_untyped(Point3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114424,"byte_end":114460,"line_start":864,"line_end":864,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114465,"byte_end":114474,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114741,"byte_end":114750,"line_start":876,"line_end":876,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point3D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114613,"byte_end":114647,"line_start":872,"line_end":872,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114652,"byte_end":114655,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin to this point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114660,"byte_end":114715,"line_start":874,"line_end":874,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114720,"byte_end":114729,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115005,"byte_end":115007,"line_start":887,"line_end":887,"column_start":12,"column_end":14},"name":"xy","qualname":"<Point3D<T, U>>::xy","value":"pub fn xy(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and y coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114918,"byte_end":114979,"line_start":885,"line_end":885,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114984,"byte_end":114993,"line_start":886,"line_end":886,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115162,"byte_end":115164,"line_start":893,"line_end":893,"column_start":12,"column_end":14},"name":"xz","qualname":"<Point3D<T, U>>::xz","value":"pub fn xz(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115075,"byte_end":115136,"line_start":891,"line_end":891,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115141,"byte_end":115150,"line_start":892,"line_end":892,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115319,"byte_end":115321,"line_start":899,"line_end":899,"column_start":12,"column_end":14},"name":"yz","qualname":"<Point3D<T, U>>::yz","value":"pub fn yz(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115232,"byte_end":115293,"line_start":897,"line_end":897,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115298,"byte_end":115307,"line_start":898,"line_end":898,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115696,"byte_end":115704,"line_start":916,"line_end":916,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115389,"byte_end":115428,"line_start":903,"line_end":903,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115433,"byte_end":115436,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115441,"byte_end":115454,"line_start":905,"line_end":905,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115459,"byte_end":115462,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115467,"byte_end":115478,"line_start":907,"line_end":907,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115483,"byte_end":115519,"line_start":908,"line_end":908,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115524,"byte_end":115538,"line_start":909,"line_end":909,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115543,"byte_end":115546,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115551,"byte_end":115600,"line_start":911,"line_end":911,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115605,"byte_end":115608,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8, 0]);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115613,"byte_end":115658,"line_start":913,"line_end":913,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115663,"byte_end":115670,"line_start":914,"line_end":914,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115675,"byte_end":115684,"line_start":915,"line_end":915,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115788,"byte_end":115799,"line_start":921,"line_end":921,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Point3D<T, U>>::to_array_4d","value":"pub fn to_array_4d(Self) -> [T; ] where T: One","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115767,"byte_end":115776,"line_start":920,"line_end":920,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116210,"byte_end":116218,"line_start":941,"line_end":941,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115904,"byte_end":115942,"line_start":928,"line_end":928,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115947,"byte_end":115950,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115955,"byte_end":115968,"line_start":930,"line_end":930,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115973,"byte_end":115976,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115981,"byte_end":115992,"line_start":932,"line_end":932,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":115997,"byte_end":116033,"line_start":933,"line_end":933,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116038,"byte_end":116052,"line_start":934,"line_end":934,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116057,"byte_end":116060,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116065,"byte_end":116114,"line_start":936,"line_end":936,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116119,"byte_end":116122,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8, 0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116127,"byte_end":116172,"line_start":938,"line_end":938,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116177,"byte_end":116184,"line_start":939,"line_end":939,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116189,"byte_end":116198,"line_start":940,"line_end":940,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116305,"byte_end":116316,"line_start":946,"line_end":946,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Point3D<T, U>>::to_tuple_4d","value":"pub fn to_tuple_4d(Self) -> (T, T, T, T) where T: One","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116284,"byte_end":116293,"line_start":945,"line_end":945,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116852,"byte_end":116862,"line_start":968,"line_end":968,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116427,"byte_end":116481,"line_start":953,"line_end":953,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116486,"byte_end":116489,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116494,"byte_end":116507,"line_start":955,"line_end":955,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116512,"byte_end":116515,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116520,"byte_end":116531,"line_start":957,"line_end":957,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116536,"byte_end":116572,"line_start":958,"line_end":958,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116577,"byte_end":116591,"line_start":959,"line_end":959,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116596,"byte_end":116599,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116604,"byte_end":116653,"line_start":961,"line_end":961,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116658,"byte_end":116661,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116666,"byte_end":116712,"line_start":963,"line_end":963,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116717,"byte_end":116763,"line_start":964,"line_end":964,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.z, point.to_untyped().z);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116768,"byte_end":116814,"line_start":965,"line_end":965,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116819,"byte_end":116826,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116831,"byte_end":116840,"line_start":967,"line_end":967,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117401,"byte_end":117410,"line_start":988,"line_end":988,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Point3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":116948,"byte_end":116996,"line_start":972,"line_end":972,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117001,"byte_end":117004,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117009,"byte_end":117022,"line_start":974,"line_end":974,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117027,"byte_end":117030,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117035,"byte_end":117046,"line_start":976,"line_end":976,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117051,"byte_end":117087,"line_start":977,"line_end":977,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117092,"byte_end":117106,"line_start":978,"line_end":978,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117111,"byte_end":117125,"line_start":979,"line_end":979,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117130,"byte_end":117133,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117138,"byte_end":117187,"line_start":981,"line_end":981,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117192,"byte_end":117195,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117200,"byte_end":117251,"line_start":983,"line_end":983,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117256,"byte_end":117307,"line_start":984,"line_end":984,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.z, point.cast_unit::<Cm>().z);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117312,"byte_end":117363,"line_start":985,"line_end":985,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117368,"byte_end":117375,"line_start":986,"line_end":986,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117380,"byte_end":117389,"line_start":987,"line_end":987,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117543,"byte_end":117548,"line_start":994,"line_end":994,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Point3D<T, U>>::to_2d","value":"pub fn to_2d(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d point.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117489,"byte_end":117517,"line_start":992,"line_end":992,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117522,"byte_end":117531,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117975,"byte_end":117980,"line_start":1010,"line_end":1010,"column_start":12,"column_end":17},"name":"round","qualname":"<Point3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117603,"byte_end":117658,"line_start":998,"line_end":998,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117663,"byte_end":117666,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117671,"byte_end":117746,"line_start":1000,"line_end":1000,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117751,"byte_end":117754,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117759,"byte_end":117770,"line_start":1002,"line_end":1002,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117775,"byte_end":117800,"line_start":1003,"line_end":1003,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117805,"byte_end":117819,"line_start":1004,"line_end":1004,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117824,"byte_end":117827,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).round(), point3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117832,"byte_end":117921,"line_start":1006,"line_end":1006,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117926,"byte_end":117933,"line_start":1007,"line_end":1007,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117938,"byte_end":117947,"line_start":1008,"line_end":1008,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":117952,"byte_end":117963,"line_start":1009,"line_end":1009,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118509,"byte_end":118513,"line_start":1029,"line_end":1029,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118103,"byte_end":118194,"line_start":1017,"line_end":1017,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118199,"byte_end":118202,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118207,"byte_end":118282,"line_start":1019,"line_end":1019,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118287,"byte_end":118290,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118295,"byte_end":118306,"line_start":1021,"line_end":1021,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118311,"byte_end":118336,"line_start":1022,"line_end":1022,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118341,"byte_end":118355,"line_start":1023,"line_end":1023,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118360,"byte_end":118363,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), point3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118368,"byte_end":118455,"line_start":1025,"line_end":1025,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118460,"byte_end":118467,"line_start":1026,"line_end":1026,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118472,"byte_end":118481,"line_start":1027,"line_end":1027,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118486,"byte_end":118497,"line_start":1028,"line_end":1028,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119038,"byte_end":119043,"line_start":1048,"line_end":1048,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118632,"byte_end":118720,"line_start":1036,"line_end":1036,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118725,"byte_end":118728,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118733,"byte_end":118808,"line_start":1038,"line_end":1038,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118813,"byte_end":118816,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118821,"byte_end":118832,"line_start":1040,"line_end":1040,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118837,"byte_end":118862,"line_start":1041,"line_end":1041,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118867,"byte_end":118881,"line_start":1042,"line_end":1042,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118886,"byte_end":118889,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).floor(), point3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118894,"byte_end":118984,"line_start":1044,"line_end":1044,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":118989,"byte_end":118996,"line_start":1045,"line_end":1045,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119001,"byte_end":119010,"line_start":1046,"line_end":1046,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119015,"byte_end":119026,"line_start":1047,"line_end":1047,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119849,"byte_end":119853,"line_start":1073,"line_end":1073,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119166,"byte_end":119228,"line_start":1055,"line_end":1055,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119233,"byte_end":119236,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119241,"byte_end":119254,"line_start":1057,"line_end":1057,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119259,"byte_end":119262,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119267,"byte_end":119278,"line_start":1059,"line_end":1059,"column_start":5,"column_end":16}},{"value":"/ use euclid::point3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119283,"byte_end":119306,"line_start":1060,"line_end":1060,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point3D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119311,"byte_end":119344,"line_start":1061,"line_end":1061,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119349,"byte_end":119352,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ let from: Point3D<_> = point3(0.0, 10.0, -1.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119357,"byte_end":119408,"line_start":1063,"line_end":1063,"column_start":5,"column_end":56}},{"value":"/ let to:  Point3D<_> = point3(8.0, -4.0,  0.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119413,"byte_end":119463,"line_start":1064,"line_end":1064,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119468,"byte_end":119471,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119476,"byte_end":119539,"line_start":1066,"line_end":1066,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119544,"byte_end":119607,"line_start":1067,"line_end":1067,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119612,"byte_end":119675,"line_start":1068,"line_end":1068,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119680,"byte_end":119743,"line_start":1069,"line_end":1069,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point3(16.0, -18.0,  1.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119748,"byte_end":119811,"line_start":1070,"line_end":1070,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119816,"byte_end":119823,"line_start":1071,"line_end":1071,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":119828,"byte_end":119837,"line_start":1072,"line_end":1072,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120232,"byte_end":120235,"line_start":1088,"line_end":1088,"column_start":12,"column_end":15},"name":"min","qualname":"<Point3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120211,"byte_end":120220,"line_start":1087,"line_end":1087,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120425,"byte_end":120428,"line_start":1097,"line_end":1097,"column_start":12,"column_end":15},"name":"max","qualname":"<Point3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120404,"byte_end":120413,"line_start":1096,"line_end":1096,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120791,"byte_end":120796,"line_start":1110,"line_end":1110,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120597,"byte_end":120667,"line_start":1105,"line_end":1105,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120672,"byte_end":120708,"line_start":1106,"line_end":1106,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120713,"byte_end":120716,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120721,"byte_end":120765,"line_start":1108,"line_end":1108,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120770,"byte_end":120779,"line_start":1109,"line_end":1109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121337,"byte_end":121341,"line_start":1125,"line_end":1125,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Point3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120957,"byte_end":121031,"line_start":1119,"line_end":1119,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121036,"byte_end":121039,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121044,"byte_end":121131,"line_start":1121,"line_end":1121,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121136,"byte_end":121224,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121229,"byte_end":121311,"line_start":1123,"line_end":1123,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121316,"byte_end":121325,"line_start":1124,"line_end":1124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121804,"byte_end":121812,"line_start":1134,"line_end":1134,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Point3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121429,"byte_end":121512,"line_start":1129,"line_end":1129,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121517,"byte_end":121520,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121525,"byte_end":121612,"line_start":1131,"line_end":1131,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121617,"byte_end":121705,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":121710,"byte_end":121792,"line_start":1133,"line_end":1133,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122209,"byte_end":122215,"line_start":1149,"line_end":1149,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Point3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122154,"byte_end":122183,"line_start":1147,"line_end":1147,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122188,"byte_end":122197,"line_start":1148,"line_end":1148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122329,"byte_end":122335,"line_start":1155,"line_end":1155,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Point3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122274,"byte_end":122303,"line_start":1153,"line_end":1153,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122308,"byte_end":122317,"line_start":1154,"line_end":1154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122688,"byte_end":122696,"line_start":1165,"line_end":1165,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Point3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122394,"byte_end":122453,"line_start":1159,"line_end":1159,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122458,"byte_end":122461,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122466,"byte_end":122542,"line_start":1161,"line_end":1161,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122547,"byte_end":122621,"line_start":1162,"line_end":1162,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122626,"byte_end":122662,"line_start":1163,"line_end":1163,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122667,"byte_end":122676,"line_start":1164,"line_end":1164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123049,"byte_end":123055,"line_start":1175,"line_end":1175,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Point3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122757,"byte_end":122814,"line_start":1169,"line_end":1169,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122819,"byte_end":122822,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122827,"byte_end":122903,"line_start":1171,"line_end":1171,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122908,"byte_end":122982,"line_start":1172,"line_end":1172,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":122987,"byte_end":123023,"line_start":1173,"line_end":1173,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123028,"byte_end":123037,"line_start":1174,"line_end":1174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123406,"byte_end":123412,"line_start":1185,"line_end":1185,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Point3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` point, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123114,"byte_end":123171,"line_start":1179,"line_end":1179,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123176,"byte_end":123179,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123184,"byte_end":123260,"line_start":1181,"line_end":1181,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123265,"byte_end":123339,"line_start":1182,"line_end":1182,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123344,"byte_end":123380,"line_start":1183,"line_end":1183,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123385,"byte_end":123394,"line_start":1184,"line_end":1184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123763,"byte_end":123769,"line_start":1195,"line_end":1195,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Point3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` point, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123471,"byte_end":123528,"line_start":1189,"line_end":1189,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123533,"byte_end":123536,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123541,"byte_end":123617,"line_start":1191,"line_end":1191,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123622,"byte_end":123696,"line_start":1192,"line_end":1192,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123701,"byte_end":123737,"line_start":1193,"line_end":1193,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123742,"byte_end":123751,"line_start":1194,"line_end":1194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123905,"byte_end":123913,"line_start":1202,"line_end":1202,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point3D<T, U>>::add_size","value":"pub fn add_size(Self, Size3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123884,"byte_end":123893,"line_start":1201,"line_end":1201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124169,"byte_end":124180,"line_start":1213,"line_end":1213,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point3D<T, U>>::distance_to","value":"pub fn distance_to(Self, Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124148,"byte_end":124157,"line_start":1212,"line_end":1212,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1292},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":130173,"byte_end":130179,"line_start":1471,"line_end":1471,"column_start":14,"column_end":20},"name":"point2","qualname":"::point::point2","value":"pub const fn point2<T, U>(T, T) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point2D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point2D::new(x, y)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":130110,"byte_end":130149,"line_start":1469,"line_end":1469,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":130150,"byte_end":130159,"line_start":1470,"line_end":1470,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1295},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":130353,"byte_end":130359,"line_start":1481,"line_end":1481,"column_start":14,"column_end":20},"name":"point3","qualname":"::point::point3","value":"pub const fn point3<T, U>(T, T, T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point3D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point3D::new(x, y)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":130290,"byte_end":130329,"line_start":1479,"line_end":1479,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":130330,"byte_end":130339,"line_start":1480,"line_end":1480,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1322},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145247,"byte_end":145251,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"Rect","qualname":"::rect::Rect","value":"Rect { origin, size }","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326}],"decl_id":null,"docs":" A 2d Rectangle optionally tagged with a unit.","sig":null,"attributes":[{"value":"/ A 2d Rectangle optionally tagged with a unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144538,"byte_end":144587,"line_start":29,"line_end":29,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144588,"byte_end":144591,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144592,"byte_end":144612,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144613,"byte_end":144616,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `Rect` is represented by an origin point and a size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144617,"byte_end":144673,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144674,"byte_end":144677,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ See [`Box2D`] for a rectangle represented by two endpoints.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144678,"byte_end":144741,"line_start":35,"line_end":35,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144742,"byte_end":144745,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Empty rectangle","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144746,"byte_end":144767,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144768,"byte_end":144771,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ A rectangle is considered empty (see [`is_empty`]) if any of the following is true:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144772,"byte_end":144859,"line_start":39,"line_end":39,"column_start":1,"column_end":88}},{"value":"/ - it's area is empty,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144860,"byte_end":144885,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ - it's area is negative (`size.x < 0` or `size.y < 0`),","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144886,"byte_end":144945,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"/ - it contains NaNs.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144946,"byte_end":144969,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144970,"byte_end":144973,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`is_empty`]: #method.is_empty","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":144974,"byte_end":145008,"line_start":44,"line_end":44,"column_start":1,"column_end":35}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145009,"byte_end":145041,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145042,"byte_end":145052,"line_start":46,"line_end":46,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1325},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145268,"byte_end":145274,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"origin","qualname":"::rect::Rect::origin","value":"point::Point2D<T, U>","parent":{"krate":0,"index":1322},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1326},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145299,"byte_end":145303,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"size","qualname":"::rect::Rect::size","value":"size::Size2D<T, U>","parent":{"krate":0,"index":1322},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146704,"byte_end":146707,"line_start":114,"line_end":114,"column_start":18,"column_end":21},"name":"new","qualname":"<Rect<T, U>>::new","value":"pub const fn new(Point2D<T, U>, Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146656,"byte_end":146672,"line_start":112,"line_end":112,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146677,"byte_end":146686,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146916,"byte_end":146920,"line_start":125,"line_end":125,"column_start":12,"column_end":16},"name":"zero","qualname":"<Rect<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146847,"byte_end":146890,"line_start":123,"line_end":123,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146895,"byte_end":146904,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147076,"byte_end":147085,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Rect<T, U>>::from_size","value":"pub fn from_size(Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rect of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a rect of the given size, at offset zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146997,"byte_end":147050,"line_start":129,"line_end":129,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147055,"byte_end":147064,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147294,"byte_end":147297,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"min","qualname":"<Rect<T, U>>::min","value":"pub fn min(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147273,"byte_end":147282,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147376,"byte_end":147379,"line_start":149,"line_end":149,"column_start":12,"column_end":15},"name":"max","qualname":"<Rect<T, U>>::max","value":"pub fn max(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147355,"byte_end":147364,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147470,"byte_end":147475,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"max_x","qualname":"<Rect<T, U>>::max_x","value":"pub fn max_x(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147449,"byte_end":147458,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147562,"byte_end":147567,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"name":"min_x","qualname":"<Rect<T, U>>::min_x","value":"pub fn min_x(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147541,"byte_end":147550,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147636,"byte_end":147641,"line_start":164,"line_end":164,"column_start":12,"column_end":17},"name":"max_y","qualname":"<Rect<T, U>>::max_y","value":"pub fn max_y(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147615,"byte_end":147624,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147729,"byte_end":147734,"line_start":169,"line_end":169,"column_start":12,"column_end":17},"name":"min_y","qualname":"<Rect<T, U>>::min_y","value":"pub fn min_y(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147708,"byte_end":147717,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147803,"byte_end":147808,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147782,"byte_end":147791,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147879,"byte_end":147885,"line_start":179,"line_end":179,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147858,"byte_end":147867,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147957,"byte_end":147964,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Rect<T, U>>::x_range","value":"pub fn x_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147936,"byte_end":147945,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148053,"byte_end":148060,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Rect<T, U>>::y_range","value":"pub fn y_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148032,"byte_end":148041,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148225,"byte_end":148234,"line_start":196,"line_end":196,"column_start":12,"column_end":21},"name":"translate","qualname":"<Rect<T, U>>::translate","value":"pub fn translate(&Self, Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same rectangle, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same rectangle, translated by a vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148128,"byte_end":148183,"line_start":193,"line_end":193,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148188,"byte_end":148197,"line_start":194,"line_end":194,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148202,"byte_end":148213,"line_start":195,"line_end":195,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148351,"byte_end":148359,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"to_box2d","qualname":"<Rect<T, U>>::to_box2d","value":"pub fn to_box2d(&Self) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148330,"byte_end":148339,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148783,"byte_end":148791,"line_start":217,"line_end":217,"column_start":12,"column_end":20},"name":"contains","qualname":"<Rect<T, U>>::contains","value":"pub fn contains(&Self, Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the point. Points are considered\n in the rectangle if they are on the left or top edge, but outside if they\n are on the right or bottom edge.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the point. Points are considered","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148558,"byte_end":148634,"line_start":213,"line_end":213,"column_start":5,"column_end":81}},{"value":"/ in the rectangle if they are on the left or top edge, but outside if they","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148639,"byte_end":148716,"line_start":214,"line_end":214,"column_start":5,"column_end":82}},{"value":"/ are on the right or bottom edge.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148721,"byte_end":148757,"line_start":215,"line_end":215,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148762,"byte_end":148771,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148895,"byte_end":148905,"line_start":222,"line_end":222,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Rect<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148874,"byte_end":148883,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149123,"byte_end":149135,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Rect<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149102,"byte_end":149111,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149486,"byte_end":149493,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Rect<T, U>>::inflate","value":"pub fn inflate(&Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149449,"byte_end":149458,"line_start":247,"line_end":247,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149463,"byte_end":149474,"line_start":248,"line_end":248,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150091,"byte_end":150104,"line_start":268,"line_end":268,"column_start":12,"column_end":25},"name":"contains_rect","qualname":"<Rect<T, U>>::contains_rect","value":"pub fn contains_rect(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the interior of rect. Always\n returns true if rect is empty, and always returns false if rect is\n nonempty but this rectangle is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the interior of rect. Always","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149872,"byte_end":149944,"line_start":264,"line_end":264,"column_start":5,"column_end":77}},{"value":"/ returns true if rect is empty, and always returns false if rect is","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149949,"byte_end":150019,"line_start":265,"line_end":265,"column_start":5,"column_end":75}},{"value":"/ nonempty but this rectangle is empty.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150024,"byte_end":150065,"line_start":266,"line_end":266,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150070,"byte_end":150079,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150739,"byte_end":150749,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"inner_rect","qualname":"<Rect<T, U>>::inner_rect","value":"pub fn inner_rect(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner rectangle.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150467,"byte_end":150525,"line_start":281,"line_end":281,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150530,"byte_end":150533,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal and vertical","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150538,"byte_end":150612,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ offsets must not be larger than the original side length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150617,"byte_end":150678,"line_start":284,"line_end":284,"column_start":5,"column_end":66}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150683,"byte_end":150727,"line_start":285,"line_end":285,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151499,"byte_end":151509,"line_start":308,"line_end":308,"column_start":12,"column_end":22},"name":"outer_rect","qualname":"<Rect<T, U>>::outer_rect","value":"pub fn outer_rect(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an outer rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an outer rectangle.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151298,"byte_end":151356,"line_start":304,"line_end":304,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151361,"byte_end":151364,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded rectangle is returned.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151369,"byte_end":151438,"line_start":306,"line_end":306,"column_start":5,"column_end":74}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151443,"byte_end":151487,"line_start":307,"line_end":307,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152479,"byte_end":152490,"line_start":332,"line_end":332,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Rect<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest rectangle defined by the top/bottom/left/right-most\n points provided as parameter.","sig":null,"attributes":[{"value":"/ Returns the smallest rectangle defined by the top/bottom/left/right-most","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151919,"byte_end":151995,"line_start":323,"line_end":323,"column_start":5,"column_end":81}},{"value":"/ points provided as parameter.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152000,"byte_end":152033,"line_start":324,"line_end":324,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152038,"byte_end":152041,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Note: This function has a behavior that can be surprising because","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152046,"byte_end":152115,"line_start":326,"line_end":326,"column_start":5,"column_end":74}},{"value":"/ the right-most and bottom-most points are exactly on the edge","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152120,"byte_end":152185,"line_start":327,"line_end":327,"column_start":5,"column_end":70}},{"value":"/ of the rectangle while the `contains` function is has exclusive","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152190,"byte_end":152257,"line_start":328,"line_end":328,"column_start":5,"column_end":72}},{"value":"/ semantic on these edges. This means that the right-most and bottom-most","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152262,"byte_end":152337,"line_start":329,"line_end":329,"column_start":5,"column_end":80}},{"value":"/ points provided to `from_points` will count as not contained by the rect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152342,"byte_end":152419,"line_start":330,"line_end":330,"column_start":5,"column_end":82}},{"value":"/ This behavior may change in the future.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152424,"byte_end":152467,"line_start":331,"line_end":331,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152851,"byte_end":152855,"line_start":347,"line_end":347,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rect<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this rectangle and another rectangle.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this rectangle and another rectangle.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152755,"byte_end":152825,"line_start":345,"line_end":345,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152830,"byte_end":152839,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153116,"byte_end":153122,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"center","qualname":"<Rect<T, U>>::center","value":"pub fn center(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153377,"byte_end":153382,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"union","qualname":"<Rect<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153356,"byte_end":153365,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153684,"byte_end":153689,"line_start":384,"line_end":384,"column_start":12,"column_end":17},"name":"scale","qualname":"<Rect<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S) -> Self where T: Copy + Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153663,"byte_end":153672,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154026,"byte_end":154030,"line_start":397,"line_end":397,"column_start":12,"column_end":16},"name":"area","qualname":"<Rect<T, U>>::area","value":"pub fn area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154005,"byte_end":154014,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154154,"byte_end":154162,"line_start":404,"line_end":404,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Rect<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154133,"byte_end":154142,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154293,"byte_end":154305,"line_start":411,"line_end":411,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Rect<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154272,"byte_end":154281,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156233,"byte_end":156243,"line_start":489,"line_end":489,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rect<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156153,"byte_end":156207,"line_start":487,"line_end":487,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156212,"byte_end":156221,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156418,"byte_end":156430,"line_start":495,"line_end":495,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rect<T, U>>::from_untyped","value":"pub fn from_untyped(&Rect<T, UnknownUnit>) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156356,"byte_end":156392,"line_start":493,"line_end":493,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156397,"byte_end":156406,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156643,"byte_end":156652,"line_start":504,"line_end":504,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rect<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Rect<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156600,"byte_end":156617,"line_start":502,"line_end":502,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156622,"byte_end":156631,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157178,"byte_end":157182,"line_start":516,"line_end":516,"column_start":12,"column_end":16},"name":"cast","qualname":"<Rect<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Rect<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156798,"byte_end":156872,"line_start":510,"line_end":510,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156877,"byte_end":156880,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156885,"byte_end":156972,"line_start":512,"line_end":512,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156977,"byte_end":157065,"line_start":513,"line_end":513,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157070,"byte_end":157152,"line_start":514,"line_end":514,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157157,"byte_end":157166,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157666,"byte_end":157674,"line_start":525,"line_end":525,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Rect<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Rect<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157291,"byte_end":157374,"line_start":520,"line_end":520,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157379,"byte_end":157382,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157387,"byte_end":157474,"line_start":522,"line_end":522,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157479,"byte_end":157567,"line_start":523,"line_end":523,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157572,"byte_end":157654,"line_start":524,"line_end":524,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158010,"byte_end":158016,"line_start":536,"line_end":536,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Rect<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Rect<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` rectangle.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157951,"byte_end":157984,"line_start":534,"line_end":534,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":157989,"byte_end":157998,"line_start":535,"line_end":535,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158132,"byte_end":158138,"line_start":542,"line_end":542,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Rect<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Rect<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` rectangle.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158073,"byte_end":158106,"line_start":540,"line_end":540,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158111,"byte_end":158120,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158505,"byte_end":158513,"line_start":552,"line_end":552,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Rect<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Rect<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` rectangle, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158195,"byte_end":158258,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158263,"byte_end":158266,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158271,"byte_end":158351,"line_start":548,"line_end":548,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158356,"byte_end":158431,"line_start":549,"line_end":549,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158436,"byte_end":158479,"line_start":550,"line_end":550,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158484,"byte_end":158493,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158880,"byte_end":158886,"line_start":562,"line_end":562,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Rect<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Rect<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` rectangle, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158572,"byte_end":158633,"line_start":556,"line_end":556,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158638,"byte_end":158641,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158646,"byte_end":158726,"line_start":558,"line_end":558,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158731,"byte_end":158806,"line_start":559,"line_end":559,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158811,"byte_end":158854,"line_start":560,"line_end":560,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158859,"byte_end":158868,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159251,"byte_end":159257,"line_start":572,"line_end":572,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Rect<T, U>>::to_u64","value":"pub fn to_u64(&Self) -> Rect<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` rectangle, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":158943,"byte_end":159004,"line_start":566,"line_end":566,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159009,"byte_end":159012,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159017,"byte_end":159097,"line_start":568,"line_end":568,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159102,"byte_end":159177,"line_start":569,"line_end":569,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159182,"byte_end":159225,"line_start":570,"line_end":570,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159230,"byte_end":159239,"line_start":571,"line_end":571,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159622,"byte_end":159628,"line_start":582,"line_end":582,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Rect<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Rect<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` rectangle, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159314,"byte_end":159375,"line_start":576,"line_end":576,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159380,"byte_end":159383,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159388,"byte_end":159468,"line_start":578,"line_end":578,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159473,"byte_end":159548,"line_start":579,"line_end":579,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159553,"byte_end":159596,"line_start":580,"line_end":580,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159601,"byte_end":159610,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159993,"byte_end":159999,"line_start":592,"line_end":592,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Rect<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Rect<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` rectangle, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159685,"byte_end":159746,"line_start":586,"line_end":586,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159751,"byte_end":159754,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159759,"byte_end":159839,"line_start":588,"line_end":588,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159844,"byte_end":159919,"line_start":589,"line_end":589,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159924,"byte_end":159967,"line_start":590,"line_end":590,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":159972,"byte_end":159981,"line_start":591,"line_end":591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160994,"byte_end":160999,"line_start":615,"line_end":615,"column_start":12,"column_end":17},"name":"round","qualname":"<Rect<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the returned rectangle has the same set of pixel centers as the original\n one.\n Edges at offset 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160146,"byte_end":160221,"line_start":598,"line_end":598,"column_start":5,"column_end":80}},{"value":"/ the returned rectangle has the same set of pixel centers as the original","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160226,"byte_end":160302,"line_start":599,"line_end":599,"column_start":5,"column_end":81}},{"value":"/ one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160307,"byte_end":160315,"line_start":600,"line_end":600,"column_start":5,"column_end":13}},{"value":"/ Edges at offset 0.5 round up.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160320,"byte_end":160353,"line_start":601,"line_end":601,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160358,"byte_end":160420,"line_start":602,"line_end":602,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160425,"byte_end":160497,"line_start":603,"line_end":603,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160502,"byte_end":160534,"line_start":604,"line_end":604,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160539,"byte_end":160622,"line_start":605,"line_end":605,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160627,"byte_end":160674,"line_start":606,"line_end":606,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160679,"byte_end":160682,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160687,"byte_end":160704,"line_start":608,"line_end":608,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160709,"byte_end":160794,"line_start":609,"line_end":609,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160799,"byte_end":160885,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160890,"byte_end":160921,"line_start":611,"line_end":611,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160926,"byte_end":160929,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160934,"byte_end":160966,"line_start":613,"line_end":613,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160971,"byte_end":160982,"line_start":614,"line_end":614,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161530,"byte_end":161538,"line_start":629,"line_end":629,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Rect<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle contains the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161070,"byte_end":161145,"line_start":619,"line_end":619,"column_start":5,"column_end":80}},{"value":"/ the original rectangle contains the resulting rectangle.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161150,"byte_end":161210,"line_start":620,"line_end":620,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161215,"byte_end":161218,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161223,"byte_end":161240,"line_start":622,"line_end":622,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161245,"byte_end":161330,"line_start":623,"line_end":623,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161335,"byte_end":161421,"line_start":624,"line_end":624,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161426,"byte_end":161457,"line_start":625,"line_end":625,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161462,"byte_end":161465,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161470,"byte_end":161502,"line_start":627,"line_end":627,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161507,"byte_end":161518,"line_start":628,"line_end":628,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":162079,"byte_end":162088,"line_start":643,"line_end":643,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Rect<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle is contained in the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161612,"byte_end":161687,"line_start":633,"line_end":633,"column_start":5,"column_end":80}},{"value":"/ the original rectangle is contained in the resulting rectangle.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161692,"byte_end":161759,"line_start":634,"line_end":634,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161764,"byte_end":161767,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161772,"byte_end":161789,"line_start":636,"line_end":636,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161794,"byte_end":161879,"line_start":637,"line_end":637,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161884,"byte_end":161970,"line_start":638,"line_end":638,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":161975,"byte_end":162006,"line_start":639,"line_end":639,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":162011,"byte_end":162014,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":162019,"byte_end":162051,"line_start":641,"line_end":641,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":162056,"byte_end":162067,"line_start":642,"line_end":642,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1506},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":162391,"byte_end":162395,"line_start":658,"line_end":658,"column_start":14,"column_end":18},"name":"rect","qualname":"::rect::rect","value":"pub const fn rect<T, U>(T, T, T, T) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":162308,"byte_end":162377,"line_start":657,"line_end":657,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":3769},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172587,"byte_end":172603,"line_start":23,"line_end":23,"column_start":12,"column_end":28},"name":"RigidTransform3D","qualname":"::rigid::RigidTransform3D","value":"RigidTransform3D { rotation, translation }","parent":null,"children":[{"krate":0,"index":3773},{"krate":0,"index":3774}],"decl_id":null,"docs":" A rigid transformation. All lengths are preserved under such a transformation.","sig":null,"attributes":[{"value":"/ A rigid transformation. All lengths are preserved under such a transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172079,"byte_end":172161,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172162,"byte_end":172165,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172166,"byte_end":172169,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Internally, this is a rotation and a translation, with the rotation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172170,"byte_end":172241,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ applied first (i.e. `Rotation * Translation`, in row-vector notation)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172242,"byte_end":172315,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172316,"byte_end":172319,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This can be more efficient to use over full matrices, especially if you","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172320,"byte_end":172395,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ have to deal with the decomposed quantities often.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172396,"byte_end":172450,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172565,"byte_end":172575,"line_start":22,"line_end":22,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3773},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172627,"byte_end":172635,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"name":"rotation","qualname":"::rigid::RigidTransform3D::rotation","value":"rotation::Rotation3D<T, Src, Dst>","parent":{"krate":0,"index":3769},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3774},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172670,"byte_end":172681,"line_start":25,"line_end":25,"column_start":9,"column_end":20},"name":"translation","qualname":"::rigid::RigidTransform3D::translation","value":"vector::Vector3D<T, Dst>","parent":{"krate":0,"index":3769},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172866,"byte_end":172869,"line_start":31,"line_end":31,"column_start":18,"column_end":21},"name":"new","qualname":"<RigidTransform3D<T, Src, Dst>>::new","value":"pub const fn new(Rotation3D<T, Src, Dst>, Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `rotation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `rotation` applies first","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172758,"byte_end":172834,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172839,"byte_end":172848,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173094,"byte_end":173103,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<RigidTransform3D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> RigidTransform3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173446,"byte_end":173454,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"identity","qualname":"<RigidTransform3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an identity transform\n","sig":null,"attributes":[{"value":"/ Construct an identity transform","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173385,"byte_end":173420,"line_start":49,"line_end":49,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173425,"byte_end":173434,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173697,"byte_end":173714,"line_start":60,"line_end":60,"column_start":12,"column_end":29},"name":"new_from_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::new_from_reversed","value":"pub fn new_from_reversed(Vector3D<T, Src>, Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `translation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `translation` applies first","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173592,"byte_end":173671,"line_start":58,"line_end":58,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173676,"byte_end":173685,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174272,"byte_end":174285,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"from_rotation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_rotation","value":"pub fn from_rotation(Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174251,"byte_end":174260,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174453,"byte_end":174469,"line_start":89,"line_end":89,"column_start":12,"column_end":28},"name":"from_translation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_translation","value":"pub fn from_translation(Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174432,"byte_end":174441,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174790,"byte_end":174808,"line_start":100,"line_end":100,"column_start":12,"column_end":30},"name":"decompose_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::decompose_reversed","value":"pub fn decompose_reversed(&Self)\n-> (Vector3D<T, Src>, Rotation3D<T, Src, Dst>)","parent":null,"children":[],"decl_id":null,"docs":" Decompose this into a translation and an rotation to be applied in the opposite order","sig":null,"attributes":[{"value":"/ Decompose this into a translation and an rotation to be applied in the opposite order","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174618,"byte_end":174707,"line_start":96,"line_end":96,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174712,"byte_end":174715,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ i.e., the translation is applied _first_","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174720,"byte_end":174764,"line_start":98,"line_end":98,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":174769,"byte_end":174778,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":175420,"byte_end":175424,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"then","qualname":"<RigidTransform3D<T, Src, Dst>>::then","value":"pub fn then<Dst2>(&Self, &RigidTransform3D<T, Dst, Dst2>)\n-> RigidTransform3D<T, Src, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two transforms such that\n other's transformation applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two transforms such that","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":175190,"byte_end":175252,"line_start":112,"line_end":112,"column_start":5,"column_end":67}},{"value":"/ other's transformation applies after self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":175257,"byte_end":175320,"line_start":113,"line_end":113,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":175325,"byte_end":175328,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ i.e., this produces `self * other` in row-vector notation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":175333,"byte_end":175394,"line_start":115,"line_end":115,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":175399,"byte_end":175408,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":176314,"byte_end":176321,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"name":"inverse","qualname":"<RigidTransform3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> RigidTransform3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Inverts the transformation\n","sig":null,"attributes":[{"value":"/ Inverts the transformation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":176258,"byte_end":176288,"line_start":142,"line_end":142,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":176293,"byte_end":176302,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":176872,"byte_end":176884,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<RigidTransform3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177120,"byte_end":177130,"line_start":169,"line_end":169,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177040,"byte_end":177094,"line_start":167,"line_end":167,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177099,"byte_end":177108,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177405,"byte_end":177417,"line_start":178,"line_end":178,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&RigidTransform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177343,"byte_end":177379,"line_start":176,"line_end":176,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177384,"byte_end":177393,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1587},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181684,"byte_end":181694,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"Rotation2D","qualname":"::rotation::Rotation2D","value":"Rotation2D { angle, _unit }","parent":null,"children":[{"krate":0,"index":1591},{"krate":0,"index":1592}],"decl_id":null,"docs":" A transform that can represent rotations in 2d, represented as an angle in radians.\n","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 2d, represented as an angle in radians.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181355,"byte_end":181442,"line_start":23,"line_end":23,"column_start":1,"column_end":88}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181443,"byte_end":181453,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1591},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181743,"byte_end":181748,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"angle","qualname":"::rotation::Rotation2D::angle","value":"T","parent":{"krate":0,"index":1587},"children":[],"decl_id":null,"docs":" Angle in radians\n","sig":null,"attributes":[{"value":"/ Angle in radians","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181714,"byte_end":181734,"line_start":34,"line_end":34,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1592},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181780,"byte_end":181785,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":1587},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182595,"byte_end":182598,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Rotation2D<T, Src, Dst>>::new","value":"pub fn new(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182521,"byte_end":182569,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182574,"byte_end":182583,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182794,"byte_end":182801,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"radians","qualname":"<Rotation2D<T, Src, Dst>>::radians","value":"pub fn radians(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182734,"byte_end":182782,"line_start":81,"line_end":81,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182934,"byte_end":182942,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182874,"byte_end":182908,"line_start":86,"line_end":86,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182913,"byte_end":182922,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183525,"byte_end":183534,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation2D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> Rotation2D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183082,"byte_end":183130,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183135,"byte_end":183138,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183143,"byte_end":183156,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183161,"byte_end":183164,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183169,"byte_end":183180,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183185,"byte_end":183214,"line_start":102,"line_end":102,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183219,"byte_end":183236,"line_start":103,"line_end":103,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183241,"byte_end":183258,"line_start":104,"line_end":104,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183263,"byte_end":183266,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183271,"byte_end":183289,"line_start":106,"line_end":106,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183294,"byte_end":183312,"line_start":107,"line_end":107,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183317,"byte_end":183320,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183325,"byte_end":183397,"line_start":109,"line_end":109,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183402,"byte_end":183405,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.cast_unit::<Local2, World2>().angle);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183410,"byte_end":183487,"line_start":111,"line_end":111,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183492,"byte_end":183499,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183504,"byte_end":183513,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1631},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184068,"byte_end":184078,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183690,"byte_end":183744,"line_start":121,"line_end":121,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183749,"byte_end":183752,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183757,"byte_end":183770,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183775,"byte_end":183778,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183783,"byte_end":183794,"line_start":125,"line_end":125,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183799,"byte_end":183828,"line_start":126,"line_end":126,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183833,"byte_end":183850,"line_start":127,"line_end":127,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183855,"byte_end":183872,"line_start":128,"line_end":128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183877,"byte_end":183880,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183885,"byte_end":183957,"line_start":130,"line_end":130,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183962,"byte_end":183965,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.to_untyped().angle);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183970,"byte_end":184030,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184035,"byte_end":184042,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184047,"byte_end":184056,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184590,"byte_end":184602,"line_start":154,"line_end":154,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Rotation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184167,"byte_end":184203,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184208,"byte_end":184211,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184216,"byte_end":184229,"line_start":141,"line_end":141,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184234,"byte_end":184237,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184242,"byte_end":184253,"line_start":143,"line_end":143,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184258,"byte_end":184287,"line_start":144,"line_end":144,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184292,"byte_end":184320,"line_start":145,"line_end":145,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184325,"byte_end":184342,"line_start":146,"line_end":146,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184347,"byte_end":184364,"line_start":147,"line_end":147,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184369,"byte_end":184372,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation2D<_, UnknownUnit, UnknownUnit> = Rotation2D::radians(42);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184377,"byte_end":184456,"line_start":149,"line_end":149,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184461,"byte_end":184464,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.angle, Rotation2D::<_, Local, World>::from_untyped(&rot).angle);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184469,"byte_end":184552,"line_start":151,"line_end":151,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184557,"byte_end":184564,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184569,"byte_end":184578,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1637},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184822,"byte_end":184831,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"get_angle","qualname":"<Rotation2D<T, Src, Dst>>::get_angle","value":"pub fn get_angle(&Self) -> Angle<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns self.angle as a strongly typed `Angle<T>`.\n","sig":null,"attributes":[{"value":"/ Returns self.angle as a strongly typed `Angle<T>`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184756,"byte_end":184810,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185046,"byte_end":185051,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Rotation2D<T, Src, Dst>>::to_3d","value":"pub fn to_3d(&Self) -> Rotation3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3d rotation (around the z axis) from this 2d rotation.\n","sig":null,"attributes":[{"value":"/ Creates a 3d rotation (around the z axis) from this 2d rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184952,"byte_end":185020,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185025,"byte_end":185034,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1643},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185213,"byte_end":185220,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Rotation2D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185146,"byte_end":185187,"line_start":176,"line_end":176,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185192,"byte_end":185201,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1644},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185416,"byte_end":185420,"line_start":184,"line_end":184,"column_start":12,"column_end":16},"name":"then","qualname":"<Rotation2D<T, Src, Dst>>::then","value":"pub fn then<NewSrc>(&Self, &Rotation2D<T, NewSrc, Src>)\n-> Rotation2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing the other rotation followed by this rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing the other rotation followed by this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185309,"byte_end":185390,"line_start":182,"line_end":182,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185395,"byte_end":185404,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1646},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185777,"byte_end":185792,"line_start":195,"line_end":195,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Rotation2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185592,"byte_end":185652,"line_start":191,"line_end":191,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185657,"byte_end":185660,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185665,"byte_end":185751,"line_start":193,"line_end":193,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185756,"byte_end":185765,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1647},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186172,"byte_end":186188,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Rotation2D<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":185986,"byte_end":186047,"line_start":200,"line_end":200,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186052,"byte_end":186055,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186060,"byte_end":186146,"line_start":202,"line_end":202,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186151,"byte_end":186160,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186529,"byte_end":186541,"line_start":215,"line_end":215,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation2D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186448,"byte_end":186503,"line_start":213,"line_end":213,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186508,"byte_end":186517,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1653},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187387,"byte_end":187397,"line_start":238,"line_end":238,"column_start":12,"column_end":22},"name":"Rotation3D","qualname":"::rotation::Rotation3D","value":"Rotation3D { i, j, k, r, _unit }","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661}],"decl_id":null,"docs":" A transform that can represent rotations in 3d, represented as a quaternion.","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 3d, represented as a quaternion.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186636,"byte_end":186716,"line_start":220,"line_end":220,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186717,"byte_end":186720,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Most methods expect the quaternion to be normalized.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186721,"byte_end":186777,"line_start":222,"line_end":222,"column_start":1,"column_end":57}},{"value":"/ When in doubt, use `unit_quaternion` instead of `quaternion` to create","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186778,"byte_end":186852,"line_start":223,"line_end":223,"column_start":1,"column_end":75}},{"value":"/ a rotation as the former will ensure that its result is normalized.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186853,"byte_end":186924,"line_start":224,"line_end":224,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186925,"byte_end":186928,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Some people use the `x, y, z, w` (or `w, x, y, z`) notations. The equivalence is","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186929,"byte_end":187013,"line_start":226,"line_end":226,"column_start":1,"column_end":85}},{"value":"/ as follows: `x -> i`, `y -> j`, `z -> k`, `w -> r`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187014,"byte_end":187069,"line_start":227,"line_end":227,"column_start":1,"column_end":56}},{"value":"/ The memory layout of this type corresponds to the `x, y, z, w` notation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187070,"byte_end":187145,"line_start":228,"line_end":228,"column_start":1,"column_end":76}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187146,"byte_end":187156,"line_start":229,"line_end":229,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1657},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187479,"byte_end":187480,"line_start":240,"line_end":240,"column_start":9,"column_end":10},"name":"i","qualname":"::rotation::Rotation3D::i","value":"T","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `i`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `i`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187417,"byte_end":187470,"line_start":239,"line_end":239,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1658},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187551,"byte_end":187552,"line_start":242,"line_end":242,"column_start":9,"column_end":10},"name":"j","qualname":"::rotation::Rotation3D::j","value":"T","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `j`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `j`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187489,"byte_end":187542,"line_start":241,"line_end":241,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1659},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187623,"byte_end":187624,"line_start":244,"line_end":244,"column_start":9,"column_end":10},"name":"k","qualname":"::rotation::Rotation3D::k","value":"T","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `k`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `k`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187561,"byte_end":187614,"line_start":243,"line_end":243,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1660},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187660,"byte_end":187661,"line_start":246,"line_end":246,"column_start":9,"column_end":10},"name":"r","qualname":"::rotation::Rotation3D::r","value":"T","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":" The real part.\n","sig":null,"attributes":[{"value":"/ The real part.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187633,"byte_end":187651,"line_start":245,"line_end":245,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1661},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187693,"byte_end":187698,"line_start":248,"line_end":248,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189092,"byte_end":189102,"line_start":299,"line_end":299,"column_start":12,"column_end":22},"name":"quaternion","qualname":"<Rotation3D<T, Src, Dst>>::quaternion","value":"pub fn quaternion(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188642,"byte_end":188705,"line_start":289,"line_end":289,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188710,"byte_end":188713,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188718,"byte_end":188799,"line_start":291,"line_end":291,"column_start":5,"column_end":86}},{"value":"/ where `a`, `b` and `c` describe the vector part and the last parameter `r` is","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188804,"byte_end":188885,"line_start":292,"line_end":292,"column_start":5,"column_end":86}},{"value":"/ the real part.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188890,"byte_end":188908,"line_start":293,"line_end":293,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188913,"byte_end":188916,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ The resulting quaternion is not necessarily normalized. See [`unit_quaternion`].","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188921,"byte_end":189005,"line_start":295,"line_end":295,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189010,"byte_end":189013,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ [`unit_quaternion`]: #method.unit_quaternion","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189018,"byte_end":189066,"line_start":297,"line_end":297,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189071,"byte_end":189080,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189340,"byte_end":189348,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189280,"byte_end":189314,"line_start":309,"line_end":309,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189319,"byte_end":189328,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189625,"byte_end":189636,"line_start":325,"line_end":325,"column_start":12,"column_end":23},"name":"vector_part","qualname":"<Rotation3D<T, Src, Dst>>::vector_part","value":"pub fn vector_part(&Self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector part (i, j, k) of this quaternion.\n","sig":null,"attributes":[{"value":"/ Returns the vector part (i, j, k) of this quaternion.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189542,"byte_end":189599,"line_start":323,"line_end":323,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189604,"byte_end":189613,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190390,"byte_end":190399,"line_start":349,"line_end":349,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation3D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> Rotation3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189722,"byte_end":189770,"line_start":329,"line_end":329,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189775,"byte_end":189778,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189783,"byte_end":189796,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189801,"byte_end":189804,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189809,"byte_end":189820,"line_start":333,"line_end":333,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189825,"byte_end":189854,"line_start":334,"line_end":334,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189859,"byte_end":189876,"line_start":335,"line_end":335,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189881,"byte_end":189898,"line_start":336,"line_end":336,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189903,"byte_end":189906,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189911,"byte_end":189929,"line_start":338,"line_end":338,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189934,"byte_end":189952,"line_start":339,"line_end":339,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189957,"byte_end":189960,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189965,"byte_end":190048,"line_start":341,"line_end":341,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190053,"byte_end":190056,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.cast_unit::<Local2, World2>().i);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190061,"byte_end":190130,"line_start":343,"line_end":343,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.j, to_world.cast_unit::<Local2, World2>().j);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190135,"byte_end":190204,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.k, to_world.cast_unit::<Local2, World2>().k);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190209,"byte_end":190278,"line_start":345,"line_end":345,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.r, to_world.cast_unit::<Local2, World2>().r);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190283,"byte_end":190352,"line_start":346,"line_end":346,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190357,"byte_end":190364,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190369,"byte_end":190378,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191168,"byte_end":191178,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190616,"byte_end":190670,"line_start":359,"line_end":359,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190675,"byte_end":190678,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190683,"byte_end":190696,"line_start":361,"line_end":361,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190701,"byte_end":190704,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190709,"byte_end":190720,"line_start":363,"line_end":363,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190725,"byte_end":190754,"line_start":364,"line_end":364,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190759,"byte_end":190776,"line_start":365,"line_end":365,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190781,"byte_end":190798,"line_start":366,"line_end":366,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190803,"byte_end":190806,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190811,"byte_end":190894,"line_start":368,"line_end":368,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190899,"byte_end":190902,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.to_untyped().i);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190907,"byte_end":190959,"line_start":370,"line_end":370,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.j, to_world.to_untyped().j);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":190964,"byte_end":191016,"line_start":371,"line_end":371,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.k, to_world.to_untyped().k);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191021,"byte_end":191073,"line_start":372,"line_end":372,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.r, to_world.to_untyped().r);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191078,"byte_end":191130,"line_start":373,"line_end":373,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191135,"byte_end":191142,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191147,"byte_end":191156,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191933,"byte_end":191945,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Rotation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191267,"byte_end":191303,"line_start":380,"line_end":380,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191308,"byte_end":191311,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191316,"byte_end":191329,"line_start":382,"line_end":382,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191334,"byte_end":191337,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191342,"byte_end":191353,"line_start":384,"line_end":384,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191358,"byte_end":191387,"line_start":385,"line_end":385,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191392,"byte_end":191420,"line_start":386,"line_end":386,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191425,"byte_end":191442,"line_start":387,"line_end":387,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191447,"byte_end":191464,"line_start":388,"line_end":388,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191469,"byte_end":191472,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation3D<_, UnknownUnit, UnknownUnit> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191477,"byte_end":191567,"line_start":390,"line_end":390,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191572,"byte_end":191575,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.i, Rotation3D::<_, Local, World>::from_untyped(&rot).i);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191580,"byte_end":191655,"line_start":392,"line_end":392,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.j, Rotation3D::<_, Local, World>::from_untyped(&rot).j);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191660,"byte_end":191735,"line_start":393,"line_end":393,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.k, Rotation3D::<_, Local, World>::from_untyped(&rot).k);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191740,"byte_end":191815,"line_start":394,"line_end":394,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.r, Rotation3D::<_, Local, World>::from_untyped(&rot).r);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191820,"byte_end":191895,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191900,"byte_end":191907,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":191912,"byte_end":191921,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192432,"byte_end":192447,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"unit_quaternion","qualname":"<Rotation3D<T, Src, Dst>>::unit_quaternion","value":"pub fn unit_quaternion(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation and normalizes it.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation and normalizes it.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192100,"byte_end":192181,"line_start":407,"line_end":407,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192186,"byte_end":192189,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192194,"byte_end":192275,"line_start":409,"line_end":409,"column_start":5,"column_end":86}},{"value":"/ before normalization, where `a`, `b` and `c` describe the vector part and the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192280,"byte_end":192361,"line_start":410,"line_end":410,"column_start":5,"column_end":86}},{"value":"/ last parameter `r` is the real part.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192366,"byte_end":192406,"line_start":411,"line_end":411,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192411,"byte_end":192420,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192597,"byte_end":192608,"line_start":418,"line_end":418,"column_start":12,"column_end":23},"name":"around_axis","qualname":"<Rotation3D<T, Src, Dst>>::around_axis","value":"pub fn around_axis(Vector3D<T, Src>, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around a given axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around a given axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192542,"byte_end":192585,"line_start":417,"line_end":417,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192926,"byte_end":192934,"line_start":426,"line_end":426,"column_start":12,"column_end":20},"name":"around_x","qualname":"<Rotation3D<T, Src, Dst>>::around_x","value":"pub fn around_x(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the x axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the x axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192873,"byte_end":192914,"line_start":425,"line_end":425,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193199,"byte_end":193207,"line_start":434,"line_end":434,"column_start":12,"column_end":20},"name":"around_y","qualname":"<Rotation3D<T, Src, Dst>>::around_y","value":"pub fn around_y(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the y axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the y axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193146,"byte_end":193187,"line_start":433,"line_end":433,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193472,"byte_end":193480,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"around_z","qualname":"<Rotation3D<T, Src, Dst>>::around_z","value":"pub fn around_z(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the z axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the z axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193419,"byte_end":193460,"line_start":441,"line_end":441,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194040,"byte_end":194045,"line_start":456,"line_end":456,"column_start":12,"column_end":17},"name":"euler","qualname":"<Rotation3D<T, Src, Dst>>::euler","value":"pub fn euler(Angle<T>, Angle<T>, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from Euler angles.","sig":null,"attributes":[{"value":"/ Creates a rotation from Euler angles.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193692,"byte_end":193733,"line_start":449,"line_end":449,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193738,"byte_end":193741,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ The rotations are applied in roll then pitch then yaw order.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193746,"byte_end":193810,"line_start":451,"line_end":451,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193815,"byte_end":193818,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/  - Roll (also called bank) is a rotation around the x axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193823,"byte_end":193886,"line_start":453,"line_end":453,"column_start":5,"column_end":68}},{"value":"/  - Pitch (also called bearing) is a rotation around the y axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193891,"byte_end":193958,"line_start":454,"line_end":454,"column_start":5,"column_end":72}},{"value":"/  - Yaw (also called heading) is a rotation around the z axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":193963,"byte_end":194028,"line_start":455,"line_end":455,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194611,"byte_end":194618,"line_start":473,"line_end":473,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Rotation3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194544,"byte_end":194585,"line_start":471,"line_end":471,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194590,"byte_end":194599,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1713},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194799,"byte_end":194803,"line_start":479,"line_end":479,"column_start":12,"column_end":16},"name":"norm","qualname":"<Rotation3D<T, Src, Dst>>::norm","value":"pub fn norm(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the norm of this quaternion.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194732,"byte_end":194773,"line_start":477,"line_end":477,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194778,"byte_end":194787,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194938,"byte_end":194949,"line_start":485,"line_end":485,"column_start":12,"column_end":23},"name":"square_norm","qualname":"<Rotation3D<T, Src, Dst>>::square_norm","value":"pub fn square_norm(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the squared norm of this quaternion.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194863,"byte_end":194912,"line_start":483,"line_end":483,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":194917,"byte_end":194926,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1715},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195217,"byte_end":195226,"line_start":493,"line_end":493,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Rotation3D<T, Src, Dst>>::normalize","value":"pub fn normalize(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a [unit quaternion] from this one.","sig":null,"attributes":[{"value":"/ Returns a [unit quaternion] from this one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195053,"byte_end":195099,"line_start":489,"line_end":489,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195104,"byte_end":195107,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ [unit quaternion]: https://en.wikipedia.org/wiki/Quaternion#Unit_quaternion","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195112,"byte_end":195191,"line_start":491,"line_end":491,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195196,"byte_end":195205,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195430,"byte_end":195443,"line_start":501,"line_end":501,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Rotation3D<T, Src, Dst>>::is_normalized","value":"pub fn is_normalized(&Self) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if [norm] of this quaternion is (approximately) one.","sig":null,"attributes":[{"value":"/ Returns `true` if [norm] of this quaternion is (approximately) one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195296,"byte_end":195367,"line_start":497,"line_end":497,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195372,"byte_end":195375,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ [norm]: #method.norm","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195380,"byte_end":195404,"line_start":499,"line_end":499,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195409,"byte_end":195418,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195768,"byte_end":195773,"line_start":512,"line_end":512,"column_start":12,"column_end":17},"name":"slerp","qualname":"<Rotation3D<T, Src, Dst>>::slerp","value":"pub fn slerp(&Self, &Self, T) -> Self where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Spherical linear interpolation between this rotation and another rotation.","sig":null,"attributes":[{"value":"/ Spherical linear interpolation between this rotation and another rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195618,"byte_end":195696,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195701,"byte_end":195704,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ `t` is expected to be between zero and one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":195709,"byte_end":195756,"line_start":511,"line_end":511,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":197035,"byte_end":197039,"line_start":553,"line_end":553,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rotation3D<T, Src, Dst>>::lerp","value":"pub fn lerp(&Self, &Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Basic Linear interpolation between this rotation and another rotation.\n","sig":null,"attributes":[{"value":"/ Basic Linear interpolation between this rotation and another rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":196935,"byte_end":197009,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":197014,"byte_end":197023,"line_start":552,"line_end":552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1719},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":197347,"byte_end":197364,"line_start":561,"line_end":561,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, Point3D<T, Src>) -> Point3D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":197176,"byte_end":197236,"line_start":558,"line_end":558,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":197241,"byte_end":197244,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":197249,"byte_end":197335,"line_start":560,"line_end":560,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198112,"byte_end":198129,"line_start":581,"line_end":581,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, Point2D<T, Src>) -> Point2D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation then projected on the xy plane.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":197896,"byte_end":197987,"line_start":577,"line_end":577,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":197992,"byte_end":197995,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198000,"byte_end":198086,"line_start":579,"line_end":579,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198091,"byte_end":198100,"line_start":580,"line_end":580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198469,"byte_end":198487,"line_start":592,"line_end":592,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector3d","value":"pub fn transform_vector3d(&Self, Vector3D<T, Src>) -> Vector3D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198282,"byte_end":198343,"line_start":588,"line_end":588,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198348,"byte_end":198351,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198356,"byte_end":198443,"line_start":590,"line_end":590,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198448,"byte_end":198457,"line_start":591,"line_end":591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198872,"byte_end":198890,"line_start":603,"line_end":603,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector2d","value":"pub fn transform_vector2d(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation then projected on the xy plane.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198654,"byte_end":198746,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198751,"byte_end":198754,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198759,"byte_end":198846,"line_start":601,"line_end":601,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":198851,"byte_end":198860,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":199129,"byte_end":199141,"line_start":612,"line_end":612,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":199048,"byte_end":199103,"line_start":610,"line_end":610,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":199108,"byte_end":199117,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":200253,"byte_end":200257,"line_start":656,"line_end":656,"column_start":12,"column_end":16},"name":"then","qualname":"<Rotation3D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Rotation3D<T, Dst, NewDst>)\n-> Rotation3D<T, Src, NewDst> where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing this rotation followed by the other rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing this rotation followed by the other rotation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":200146,"byte_end":200227,"line_start":654,"line_end":654,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":200232,"byte_end":200241,"line_start":655,"line_end":655,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212483,"byte_end":212488,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Scale","qualname":"::scale::Scale","value":"","parent":null,"children":[],"decl_id":null,"docs":" A scaling factor between two different units of measurement.","sig":null,"attributes":[{"value":"/ A scaling factor between two different units of measurement.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211516,"byte_end":211580,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211581,"byte_end":211584,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is effectively a type-safe float, intended to be used in combination with other types like","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211585,"byte_end":211684,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ `length::Length` to enforce conversion between systems of measurement at compile time.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211685,"byte_end":211775,"line_start":26,"line_end":26,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211776,"byte_end":211779,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `Src` and `Dst` represent the units before and after multiplying a value by a `Scale`. They","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211780,"byte_end":211875,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ may be types without values, such as empty enums.  For example:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211876,"byte_end":211943,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211944,"byte_end":211947,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211948,"byte_end":211959,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211960,"byte_end":211982,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"/ use euclid::Length;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":211983,"byte_end":212006,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212007,"byte_end":212022,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/ enum Inch {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212023,"byte_end":212040,"line_start":35,"line_end":35,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212041,"byte_end":212044,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let mm_per_inch: Scale<f32, Inch, Mm> = Scale::new(25.4);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212045,"byte_end":212106,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212107,"byte_end":212110,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let one_foot: Length<f32, Inch> = Length::new(12.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212111,"byte_end":212167,"line_start":39,"line_end":39,"column_start":1,"column_end":57}},{"value":"/ let one_foot_in_mm: Length<f32, Mm> = one_foot * mm_per_inch;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212168,"byte_end":212233,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212234,"byte_end":212241,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212242,"byte_end":212252,"line_start":42,"line_end":42,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1767},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212502,"byte_end":212507,"line_start":51,"line_end":51,"column_start":31,"column_end":36},"name":"0","qualname":"::scale::Scale::0","value":"T","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1768},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212524,"byte_end":212551,"line_start":51,"line_end":51,"column_start":53,"column_end":80},"name":"1","qualname":"::scale::Scale::1","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212625,"byte_end":212628,"line_start":55,"line_end":55,"column_start":18,"column_end":21},"name":"new","qualname":"<Scale<T, Src, Dst>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212598,"byte_end":212607,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212748,"byte_end":212756,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"identity","qualname":"<Scale<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity scale (1.0).\n","sig":null,"attributes":[{"value":"/ Creates an identity scale (1.0).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212686,"byte_end":212722,"line_start":59,"line_end":59,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212727,"byte_end":212736,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213208,"byte_end":213223,"line_start":82,"line_end":82,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Scale<T, Src, Dst>>::transform_point","value":"pub fn transform_point(Self, Point2D<T, Src>) -> Point2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212838,"byte_end":212892,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212897,"byte_end":212900,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212905,"byte_end":212918,"line_start":70,"line_end":70,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212923,"byte_end":212926,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212931,"byte_end":212942,"line_start":72,"line_end":72,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, point2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212947,"byte_end":212979,"line_start":73,"line_end":73,"column_start":5,"column_end":37}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212984,"byte_end":212999,"line_start":74,"line_end":74,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213004,"byte_end":213019,"line_start":75,"line_end":75,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213024,"byte_end":213027,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213032,"byte_end":213083,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213088,"byte_end":213091,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_point(point2(42, -42)), point2(420, -420));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213096,"byte_end":213170,"line_start":79,"line_end":79,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213175,"byte_end":213182,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213187,"byte_end":213196,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213468,"byte_end":213485,"line_start":91,"line_end":91,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Scale<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(Self, Point3D<T, Src>) -> Point3D<T::Output, Dst>\nwhere T: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213388,"byte_end":213442,"line_start":89,"line_end":89,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213447,"byte_end":213456,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214034,"byte_end":214050,"line_start":112,"line_end":112,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Scale<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(Self, Vector2D<T, Src>) -> Vector2D<T::Output, Dst>\nwhere T: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213668,"byte_end":213723,"line_start":98,"line_end":98,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213728,"byte_end":213731,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213736,"byte_end":213749,"line_start":100,"line_end":100,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213754,"byte_end":213757,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213762,"byte_end":213773,"line_start":102,"line_end":102,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, vec2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213778,"byte_end":213808,"line_start":103,"line_end":103,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213813,"byte_end":213828,"line_start":104,"line_end":104,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213833,"byte_end":213848,"line_start":105,"line_end":105,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213853,"byte_end":213856,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213861,"byte_end":213912,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213917,"byte_end":213920,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_vector(vec2(42, -42)), vec2(420, -420));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":213925,"byte_end":213996,"line_start":109,"line_end":109,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214001,"byte_end":214008,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214013,"byte_end":214022,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214579,"byte_end":214593,"line_start":133,"line_end":133,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Scale<T, Src, Dst>>::transform_size","value":"pub fn transform_size(Self, Size2D<T, Src>) -> Size2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214212,"byte_end":214267,"line_start":119,"line_end":119,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214272,"byte_end":214275,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214280,"byte_end":214293,"line_start":121,"line_end":121,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214298,"byte_end":214301,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214306,"byte_end":214317,"line_start":123,"line_end":123,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, size2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214322,"byte_end":214353,"line_start":124,"line_end":124,"column_start":5,"column_end":36}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214358,"byte_end":214373,"line_start":125,"line_end":125,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214378,"byte_end":214393,"line_start":126,"line_end":126,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214398,"byte_end":214401,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214406,"byte_end":214457,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214462,"byte_end":214465,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_size(size2(42, -42)), size2(420, -420));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214470,"byte_end":214541,"line_start":130,"line_end":130,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214546,"byte_end":214553,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214558,"byte_end":214567,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215138,"byte_end":215152,"line_start":154,"line_end":154,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Scale<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(Self, &Rect<T, Src>) -> Rect<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given rect transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given rect transformed by this scale.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214761,"byte_end":214814,"line_start":140,"line_end":140,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214819,"byte_end":214822,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214827,"byte_end":214840,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214845,"byte_end":214848,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214853,"byte_end":214864,"line_start":144,"line_end":144,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, rect};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214869,"byte_end":214899,"line_start":145,"line_end":145,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214904,"byte_end":214919,"line_start":146,"line_end":146,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214924,"byte_end":214939,"line_start":147,"line_end":147,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214944,"byte_end":214947,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":214952,"byte_end":215003,"line_start":149,"line_end":149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215008,"byte_end":215011,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_rect(&rect(1, 2, 42, -42)), rect(10, 20, 420, -420));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215016,"byte_end":215100,"line_start":151,"line_end":151,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215105,"byte_end":215112,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215117,"byte_end":215126,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215452,"byte_end":215467,"line_start":166,"line_end":166,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Scale<T, Src, Dst>>::transform_box2d","value":"pub fn transform_box2d(Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given box transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given box transformed by this scale.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215374,"byte_end":215426,"line_start":164,"line_end":164,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215431,"byte_end":215440,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215764,"byte_end":215779,"line_start":178,"line_end":178,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Scale<T, Src, Dst>>::transform_box3d","value":"pub fn transform_box3d(Self, &Box3D<T, Src>) -> Box3D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given box transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given box transformed by this scale.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215686,"byte_end":215738,"line_start":176,"line_end":176,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":215743,"byte_end":215752,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216520,"byte_end":216531,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Scale<T, Src, Dst>>::is_identity","value":"pub fn is_identity(Self) -> bool where T: PartialEq + One","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this scale has no effect.","sig":null,"attributes":[{"value":"/ Returns `true` if this scale has no effect.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216002,"byte_end":216049,"line_start":188,"line_end":188,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216054,"byte_end":216057,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216062,"byte_end":216075,"line_start":190,"line_end":190,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216080,"byte_end":216083,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216088,"byte_end":216099,"line_start":192,"line_end":192,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216104,"byte_end":216126,"line_start":193,"line_end":193,"column_start":5,"column_end":27}},{"value":"/ use euclid::num::One;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216131,"byte_end":216156,"line_start":194,"line_end":194,"column_start":5,"column_end":30}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216161,"byte_end":216176,"line_start":195,"line_end":195,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216181,"byte_end":216196,"line_start":196,"line_end":196,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216201,"byte_end":216204,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Mm, Cm> = Scale::new(0.1);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216209,"byte_end":216265,"line_start":198,"line_end":198,"column_start":5,"column_end":61}},{"value":"/ let mm_per_mm: Scale<f32, Mm, Mm> = Scale::new(1.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216270,"byte_end":216326,"line_start":199,"line_end":199,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216331,"byte_end":216334,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.is_identity(), false);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216339,"byte_end":216386,"line_start":201,"line_end":201,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(mm_per_mm.is_identity(), true);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216391,"byte_end":216437,"line_start":202,"line_end":202,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(mm_per_mm, Scale::one());","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216442,"byte_end":216482,"line_start":203,"line_end":203,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216487,"byte_end":216494,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216499,"byte_end":216508,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216701,"byte_end":216704,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"get","qualname":"<Scale<T, Src, Dst>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying scalar scale factor.\n","sig":null,"attributes":[{"value":"/ Returns the underlying scalar scale factor.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216628,"byte_end":216675,"line_start":213,"line_end":213,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216680,"byte_end":216689,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217056,"byte_end":217063,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Scale<T, Src, Dst>>::inverse","value":"pub fn inverse(Self) -> Scale<T::Output, Dst, Src> where T: One + Div","parent":null,"children":[],"decl_id":null,"docs":" The inverse Scale (1.0 / self).","sig":null,"attributes":[{"value":"/ The inverse Scale (1.0 / self).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216744,"byte_end":216779,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216784,"byte_end":216787,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216792,"byte_end":216805,"line_start":221,"line_end":221,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216810,"byte_end":216813,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216818,"byte_end":216829,"line_start":223,"line_end":223,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216834,"byte_end":216856,"line_start":224,"line_end":224,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216861,"byte_end":216876,"line_start":225,"line_end":225,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216881,"byte_end":216896,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216901,"byte_end":216904,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Cm, Mm> = Scale::new(0.1);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216909,"byte_end":216965,"line_start":228,"line_end":228,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216970,"byte_end":216973,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.inverse(), Scale::new(10.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":216978,"byte_end":217032,"line_start":230,"line_end":230,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217037,"byte_end":217044,"line_start":231,"line_end":231,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218144,"byte_end":218148,"line_start":270,"line_end":270,"column_start":12,"column_end":16},"name":"cast","qualname":"<Scale<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Scale<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217265,"byte_end":217339,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217344,"byte_end":217347,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217352,"byte_end":217364,"line_start":244,"line_end":244,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217369,"byte_end":217372,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217377,"byte_end":217454,"line_start":246,"line_end":246,"column_start":5,"column_end":82}},{"value":"/ method panics. Use `try_cast` if that must be case.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217459,"byte_end":217514,"line_start":247,"line_end":247,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217519,"byte_end":217522,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217527,"byte_end":217540,"line_start":249,"line_end":249,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217545,"byte_end":217548,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217553,"byte_end":217564,"line_start":251,"line_end":251,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217569,"byte_end":217591,"line_start":252,"line_end":252,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217596,"byte_end":217611,"line_start":253,"line_end":253,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217616,"byte_end":217631,"line_start":254,"line_end":254,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217636,"byte_end":217639,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217644,"byte_end":217695,"line_start":256,"line_end":256,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217700,"byte_end":217703,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.cast::<f32>(), Scale::new(10.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217708,"byte_end":217762,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217767,"byte_end":217774,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ That conversion will panic, because `i32` not enough to store such big numbers:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217779,"byte_end":217862,"line_start":260,"line_end":260,"column_start":5,"column_end":88}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217867,"byte_end":217891,"line_start":261,"line_end":261,"column_start":5,"column_end":29}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217896,"byte_end":217918,"line_start":262,"line_end":262,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};// millimeter = 10^-2 meters","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217923,"byte_end":217966,"line_start":263,"line_end":263,"column_start":5,"column_end":48}},{"value":"/ enum Em {};// exameter   = 10^18 meters","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217971,"byte_end":218014,"line_start":264,"line_end":264,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218019,"byte_end":218022,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ // Panics","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218027,"byte_end":218040,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/ let to_em: Scale<i32, Mm, Em> = Scale::new(10e20).cast();","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218045,"byte_end":218106,"line_start":267,"line_end":267,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218111,"byte_end":218118,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218123,"byte_end":218132,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218921,"byte_end":218929,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Scale<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Scale<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n If the source value cannot be represented by the target type `NewT`, then `None`\n is returned.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218241,"byte_end":218324,"line_start":274,"line_end":274,"column_start":5,"column_end":88}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then `None`","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218329,"byte_end":218413,"line_start":275,"line_end":275,"column_start":5,"column_end":89}},{"value":"/ is returned.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218418,"byte_end":218434,"line_start":276,"line_end":276,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218439,"byte_end":218442,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218447,"byte_end":218460,"line_start":278,"line_end":278,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218465,"byte_end":218468,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218473,"byte_end":218484,"line_start":280,"line_end":280,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218489,"byte_end":218511,"line_start":281,"line_end":281,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218516,"byte_end":218531,"line_start":282,"line_end":282,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218536,"byte_end":218551,"line_start":283,"line_end":283,"column_start":5,"column_end":20}},{"value":"/ enum Em {};// Exameter = 10^18 meters","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218556,"byte_end":218597,"line_start":284,"line_end":284,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218602,"byte_end":218605,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218610,"byte_end":218661,"line_start":286,"line_end":286,"column_start":5,"column_end":56}},{"value":"/ let to_em: Scale<f32, Mm, Em> = Scale::new(10e20);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218666,"byte_end":218720,"line_start":287,"line_end":287,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218725,"byte_end":218728,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.try_cast::<f32>(), Some(Scale::new(10.0)));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218733,"byte_end":218797,"line_start":289,"line_end":289,"column_start":5,"column_end":69}},{"value":"/ // Integer to small to store that number","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218802,"byte_end":218846,"line_start":290,"line_end":290,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(to_em.try_cast::<i32>(), None);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218851,"byte_end":218897,"line_start":291,"line_end":291,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":218902,"byte_end":218909,"line_start":292,"line_end":292,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1879},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223463,"byte_end":223476,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"SideOffsets2D","qualname":"::side_offsets::SideOffsets2D","value":"SideOffsets2D { top, right, bottom, left, _unit }","parent":null,"children":[{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886}],"decl_id":null,"docs":" A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,\n and margins in CSS, optionally tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223107,"byte_end":223202,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ and margins in CSS, optionally tagged with a unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223203,"byte_end":223257,"line_start":26,"line_end":26,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223258,"byte_end":223268,"line_start":27,"line_end":27,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1882},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223493,"byte_end":223496,"line_start":34,"line_end":34,"column_start":9,"column_end":12},"name":"top","qualname":"::side_offsets::SideOffsets2D::top","value":"T","parent":{"krate":0,"index":1879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1883},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223509,"byte_end":223514,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"right","qualname":"::side_offsets::SideOffsets2D::right","value":"T","parent":{"krate":0,"index":1879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1884},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223527,"byte_end":223533,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"bottom","qualname":"::side_offsets::SideOffsets2D::bottom","value":"T","parent":{"krate":0,"index":1879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1885},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223546,"byte_end":223550,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"name":"left","qualname":"::side_offsets::SideOffsets2D::left","value":"T","parent":{"krate":0,"index":1879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1886},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":223582,"byte_end":223587,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"_unit","qualname":"::side_offsets::SideOffsets2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1917},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225758,"byte_end":225761,"line_start":127,"line_end":127,"column_start":18,"column_end":21},"name":"new","qualname":"<SideOffsets2D<T, U>>::new","value":"pub const fn new(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a scalar for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a scalar for each side.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225591,"byte_end":225637,"line_start":123,"line_end":123,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225642,"byte_end":225645,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225650,"byte_end":225714,"line_start":125,"line_end":125,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225719,"byte_end":225740,"line_start":126,"line_end":126,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226128,"byte_end":226140,"line_start":141,"line_end":141,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<SideOffsets2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>, Length<T, U>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a typed Length for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a typed Length for each side.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225961,"byte_end":226013,"line_start":137,"line_end":137,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226018,"byte_end":226021,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226026,"byte_end":226090,"line_start":139,"line_end":139,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226095,"byte_end":226116,"line_start":140,"line_end":140,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226636,"byte_end":226654,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"name":"from_vectors_outer","qualname":"<SideOffsets2D<T, U>>::from_vectors_outer","value":"pub fn from_vectors_outer(Vector2D<T, U>, Vector2D<T, U>) -> Self where\nT: Neg<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226344,"byte_end":226405,"line_start":150,"line_end":150,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226410,"byte_end":226413,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The outer rect of the resulting side offsets is equivalent to translating","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226418,"byte_end":226495,"line_start":152,"line_end":152,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226500,"byte_end":226575,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226580,"byte_end":226624,"line_start":154,"line_end":154,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1920},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227222,"byte_end":227240,"line_start":173,"line_end":173,"column_start":12,"column_end":30},"name":"from_vectors_inner","qualname":"<SideOffsets2D<T, U>>::from_vectors_inner","value":"pub fn from_vectors_inner(Vector2D<T, U>, Vector2D<T, U>) -> Self where\nT: Neg<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226930,"byte_end":226991,"line_start":168,"line_end":168,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":226996,"byte_end":226999,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ The inner rect of the resulting side offsets is equivalent to translating","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227004,"byte_end":227081,"line_start":170,"line_end":170,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227086,"byte_end":227161,"line_start":171,"line_end":171,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227166,"byte_end":227210,"line_start":172,"line_end":172,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227571,"byte_end":227575,"line_start":187,"line_end":187,"column_start":12,"column_end":16},"name":"zero","qualname":"<SideOffsets2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227516,"byte_end":227559,"line_start":186,"line_end":186,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227769,"byte_end":227776,"line_start":194,"line_end":194,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<SideOffsets2D<T, U>>::is_zero","value":"pub fn is_zero(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all side offsets are zero.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all side offsets are zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227709,"byte_end":227757,"line_start":193,"line_end":193,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1923},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":228065,"byte_end":228077,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"new_all_same","qualname":"<SideOffsets2D<T, U>>::new_all_same","value":"pub fn new_all_same(T) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a scalar value directly.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a scalar value directly.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":227969,"byte_end":228053,"line_start":202,"line_end":202,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":228268,"byte_end":228288,"line_start":210,"line_end":210,"column_start":12,"column_end":32},"name":"from_length_all_same","qualname":"<SideOffsets2D<T, U>>::from_length_all_same","value":"pub fn from_length_all_same(Length<T, U>) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a typed Length.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a typed Length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":228181,"byte_end":228256,"line_start":209,"line_end":209,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":228406,"byte_end":228416,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"horizontal","qualname":"<SideOffsets2D<T, U>>::horizontal","value":"pub fn horizontal(&Self) -> T where T: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":228527,"byte_end":228535,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"vertical","qualname":"<SideOffsets2D<T, U>>::vertical","value":"pub fn vertical(&Self) -> T where T: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2006},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235281,"byte_end":235287,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"Size2D","qualname":"::size::Size2D","value":"Size2D { width, height, _unit }","parent":null,"children":[{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011}],"decl_id":null,"docs":" A 2d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d size tagged with a unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235225,"byte_end":235258,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235259,"byte_end":235269,"line_start":31,"line_end":31,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2009},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235396,"byte_end":235401,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size2D::width","value":"T","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis (usually horizontal).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis (usually horizontal).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235300,"byte_end":235387,"line_start":33,"line_end":33,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":2010},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235504,"byte_end":235510,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size2D::height","value":"T","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis (usually vertical).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis (usually vertical).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235410,"byte_end":235495,"line_start":35,"line_end":35,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":2011},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235542,"byte_end":235547,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238029,"byte_end":238033,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237862,"byte_end":237933,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237938,"byte_end":237941,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237946,"byte_end":238003,"line_start":140,"line_end":140,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238008,"byte_end":238017,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2043},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238205,"byte_end":238208,"line_start":151,"line_end":151,"column_start":18,"column_end":21},"name":"new","qualname":"<Size2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238136,"byte_end":238173,"line_start":149,"line_end":149,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238178,"byte_end":238187,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2044},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238427,"byte_end":238439,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238348,"byte_end":238401,"line_start":158,"line_end":158,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238406,"byte_end":238415,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2045},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238626,"byte_end":238631,"line_start":166,"line_end":166,"column_start":12,"column_end":17},"name":"splat","qualname":"<Size2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238543,"byte_end":238600,"line_start":164,"line_end":164,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238605,"byte_end":238614,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2046},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238865,"byte_end":238877,"line_start":179,"line_end":179,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size2D<T, U>>::from_untyped","value":"pub fn from_untyped(Size2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238803,"byte_end":238839,"line_start":177,"line_end":177,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238844,"byte_end":238853,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239095,"byte_end":239103,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of two elements (width, then height).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238999,"byte_end":239069,"line_start":185,"line_end":185,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239074,"byte_end":239083,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2052},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239262,"byte_end":239270,"line_start":193,"line_end":193,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a tuple of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as a tuple of two elements (width, then height).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239167,"byte_end":239236,"line_start":191,"line_end":191,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239241,"byte_end":239250,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2053},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239415,"byte_end":239424,"line_start":199,"line_end":199,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size2D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width and height.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width and height.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239334,"byte_end":239389,"line_start":197,"line_end":197,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239394,"byte_end":239403,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239580,"byte_end":239590,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239500,"byte_end":239554,"line_start":203,"line_end":203,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239559,"byte_end":239568,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2055},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239704,"byte_end":239713,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Size2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239661,"byte_end":239678,"line_start":209,"line_end":209,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239683,"byte_end":239692,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240156,"byte_end":240161,"line_start":227,"line_end":227,"column_start":12,"column_end":17},"name":"round","qualname":"<Size2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239797,"byte_end":239852,"line_start":215,"line_end":215,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239857,"byte_end":239860,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239865,"byte_end":239940,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239945,"byte_end":239948,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239953,"byte_end":239964,"line_start":219,"line_end":219,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239969,"byte_end":239993,"line_start":220,"line_end":220,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":239998,"byte_end":240012,"line_start":221,"line_end":221,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240017,"byte_end":240020,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).round(), size2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240025,"byte_end":240102,"line_start":223,"line_end":223,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240107,"byte_end":240114,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240119,"byte_end":240128,"line_start":225,"line_end":225,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240133,"byte_end":240144,"line_start":226,"line_end":226,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2058},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240675,"byte_end":240679,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240282,"byte_end":240373,"line_start":234,"line_end":234,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240378,"byte_end":240381,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240386,"byte_end":240461,"line_start":236,"line_end":236,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240466,"byte_end":240469,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240474,"byte_end":240485,"line_start":238,"line_end":238,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240490,"byte_end":240514,"line_start":239,"line_end":239,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240519,"byte_end":240533,"line_start":240,"line_end":240,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240538,"byte_end":240541,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).ceil(), size2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240546,"byte_end":240621,"line_start":242,"line_end":242,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240626,"byte_end":240633,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240638,"byte_end":240647,"line_start":244,"line_end":244,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240652,"byte_end":240663,"line_start":245,"line_end":245,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2059},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241190,"byte_end":241195,"line_start":265,"line_end":265,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240797,"byte_end":240885,"line_start":253,"line_end":253,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240890,"byte_end":240893,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240898,"byte_end":240973,"line_start":255,"line_end":255,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240978,"byte_end":240981,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":240986,"byte_end":240997,"line_start":257,"line_end":257,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241002,"byte_end":241026,"line_start":258,"line_end":258,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241031,"byte_end":241045,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241050,"byte_end":241053,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).floor(), size2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241058,"byte_end":241136,"line_start":261,"line_end":261,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241141,"byte_end":241148,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241153,"byte_end":241162,"line_start":263,"line_end":263,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241167,"byte_end":241178,"line_start":264,"line_end":264,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2060},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241383,"byte_end":241387,"line_start":273,"line_end":273,"column_start":12,"column_end":16},"name":"area","qualname":"<Size2D<T, U>>::area","value":"pub fn area(Self) -> T::Output where T: Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of both components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of both components","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241316,"byte_end":241371,"line_start":272,"line_end":272,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2061},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242126,"byte_end":242130,"line_start":298,"line_end":298,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this size and another size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241483,"byte_end":241558,"line_start":280,"line_end":280,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241563,"byte_end":241566,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241571,"byte_end":241584,"line_start":282,"line_end":282,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241589,"byte_end":241592,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241597,"byte_end":241608,"line_start":284,"line_end":284,"column_start":5,"column_end":16}},{"value":"/ use euclid::size2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241613,"byte_end":241635,"line_start":285,"line_end":285,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size2D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241640,"byte_end":241672,"line_start":286,"line_end":286,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241677,"byte_end":241680,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ let from: Size2D<_> = size2(0.0, 10.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241685,"byte_end":241728,"line_start":288,"line_end":288,"column_start":5,"column_end":48}},{"value":"/ let to:  Size2D<_> = size2(8.0, -4.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241733,"byte_end":241775,"line_start":289,"line_end":289,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241780,"byte_end":241783,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size2(-8.0,  24.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241788,"byte_end":241844,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size2( 0.0,  10.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241849,"byte_end":241905,"line_start":292,"line_end":292,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size2( 4.0,   3.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241910,"byte_end":241966,"line_start":293,"line_end":293,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size2( 8.0,  -4.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":241971,"byte_end":242027,"line_start":294,"line_end":294,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size2(16.0, -18.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242032,"byte_end":242088,"line_start":295,"line_end":295,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242093,"byte_end":242100,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242105,"byte_end":242114,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2065},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242752,"byte_end":242756,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Size2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242372,"byte_end":242446,"line_start":308,"line_end":308,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242451,"byte_end":242454,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242459,"byte_end":242546,"line_start":310,"line_end":310,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242551,"byte_end":242639,"line_start":311,"line_end":311,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242644,"byte_end":242726,"line_start":312,"line_end":312,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242731,"byte_end":242740,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2067},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243218,"byte_end":243226,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Size2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242843,"byte_end":242926,"line_start":318,"line_end":318,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242931,"byte_end":242934,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242939,"byte_end":243026,"line_start":320,"line_end":320,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243031,"byte_end":243119,"line_start":321,"line_end":321,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243124,"byte_end":243206,"line_start":322,"line_end":322,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243553,"byte_end":243559,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Size2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243499,"byte_end":243527,"line_start":332,"line_end":332,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243532,"byte_end":243541,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243671,"byte_end":243677,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Size2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243617,"byte_end":243645,"line_start":338,"line_end":338,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243650,"byte_end":243659,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244026,"byte_end":244034,"line_start":350,"line_end":350,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Size2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243735,"byte_end":243792,"line_start":344,"line_end":344,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243797,"byte_end":243800,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243805,"byte_end":243880,"line_start":346,"line_end":346,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243885,"byte_end":243959,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":243964,"byte_end":244000,"line_start":348,"line_end":348,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244005,"byte_end":244014,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244384,"byte_end":244390,"line_start":360,"line_end":360,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Size2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244094,"byte_end":244150,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244155,"byte_end":244158,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244163,"byte_end":244238,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244243,"byte_end":244317,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244322,"byte_end":244358,"line_start":358,"line_end":358,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244363,"byte_end":244372,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2073},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244738,"byte_end":244744,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Size2D<T, U>>::to_u64","value":"pub fn to_u64(Self) -> Size2D<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244448,"byte_end":244504,"line_start":364,"line_end":364,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244509,"byte_end":244512,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244517,"byte_end":244592,"line_start":366,"line_end":366,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244597,"byte_end":244671,"line_start":367,"line_end":367,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244676,"byte_end":244712,"line_start":368,"line_end":368,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244717,"byte_end":244726,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245092,"byte_end":245098,"line_start":380,"line_end":380,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Size2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244802,"byte_end":244858,"line_start":374,"line_end":374,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244863,"byte_end":244866,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244871,"byte_end":244946,"line_start":376,"line_end":376,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":244951,"byte_end":245025,"line_start":377,"line_end":377,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245030,"byte_end":245066,"line_start":378,"line_end":378,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245071,"byte_end":245080,"line_start":379,"line_end":379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245446,"byte_end":245452,"line_start":390,"line_end":390,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Size2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245156,"byte_end":245212,"line_start":384,"line_end":384,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245217,"byte_end":245220,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245225,"byte_end":245300,"line_start":386,"line_end":386,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245305,"byte_end":245379,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245384,"byte_end":245420,"line_start":388,"line_end":388,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245425,"byte_end":245434,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245814,"byte_end":245817,"line_start":401,"line_end":401,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size2D<T, U>>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245546,"byte_end":245596,"line_start":396,"line_end":396,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245601,"byte_end":245604,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245609,"byte_end":245697,"line_start":398,"line_end":398,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245702,"byte_end":245705,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245710,"byte_end":245802,"line_start":400,"line_end":400,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2080},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246004,"byte_end":246015,"line_start":406,"line_end":406,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size2D<T, U>>::is_positive","value":"pub fn is_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if both components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if both components is positive and `false` any component is zero or negative.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245896,"byte_end":245992,"line_start":405,"line_end":405,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246253,"byte_end":246256,"line_start":414,"line_end":414,"column_start":12,"column_end":15},"name":"min","qualname":"<Size2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246145,"byte_end":246227,"line_start":412,"line_end":412,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246232,"byte_end":246241,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2085},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246481,"byte_end":246484,"line_start":420,"line_end":420,"column_start":12,"column_end":15},"name":"max","qualname":"<Size2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246373,"byte_end":246455,"line_start":418,"line_end":418,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246460,"byte_end":246469,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246794,"byte_end":246799,"line_start":429,"line_end":429,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246601,"byte_end":246670,"line_start":424,"line_end":424,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246675,"byte_end":246711,"line_start":425,"line_end":425,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246716,"byte_end":246719,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246724,"byte_end":246768,"line_start":427,"line_end":427,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246773,"byte_end":246782,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2087},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":247025,"byte_end":247033,"line_start":438,"line_end":438,"column_start":12,"column_end":20},"name":"contains","qualname":"<Size2D<T, U>>::contains","value":"pub fn contains(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":247004,"byte_end":247013,"line_start":437,"line_end":437,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2088},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":247229,"byte_end":247241,"line_start":443,"line_end":443,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size2D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater then\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":247139,"byte_end":247217,"line_start":442,"line_end":442,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2089},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":247495,"byte_end":247505,"line_start":451,"line_end":451,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size2D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower then\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":247407,"byte_end":247483,"line_start":450,"line_end":450,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":247753,"byte_end":247761,"line_start":459,"line_end":459,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Size2D<T, U>>::is_empty","value":"pub fn is_empty(Self) -> bool where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero, negative, or NaN.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero, negative, or NaN.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":247671,"byte_end":247741,"line_start":458,"line_end":458,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2094},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248130,"byte_end":248135,"line_start":472,"line_end":472,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size2D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248047,"byte_end":248118,"line_start":471,"line_end":471,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2095},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248390,"byte_end":248399,"line_start":480,"line_end":480,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size2D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248303,"byte_end":248378,"line_start":479,"line_end":479,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2189},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":252520,"byte_end":252525,"line_start":649,"line_end":649,"column_start":14,"column_end":19},"name":"size2","qualname":"::size::size2","value":"pub const fn size2<T, U>(T, T) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size2D::new(w, h)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size2D::new(w, h)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":252458,"byte_end":252496,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":252497,"byte_end":252506,"line_start":648,"line_end":648,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2216},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260020,"byte_end":260026,"line_start":929,"line_end":929,"column_start":12,"column_end":18},"name":"Size3D","qualname":"::size::Size3D","value":"Size3D { width, height, depth, _unit }","parent":null,"children":[{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222}],"decl_id":null,"docs":" A 3d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d size tagged with a unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":259964,"byte_end":259997,"line_start":927,"line_end":927,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":259998,"byte_end":260008,"line_start":928,"line_end":928,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2219},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260114,"byte_end":260119,"line_start":931,"line_end":931,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size3D::width","value":"T","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260039,"byte_end":260105,"line_start":930,"line_end":930,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2220},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260203,"byte_end":260209,"line_start":933,"line_end":933,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size3D::height","value":"T","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260128,"byte_end":260194,"line_start":932,"line_end":932,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2221},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260293,"byte_end":260298,"line_start":935,"line_end":935,"column_start":9,"column_end":14},"name":"depth","qualname":"::size::Size3D::depth","value":"T","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `z` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `z` axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260218,"byte_end":260284,"line_start":934,"line_end":934,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2222},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260330,"byte_end":260335,"line_start":937,"line_end":937,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2253},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262514,"byte_end":262518,"line_start":1027,"line_end":1027,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262361,"byte_end":262432,"line_start":1024,"line_end":1024,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262437,"byte_end":262440,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262445,"byte_end":262502,"line_start":1026,"line_end":1026,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2254},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262704,"byte_end":262707,"line_start":1036,"line_end":1036,"column_start":18,"column_end":21},"name":"new","qualname":"<Size3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262635,"byte_end":262672,"line_start":1034,"line_end":1034,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262677,"byte_end":262686,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2255},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262955,"byte_end":262967,"line_start":1046,"line_end":1046,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262876,"byte_end":262929,"line_start":1044,"line_end":1044,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262934,"byte_end":262943,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2256},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263184,"byte_end":263189,"line_start":1052,"line_end":1052,"column_start":12,"column_end":17},"name":"splat","qualname":"<Size3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263101,"byte_end":263158,"line_start":1050,"line_end":1050,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263163,"byte_end":263172,"line_start":1051,"line_end":1051,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2257},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263453,"byte_end":263465,"line_start":1066,"line_end":1066,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size3D<T, U>>::from_untyped","value":"pub fn from_untyped(Size3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263391,"byte_end":263427,"line_start":1064,"line_end":1064,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263432,"byte_end":263441,"line_start":1065,"line_end":1065,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2261},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263706,"byte_end":263714,"line_start":1074,"line_end":1074,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263596,"byte_end":263680,"line_start":1072,"line_end":1072,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263685,"byte_end":263694,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263900,"byte_end":263908,"line_start":1080,"line_end":1080,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263790,"byte_end":263874,"line_start":1078,"line_end":1078,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263879,"byte_end":263888,"line_start":1079,"line_end":1079,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264075,"byte_end":264084,"line_start":1086,"line_end":1086,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size3D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width, height and depth.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width, height and depth.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263987,"byte_end":264049,"line_start":1084,"line_end":1084,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264054,"byte_end":264063,"line_start":1085,"line_end":1085,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264252,"byte_end":264262,"line_start":1092,"line_end":1092,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264172,"byte_end":264226,"line_start":1090,"line_end":1090,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264231,"byte_end":264240,"line_start":1091,"line_end":1091,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264376,"byte_end":264385,"line_start":1098,"line_end":1098,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Size3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264333,"byte_end":264350,"line_start":1096,"line_end":1096,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264355,"byte_end":264364,"line_start":1097,"line_end":1097,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264850,"byte_end":264855,"line_start":1114,"line_end":1114,"column_start":12,"column_end":17},"name":"round","qualname":"<Size3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264481,"byte_end":264536,"line_start":1102,"line_end":1102,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264541,"byte_end":264544,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264549,"byte_end":264624,"line_start":1104,"line_end":1104,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264629,"byte_end":264632,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264637,"byte_end":264648,"line_start":1106,"line_end":1106,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264653,"byte_end":264677,"line_start":1107,"line_end":1107,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264682,"byte_end":264696,"line_start":1108,"line_end":1108,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264701,"byte_end":264704,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).round(), size3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264709,"byte_end":264796,"line_start":1110,"line_end":1110,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264801,"byte_end":264808,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264813,"byte_end":264822,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264827,"byte_end":264838,"line_start":1113,"line_end":1113,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265399,"byte_end":265403,"line_start":1133,"line_end":1133,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":264996,"byte_end":265087,"line_start":1121,"line_end":1121,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265092,"byte_end":265095,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265100,"byte_end":265175,"line_start":1123,"line_end":1123,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265180,"byte_end":265183,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265188,"byte_end":265199,"line_start":1125,"line_end":1125,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265204,"byte_end":265228,"line_start":1126,"line_end":1126,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265233,"byte_end":265247,"line_start":1127,"line_end":1127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265252,"byte_end":265255,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), size3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265260,"byte_end":265345,"line_start":1129,"line_end":1129,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265350,"byte_end":265357,"line_start":1130,"line_end":1130,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265362,"byte_end":265371,"line_start":1131,"line_end":1131,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265376,"byte_end":265387,"line_start":1132,"line_end":1132,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265943,"byte_end":265948,"line_start":1152,"line_end":1152,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265540,"byte_end":265628,"line_start":1140,"line_end":1140,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265633,"byte_end":265636,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265641,"byte_end":265716,"line_start":1142,"line_end":1142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265721,"byte_end":265724,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265729,"byte_end":265740,"line_start":1144,"line_end":1144,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265745,"byte_end":265769,"line_start":1145,"line_end":1145,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265774,"byte_end":265788,"line_start":1146,"line_end":1146,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265793,"byte_end":265796,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).floor(), size3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265801,"byte_end":265889,"line_start":1148,"line_end":1148,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265894,"byte_end":265901,"line_start":1149,"line_end":1149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265906,"byte_end":265915,"line_start":1150,"line_end":1150,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":265920,"byte_end":265931,"line_start":1151,"line_end":1151,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2271},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266155,"byte_end":266161,"line_start":1160,"line_end":1160,"column_start":12,"column_end":18},"name":"volume","qualname":"<Size3D<T, U>>::volume","value":"pub fn volume(Self) -> T where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of all components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of all components","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266089,"byte_end":266143,"line_start":1159,"line_end":1159,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266944,"byte_end":266948,"line_start":1185,"line_end":1185,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this size and another size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266274,"byte_end":266334,"line_start":1167,"line_end":1167,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266339,"byte_end":266342,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266347,"byte_end":266360,"line_start":1169,"line_end":1169,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266365,"byte_end":266368,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266373,"byte_end":266384,"line_start":1171,"line_end":1171,"column_start":5,"column_end":16}},{"value":"/ use euclid::size3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266389,"byte_end":266411,"line_start":1172,"line_end":1172,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size3D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266416,"byte_end":266448,"line_start":1173,"line_end":1173,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266453,"byte_end":266456,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ let from: Size3D<_> = size3(0.0, 10.0, -1.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266461,"byte_end":266510,"line_start":1175,"line_end":1175,"column_start":5,"column_end":54}},{"value":"/ let to:  Size3D<_> = size3(8.0, -4.0,  0.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266515,"byte_end":266563,"line_start":1176,"line_end":1176,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266568,"byte_end":266571,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266576,"byte_end":266638,"line_start":1178,"line_end":1178,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266643,"byte_end":266705,"line_start":1179,"line_end":1179,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266710,"byte_end":266772,"line_start":1180,"line_end":1180,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266777,"byte_end":266839,"line_start":1181,"line_end":1181,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size3(16.0, -18.0,  1.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266844,"byte_end":266906,"line_start":1182,"line_end":1182,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266911,"byte_end":266918,"line_start":1183,"line_end":1183,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":266923,"byte_end":266932,"line_start":1184,"line_end":1184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2276},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267570,"byte_end":267574,"line_start":1201,"line_end":1201,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Size3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267190,"byte_end":267264,"line_start":1195,"line_end":1195,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267269,"byte_end":267272,"line_start":1196,"line_end":1196,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267277,"byte_end":267364,"line_start":1197,"line_end":1197,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267369,"byte_end":267457,"line_start":1198,"line_end":1198,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267462,"byte_end":267544,"line_start":1199,"line_end":1199,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267549,"byte_end":267558,"line_start":1200,"line_end":1200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2278},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268036,"byte_end":268044,"line_start":1210,"line_end":1210,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Size3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267661,"byte_end":267744,"line_start":1205,"line_end":1205,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267749,"byte_end":267752,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267757,"byte_end":267844,"line_start":1207,"line_end":1207,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267849,"byte_end":267937,"line_start":1208,"line_end":1208,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267942,"byte_end":268024,"line_start":1209,"line_end":1209,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2280},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268457,"byte_end":268463,"line_start":1225,"line_end":1225,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Size3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268403,"byte_end":268431,"line_start":1223,"line_end":1223,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268436,"byte_end":268445,"line_start":1224,"line_end":1224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2281},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268575,"byte_end":268581,"line_start":1231,"line_end":1231,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Size3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268521,"byte_end":268549,"line_start":1229,"line_end":1229,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268554,"byte_end":268563,"line_start":1230,"line_end":1230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268930,"byte_end":268938,"line_start":1241,"line_end":1241,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Size3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268639,"byte_end":268696,"line_start":1235,"line_end":1235,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268701,"byte_end":268704,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268709,"byte_end":268784,"line_start":1237,"line_end":1237,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268789,"byte_end":268863,"line_start":1238,"line_end":1238,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268868,"byte_end":268904,"line_start":1239,"line_end":1239,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268909,"byte_end":268918,"line_start":1240,"line_end":1240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269288,"byte_end":269294,"line_start":1251,"line_end":1251,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Size3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":268998,"byte_end":269054,"line_start":1245,"line_end":1245,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269059,"byte_end":269062,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269067,"byte_end":269142,"line_start":1247,"line_end":1247,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269147,"byte_end":269221,"line_start":1248,"line_end":1248,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269226,"byte_end":269262,"line_start":1249,"line_end":1249,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269267,"byte_end":269276,"line_start":1250,"line_end":1250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2284},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269642,"byte_end":269648,"line_start":1261,"line_end":1261,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Size3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269352,"byte_end":269408,"line_start":1255,"line_end":1255,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269413,"byte_end":269416,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269421,"byte_end":269496,"line_start":1257,"line_end":1257,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269501,"byte_end":269575,"line_start":1258,"line_end":1258,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269580,"byte_end":269616,"line_start":1259,"line_end":1259,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269621,"byte_end":269630,"line_start":1260,"line_end":1260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2285},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269996,"byte_end":270002,"line_start":1271,"line_end":1271,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Size3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269706,"byte_end":269762,"line_start":1265,"line_end":1265,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269767,"byte_end":269770,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269775,"byte_end":269850,"line_start":1267,"line_end":1267,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269855,"byte_end":269929,"line_start":1268,"line_end":1268,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269934,"byte_end":269970,"line_start":1269,"line_end":1269,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":269975,"byte_end":269984,"line_start":1270,"line_end":1270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270364,"byte_end":270367,"line_start":1282,"line_end":1282,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size3D<T, U>>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270096,"byte_end":270146,"line_start":1277,"line_end":1277,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270151,"byte_end":270154,"line_start":1278,"line_end":1278,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270159,"byte_end":270247,"line_start":1279,"line_end":1279,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270252,"byte_end":270255,"line_start":1280,"line_end":1280,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270260,"byte_end":270352,"line_start":1281,"line_end":1281,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270571,"byte_end":270582,"line_start":1287,"line_end":1287,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size3D<T, U>>::is_positive","value":"pub fn is_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components is positive and `false` any component is zero or negative.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270464,"byte_end":270559,"line_start":1286,"line_end":1286,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270848,"byte_end":270851,"line_start":1295,"line_end":1295,"column_start":12,"column_end":15},"name":"min","qualname":"<Size3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270740,"byte_end":270822,"line_start":1293,"line_end":1293,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270827,"byte_end":270836,"line_start":1294,"line_end":1294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2295},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271153,"byte_end":271156,"line_start":1305,"line_end":1305,"column_start":12,"column_end":15},"name":"max","qualname":"<Size3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271045,"byte_end":271127,"line_start":1303,"line_end":1303,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271132,"byte_end":271141,"line_start":1304,"line_end":1304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271543,"byte_end":271548,"line_start":1318,"line_end":1318,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271350,"byte_end":271419,"line_start":1313,"line_end":1313,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271424,"byte_end":271460,"line_start":1314,"line_end":1314,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271465,"byte_end":271468,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271473,"byte_end":271517,"line_start":1316,"line_end":1316,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271522,"byte_end":271531,"line_start":1317,"line_end":1317,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2297},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271774,"byte_end":271782,"line_start":1327,"line_end":1327,"column_start":12,"column_end":20},"name":"contains","qualname":"<Size3D<T, U>>::contains","value":"pub fn contains(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271753,"byte_end":271762,"line_start":1326,"line_end":1326,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2298},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272008,"byte_end":272020,"line_start":1333,"line_end":1333,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size3D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":271918,"byte_end":271996,"line_start":1332,"line_end":1332,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272315,"byte_end":272325,"line_start":1342,"line_end":1342,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size3D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272227,"byte_end":272303,"line_start":1341,"line_end":1341,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272613,"byte_end":272621,"line_start":1351,"line_end":1351,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Size3D<T, U>>::is_empty","value":"pub fn is_empty(Self) -> bool where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero, negative or NaN.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272532,"byte_end":272601,"line_start":1350,"line_end":1350,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2304},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272905,"byte_end":272910,"line_start":1362,"line_end":1362,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size3D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272822,"byte_end":272893,"line_start":1361,"line_end":1361,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2305},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273207,"byte_end":273216,"line_start":1371,"line_end":1371,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size3D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273120,"byte_end":273195,"line_start":1370,"line_end":1370,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2423},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":279171,"byte_end":279176,"line_start":1627,"line_end":1627,"column_start":14,"column_end":19},"name":"size3","qualname":"::size::size3","value":"pub const fn size3<T, U>(T, T, T) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size3D::new(w, h, d)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size3D::new(w, h, d)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":279106,"byte_end":279147,"line_start":1625,"line_end":1625,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":279148,"byte_end":279157,"line_start":1626,"line_end":1626,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2457},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288030,"byte_end":288041,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"Transform2D","qualname":"::transform2d::Transform2D","value":"Transform2D { m11, m12, m21, m22, m31, m32, _unit }","parent":null,"children":[{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467}],"decl_id":null,"docs":" A 2d transform represented by a column-major 3 by 3 matrix, compressed down to 3 by 2.","sig":null,"attributes":[{"value":"/ A 2d transform represented by a column-major 3 by 3 matrix, compressed down to 3 by 2.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":286542,"byte_end":286632,"line_start":32,"line_end":32,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":286633,"byte_end":286636,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":286637,"byte_end":286724,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":286725,"byte_end":286768,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform2D<f32, WorldSpace, ScreenSpace>::transform_point4d`","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":286769,"byte_end":286848,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ takes a `Point2D<f32, WorldSpace>` and returns a `Point2D<f32, ScreenSpace>`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":286849,"byte_end":286930,"line_start":37,"line_end":37,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":286931,"byte_end":286934,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":286935,"byte_end":287020,"line_start":39,"line_end":39,"column_start":1,"column_end":86}},{"value":"/ Pre-transformations (`pre_*` methods) correspond to adding an operation that is","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287021,"byte_end":287104,"line_start":40,"line_end":40,"column_start":1,"column_end":84}},{"value":"/ applied before the rest of the transformation, while post-transformations (`then_*`","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287105,"byte_end":287192,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/ methods) add an operation that is applied after.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287193,"byte_end":287245,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287246,"byte_end":287249,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The matrix representation is conceptually equivalent to a 3 by 3 matrix transformation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287250,"byte_end":287340,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ compressed to 3 by 2 with the components that aren't needed to describe the set of 2d","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287341,"byte_end":287430,"line_start":45,"line_end":45,"column_start":1,"column_end":90}},{"value":"/ transformations we are interested in implicitly defined:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287431,"byte_end":287491,"line_start":46,"line_end":46,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287492,"byte_end":287495,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287496,"byte_end":287507,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"/  | m11 m12 0 |   |x|   |x'|","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287508,"byte_end":287539,"line_start":49,"line_end":49,"column_start":1,"column_end":32}},{"value":"/  | m21 m22 0 | x |y| = |y'|","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287540,"byte_end":287571,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/  | m31 m32 1 |   |1|   |w |","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287572,"byte_end":287603,"line_start":51,"line_end":51,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287604,"byte_end":287611,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287612,"byte_end":287615,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ When translating Transform2D into general matrix representations, consider that the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287616,"byte_end":287703,"line_start":54,"line_end":54,"column_start":1,"column_end":88}},{"value":"/ representation follows the column-major notation with column vectors.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287704,"byte_end":287777,"line_start":55,"line_end":55,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287778,"byte_end":287781,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The translation terms are m31 and m32.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287782,"byte_end":287824,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":287825,"byte_end":287835,"line_start":58,"line_end":58,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2461},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288065,"byte_end":288068,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform2d::Transform2D::m11","value":"T","parent":{"krate":0,"index":2457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2462},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288077,"byte_end":288080,"line_start":65,"line_end":65,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform2d::Transform2D::m12","value":"T","parent":{"krate":0,"index":2457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2463},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288093,"byte_end":288096,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform2d::Transform2D::m21","value":"T","parent":{"krate":0,"index":2457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2464},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288105,"byte_end":288108,"line_start":66,"line_end":66,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform2d::Transform2D::m22","value":"T","parent":{"krate":0,"index":2457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2465},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288121,"byte_end":288124,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform2d::Transform2D::m31","value":"T","parent":{"krate":0,"index":2457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2466},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288133,"byte_end":288136,"line_start":67,"line_end":67,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform2d::Transform2D::m32","value":"T","parent":{"krate":0,"index":2457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2467},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288168,"byte_end":288173,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform2d::Transform2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2457},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290296,"byte_end":290299,"line_start":148,"line_end":148,"column_start":18,"column_end":21},"name":"new","qualname":"<Transform2D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying its components in using the column-major-column-vector\n matrix notation.","sig":null,"attributes":[{"value":"/ Create a transform specifying its components in using the column-major-column-vector","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289830,"byte_end":289918,"line_start":133,"line_end":133,"column_start":5,"column_end":93}},{"value":"/ matrix notation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289923,"byte_end":289943,"line_start":134,"line_end":134,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289948,"byte_end":289951,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ For example, the translation terms m31 and m32 are the last two parameters parameters.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289956,"byte_end":290046,"line_start":136,"line_end":136,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290051,"byte_end":290054,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290059,"byte_end":290066,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ use euclid::default::Transform2D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290071,"byte_end":290108,"line_start":139,"line_end":139,"column_start":5,"column_end":42}},{"value":"/ let tx = 1.0;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290113,"byte_end":290130,"line_start":140,"line_end":140,"column_start":5,"column_end":22}},{"value":"/ let ty = 2.0;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290135,"byte_end":290152,"line_start":141,"line_end":141,"column_start":5,"column_end":22}},{"value":"/ let translation = Transform2D::new(","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290157,"byte_end":290196,"line_start":142,"line_end":142,"column_start":5,"column_end":44}},{"value":"/   1.0, 0.0,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290201,"byte_end":290216,"line_start":143,"line_end":143,"column_start":5,"column_end":20}},{"value":"/   0.0, 1.0,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290221,"byte_end":290236,"line_start":144,"line_end":144,"column_start":5,"column_end":20}},{"value":"/   tx,  ty,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290241,"byte_end":290255,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ );","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290260,"byte_end":290266,"line_start":146,"line_end":146,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290271,"byte_end":290278,"line_start":147,"line_end":147,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290825,"byte_end":290834,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform2D<T, Src, Dst>>::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290499,"byte_end":290580,"line_start":157,"line_end":157,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290585,"byte_end":290615,"line_start":158,"line_end":158,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290620,"byte_end":290623,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290628,"byte_end":290708,"line_start":160,"line_end":160,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290713,"byte_end":290716,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290721,"byte_end":290799,"line_start":162,"line_end":162,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290804,"byte_end":290813,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291296,"byte_end":291309,"line_start":176,"line_end":176,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform2D<T, Src, Dst>>::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &T) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":290959,"byte_end":291040,"line_start":169,"line_end":169,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291045,"byte_end":291074,"line_start":170,"line_end":170,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291079,"byte_end":291082,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291087,"byte_end":291171,"line_start":172,"line_end":172,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291176,"byte_end":291179,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291184,"byte_end":291270,"line_start":174,"line_end":174,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291275,"byte_end":291284,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2503},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291875,"byte_end":291883,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Transform2D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291506,"byte_end":291561,"line_start":183,"line_end":183,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291566,"byte_end":291569,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in the same order as they are","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291574,"byte_end":291630,"line_start":185,"line_end":185,"column_start":5,"column_end":61}},{"value":"/ specified in `Transform2D::new`, that is following the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291635,"byte_end":291693,"line_start":186,"line_end":186,"column_start":5,"column_end":63}},{"value":"/ column-major-column-vector matrix notation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291698,"byte_end":291745,"line_start":187,"line_end":187,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291750,"byte_end":291753,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found in the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291758,"byte_end":291812,"line_start":189,"line_end":189,"column_start":5,"column_end":59}},{"value":"/ last two slots of the array.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291817,"byte_end":291849,"line_start":190,"line_end":190,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291854,"byte_end":291863,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292431,"byte_end":292450,"line_start":209,"line_end":209,"column_start":12,"column_end":31},"name":"to_array_transposed","qualname":"<Transform2D<T, Src, Dst>>::to_array_transposed","value":"pub fn to_array_transposed(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms transposed.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms transposed.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292029,"byte_end":292095,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292100,"byte_end":292103,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in transposed order from the same order of","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292108,"byte_end":292177,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/ `Transform3D::new` and `Transform3D::to_array`, that is following","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292182,"byte_end":292251,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/ the row-major-column-vector matrix notation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292256,"byte_end":292304,"line_start":204,"line_end":204,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292309,"byte_end":292312,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found at indices 2 and 5","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292317,"byte_end":292383,"line_start":206,"line_end":206,"column_start":5,"column_end":71}},{"value":"/ in the array.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292388,"byte_end":292405,"line_start":207,"line_end":207,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292410,"byte_end":292419,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2507},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292704,"byte_end":292713,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"to_arrays","qualname":"<Transform2D<T, Src, Dst>>::to_arrays","value":"pub fn to_arrays(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array` with elements packed two at a time\n in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array` with elements packed two at a time","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292584,"byte_end":292647,"line_start":216,"line_end":216,"column_start":5,"column_end":68}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292652,"byte_end":292678,"line_start":217,"line_end":217,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292683,"byte_end":292692,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293178,"byte_end":293188,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform2D<T, Src, Dst>>::from_array","value":"pub fn from_array([T; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform providing its components via an array\n of 6 elements instead of as individual parameters.","sig":null,"attributes":[{"value":"/ Create a transform providing its components via an array","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292871,"byte_end":292931,"line_start":227,"line_end":227,"column_start":5,"column_end":65}},{"value":"/ of 6 elements instead of as individual parameters.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292936,"byte_end":292990,"line_start":228,"line_end":228,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":292995,"byte_end":292998,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293003,"byte_end":293053,"line_start":230,"line_end":230,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293058,"byte_end":293120,"line_start":231,"line_end":231,"column_start":5,"column_end":67}},{"value":"/ as `Transform2D::new`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293125,"byte_end":293152,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293157,"byte_end":293166,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2512},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293634,"byte_end":293645,"line_start":249,"line_end":249,"column_start":12,"column_end":23},"name":"from_arrays","qualname":"<Transform2D<T, Src, Dst>>::from_arrays","value":"pub fn from_arrays([[T; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `from_array` with elements packed two at a time\n in an array of arrays.","sig":null,"attributes":[{"value":"/ Equivalent to `from_array` with elements packed two at a time","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293350,"byte_end":293415,"line_start":242,"line_end":242,"column_start":5,"column_end":70}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293420,"byte_end":293446,"line_start":243,"line_end":243,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293451,"byte_end":293454,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293459,"byte_end":293509,"line_start":245,"line_end":245,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293514,"byte_end":293576,"line_start":246,"line_end":246,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293581,"byte_end":293608,"line_start":247,"line_end":247,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293613,"byte_end":293622,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293910,"byte_end":293920,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293830,"byte_end":293884,"line_start":257,"line_end":257,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":293889,"byte_end":293898,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294178,"byte_end":294190,"line_start":269,"line_end":269,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Transform2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294116,"byte_end":294152,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294157,"byte_end":294166,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294457,"byte_end":294468,"line_start":279,"line_end":279,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform2D<T, Src, Dst>>::with_source","value":"pub fn with_source<NewSrc>(&Self) -> Transform2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294371,"byte_end":294431,"line_start":277,"line_end":277,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294436,"byte_end":294445,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294751,"byte_end":294767,"line_start":289,"line_end":289,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform2D<T, Src, Dst>>::with_destination","value":"pub fn with_destination<NewDst>(&Self) -> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294660,"byte_end":294725,"line_start":287,"line_end":287,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294730,"byte_end":294739,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":295023,"byte_end":295028,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Transform2D<T, Src, Dst>>::to_3d","value":"pub fn to_3d(&Self) -> Transform3D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create a 3D transform from the current transform\n","sig":null,"attributes":[{"value":"/ Create a 3D transform from the current transform","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":294959,"byte_end":295011,"line_start":297,"line_end":297,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":295365,"byte_end":295369,"line_start":309,"line_end":309,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform2D<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Transform2D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":295265,"byte_end":295339,"line_start":307,"line_end":307,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":295344,"byte_end":295353,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":295564,"byte_end":295572,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform2D<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Transform2D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":295469,"byte_end":295552,"line_start":313,"line_end":313,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296348,"byte_end":296356,"line_start":344,"line_end":344,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an identity matrix:","sig":null,"attributes":[{"value":"/ Create an identity matrix:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296220,"byte_end":296250,"line_start":336,"line_end":336,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296255,"byte_end":296258,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296263,"byte_end":296274,"line_start":338,"line_end":338,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296279,"byte_end":296286,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296291,"byte_end":296298,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296303,"byte_end":296310,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296315,"byte_end":296322,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296327,"byte_end":296336,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297049,"byte_end":297053,"line_start":368,"line_end":368,"column_start":12,"column_end":16},"name":"then","qualname":"<Transform2D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Transform2D<T, Dst, NewDst>)\n-> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296895,"byte_end":296976,"line_start":365,"line_end":365,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296981,"byte_end":297021,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297026,"byte_end":297037,"line_start":367,"line_end":367,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2546},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297799,"byte_end":297810,"line_start":395,"line_end":395,"column_start":12,"column_end":23},"name":"translation","qualname":"<Transform2D<T, Src, Dst>>::translation","value":"pub fn translation(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d translation transform:","sig":null,"attributes":[{"value":"/ Create a 2d translation transform:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297663,"byte_end":297701,"line_start":387,"line_end":387,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297706,"byte_end":297709,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297714,"byte_end":297725,"line_start":389,"line_end":389,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297730,"byte_end":297737,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297742,"byte_end":297749,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ x y","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297754,"byte_end":297761,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297766,"byte_end":297773,"line_start":393,"line_end":393,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297778,"byte_end":297787,"line_start":394,"line_end":394,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298137,"byte_end":298151,"line_start":409,"line_end":409,"column_start":12,"column_end":26},"name":"then_translate","qualname":"<Transform2D<T, Src, Dst>>::then_translate","value":"pub fn then_translate(&Self, Vector2D<T, Dst>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation after self's transformation and returns the resulting transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298005,"byte_end":298095,"line_start":406,"line_end":406,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298100,"byte_end":298109,"line_start":407,"line_end":407,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298114,"byte_end":298125,"line_start":408,"line_end":408,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2550},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298456,"byte_end":298469,"line_start":419,"line_end":419,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform2D<T, Src, Dst>>::pre_translate","value":"pub fn pre_translate(&Self, Vector2D<T, Src>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation before self's transformation and returns the resulting transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298323,"byte_end":298414,"line_start":416,"line_end":416,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298419,"byte_end":298428,"line_start":417,"line_end":417,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298433,"byte_end":298444,"line_start":418,"line_end":418,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298897,"byte_end":298905,"line_start":434,"line_end":434,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Transform2D<T, Src, Dst>>::rotation","value":"pub fn rotation(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation transform.\n","sig":null,"attributes":[{"value":"/ Returns a rotation transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298838,"byte_end":298871,"line_start":432,"line_end":432,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298876,"byte_end":298885,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2556},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299282,"byte_end":299293,"line_start":448,"line_end":448,"column_start":12,"column_end":23},"name":"then_rotate","qualname":"<Transform2D<T, Src, Dst>>::then_rotate","value":"pub fn then_rotate(&Self, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation after self's transformation and returns the resulting transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299153,"byte_end":299240,"line_start":445,"line_end":445,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299245,"byte_end":299254,"line_start":446,"line_end":446,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299259,"byte_end":299270,"line_start":447,"line_end":447,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299518,"byte_end":299528,"line_start":455,"line_end":455,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform2D<T, Src, Dst>>::pre_rotate","value":"pub fn pre_rotate(&Self, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation before self's transformation and returns the resulting transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299388,"byte_end":299476,"line_start":452,"line_end":452,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299481,"byte_end":299490,"line_start":453,"line_end":453,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299495,"byte_end":299506,"line_start":454,"line_end":454,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299860,"byte_end":299865,"line_start":470,"line_end":470,"column_start":12,"column_end":17},"name":"scale","qualname":"<Transform2D<T, Src, Dst>>::scale","value":"pub fn scale(T, T) -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d scale transform:","sig":null,"attributes":[{"value":"/ Create a 2d scale transform:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299730,"byte_end":299762,"line_start":462,"line_end":462,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299767,"byte_end":299770,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299775,"byte_end":299786,"line_start":464,"line_end":464,"column_start":5,"column_end":16}},{"value":"/ x 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299791,"byte_end":299798,"line_start":465,"line_end":465,"column_start":5,"column_end":12}},{"value":"/ 0 y","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299803,"byte_end":299810,"line_start":466,"line_end":466,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299815,"byte_end":299822,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299827,"byte_end":299834,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299839,"byte_end":299848,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2564},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300190,"byte_end":300200,"line_start":486,"line_end":486,"column_start":12,"column_end":22},"name":"then_scale","qualname":"<Transform2D<T, Src, Dst>>::then_scale","value":"pub fn then_scale(&Self, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T> + Zero","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale after self's transformation and returns the resulting transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300064,"byte_end":300148,"line_start":483,"line_end":483,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300153,"byte_end":300162,"line_start":484,"line_end":484,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300167,"byte_end":300178,"line_start":485,"line_end":485,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2565},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300487,"byte_end":300496,"line_start":496,"line_end":496,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform2D<T, Src, Dst>>::pre_scale","value":"pub fn pre_scale(&Self, T, T) -> Self where T: Copy + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale before self's transformation and returns the resulting transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300360,"byte_end":300445,"line_start":493,"line_end":493,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300450,"byte_end":300459,"line_start":494,"line_end":494,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300464,"byte_end":300475,"line_start":495,"line_end":495,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2570},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300988,"byte_end":301003,"line_start":516,"line_end":516,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Transform2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this transform.\n","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300888,"byte_end":300946,"line_start":513,"line_end":513,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300951,"byte_end":300960,"line_start":514,"line_end":514,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300965,"byte_end":300976,"line_start":515,"line_end":515,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301324,"byte_end":301340,"line_start":526,"line_end":526,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Transform2D<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this matrix.\n","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this matrix.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301226,"byte_end":301282,"line_start":523,"line_end":523,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301287,"byte_end":301296,"line_start":524,"line_end":524,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301301,"byte_end":301312,"line_start":525,"line_end":525,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301660,"byte_end":301682,"line_start":535,"line_end":535,"column_start":12,"column_end":34},"name":"outer_transformed_rect","qualname":"<Transform2D<T, Src, Dst>>::outer_transformed_rect","value":"pub fn outer_transformed_rect(&Self, &Rect<T, Src>) -> Rect<T, Dst> where\nT: Sub<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301504,"byte_end":301599,"line_start":531,"line_end":531,"column_start":5,"column_end":100}},{"value":"/ transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301604,"byte_end":301618,"line_start":532,"line_end":532,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301623,"byte_end":301632,"line_start":533,"line_end":533,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":301637,"byte_end":301648,"line_start":534,"line_end":534,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2573},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302237,"byte_end":302258,"line_start":554,"line_end":554,"column_start":12,"column_end":33},"name":"outer_transformed_box","qualname":"<Transform2D<T, Src, Dst>>::outer_transformed_box","value":"pub fn outer_transformed_box(&Self, &Box2D<T, Src>) -> Box2D<T, Dst> where\nT: Sub<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a box that encompasses the result of transforming the given box by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302093,"byte_end":302176,"line_start":550,"line_end":550,"column_start":5,"column_end":88}},{"value":"/ transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302181,"byte_end":302195,"line_start":551,"line_end":551,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302200,"byte_end":302209,"line_start":552,"line_end":552,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302214,"byte_end":302225,"line_start":553,"line_end":553,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2578},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302837,"byte_end":302848,"line_start":573,"line_end":573,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform2D<T, Src, Dst>>::determinant","value":"pub fn determinant(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes and returns the determinant of this transform.\n","sig":null,"attributes":[{"value":"/ Computes and returns the determinant of this transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302766,"byte_end":302825,"line_start":572,"line_end":572,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":303018,"byte_end":303031,"line_start":579,"line_end":579,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform2D<T, Src, Dst>>::is_invertible","value":"pub fn is_invertible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302924,"byte_end":302992,"line_start":577,"line_end":577,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302997,"byte_end":303006,"line_start":578,"line_end":578,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2580},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":303177,"byte_end":303184,"line_start":585,"line_end":585,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Option<Transform2D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":303103,"byte_end":303149,"line_start":583,"line_end":583,"column_start":5,"column_end":51}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":303154,"byte_end":303165,"line_start":584,"line_end":584,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2636},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312232,"byte_end":312243,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"Transform3D","qualname":"::transform3d::Transform3D","value":"Transform3D { m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44, _unit }","parent":null,"children":[{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656}],"decl_id":null,"docs":" A 3d transform stored as a column-major 4 by 4 matrix.","sig":null,"attributes":[{"value":"/ A 3d transform stored as a column-major 4 by 4 matrix.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":310961,"byte_end":311019,"line_start":35,"line_end":35,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311020,"byte_end":311023,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311024,"byte_end":311111,"line_start":37,"line_end":37,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311112,"byte_end":311155,"line_start":38,"line_end":38,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform3D<f32, WorldSpace, ScreenSpace>::transform_point3d`","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311156,"byte_end":311235,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ takes a `Point3D<f32, WorldSpace>` and returns a `Point3D<f32, ScreenSpace>`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311236,"byte_end":311317,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311318,"byte_end":311321,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311322,"byte_end":311407,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/ Pre-transformations (`pre_*` methods) correspond to adding an operation that is","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311408,"byte_end":311491,"line_start":43,"line_end":43,"column_start":1,"column_end":84}},{"value":"/ applied before the rest of the transformation, while post-transformations (`then_*`","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311492,"byte_end":311579,"line_start":44,"line_end":44,"column_start":1,"column_end":88}},{"value":"/ methods) add an operation that is applied after.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311580,"byte_end":311632,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311633,"byte_end":311636,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ When translating Transform3D into general matrix representations, consider that the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311637,"byte_end":311724,"line_start":47,"line_end":47,"column_start":1,"column_end":88}},{"value":"/ representation follows the column major notation with column vectors.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311725,"byte_end":311798,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311799,"byte_end":311802,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311803,"byte_end":311814,"line_start":50,"line_end":50,"column_start":1,"column_end":12}},{"value":"/  |x'|   | m11 m12 m13 m14 |   |x|","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311815,"byte_end":311852,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/  |y'|   | m21 m22 m23 m24 |   |y|","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311853,"byte_end":311890,"line_start":52,"line_end":52,"column_start":1,"column_end":38}},{"value":"/  |z'| = | m31 m32 m33 m34 | x |y|","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311891,"byte_end":311928,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/  |w |   | m41 m42 m43 m44 |   |1|","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311929,"byte_end":311966,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311967,"byte_end":311974,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311975,"byte_end":311978,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The translation terms are m41, m42 and m43.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":311979,"byte_end":312026,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312027,"byte_end":312037,"line_start":58,"line_end":58,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2640},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312267,"byte_end":312270,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform3d::Transform3D::m11","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2641},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312279,"byte_end":312282,"line_start":65,"line_end":65,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform3d::Transform3D::m12","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2642},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312291,"byte_end":312294,"line_start":65,"line_end":65,"column_start":33,"column_end":36},"name":"m13","qualname":"::transform3d::Transform3D::m13","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2643},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312303,"byte_end":312306,"line_start":65,"line_end":65,"column_start":45,"column_end":48},"name":"m14","qualname":"::transform3d::Transform3D::m14","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2644},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312319,"byte_end":312322,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform3d::Transform3D::m21","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2645},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312331,"byte_end":312334,"line_start":66,"line_end":66,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform3d::Transform3D::m22","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2646},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312343,"byte_end":312346,"line_start":66,"line_end":66,"column_start":33,"column_end":36},"name":"m23","qualname":"::transform3d::Transform3D::m23","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2647},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312355,"byte_end":312358,"line_start":66,"line_end":66,"column_start":45,"column_end":48},"name":"m24","qualname":"::transform3d::Transform3D::m24","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2648},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312371,"byte_end":312374,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform3d::Transform3D::m31","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2649},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312383,"byte_end":312386,"line_start":67,"line_end":67,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform3d::Transform3D::m32","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2650},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312395,"byte_end":312398,"line_start":67,"line_end":67,"column_start":33,"column_end":36},"name":"m33","qualname":"::transform3d::Transform3D::m33","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2651},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312407,"byte_end":312410,"line_start":67,"line_end":67,"column_start":45,"column_end":48},"name":"m34","qualname":"::transform3d::Transform3D::m34","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2652},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312423,"byte_end":312426,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"m41","qualname":"::transform3d::Transform3D::m41","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2653},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312435,"byte_end":312438,"line_start":68,"line_end":68,"column_start":21,"column_end":24},"name":"m42","qualname":"::transform3d::Transform3D::m42","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2654},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312447,"byte_end":312450,"line_start":68,"line_end":68,"column_start":33,"column_end":36},"name":"m43","qualname":"::transform3d::Transform3D::m43","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2655},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312459,"byte_end":312462,"line_start":68,"line_end":68,"column_start":45,"column_end":48},"name":"m44","qualname":"::transform3d::Transform3D::m44","value":"T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2656},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":312494,"byte_end":312499,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform3d::Transform3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2685},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316257,"byte_end":316260,"line_start":203,"line_end":203,"column_start":18,"column_end":21},"name":"new","qualname":"<Transform3D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying all of it's component as a 4 by 4 matrix.","sig":null,"attributes":[{"value":"/ Create a transform specifying all of it's component as a 4 by 4 matrix.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315574,"byte_end":315649,"line_start":184,"line_end":184,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315654,"byte_end":315657,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Components are specified following column-major-column-vector matrix notation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315662,"byte_end":315744,"line_start":186,"line_end":186,"column_start":5,"column_end":87}},{"value":"/ For example, the translation terms m41, m42, m43 are the 13rd, 14th and 15th parameters.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315749,"byte_end":315841,"line_start":187,"line_end":187,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315846,"byte_end":315849,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315854,"byte_end":315861,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ use euclid::default::Transform3D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315866,"byte_end":315903,"line_start":190,"line_end":190,"column_start":5,"column_end":42}},{"value":"/ let tx = 1.0;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315908,"byte_end":315925,"line_start":191,"line_end":191,"column_start":5,"column_end":22}},{"value":"/ let ty = 2.0;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315930,"byte_end":315947,"line_start":192,"line_end":192,"column_start":5,"column_end":22}},{"value":"/ let tz = 3.0;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315952,"byte_end":315969,"line_start":193,"line_end":193,"column_start":5,"column_end":22}},{"value":"/ let translation = Transform3D::new(","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315974,"byte_end":316013,"line_start":194,"line_end":194,"column_start":5,"column_end":44}},{"value":"/   1.0, 0.0, 0.0, 0.0,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316018,"byte_end":316043,"line_start":195,"line_end":195,"column_start":5,"column_end":30}},{"value":"/   0.0, 1.0, 0.0, 0.0,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316048,"byte_end":316073,"line_start":196,"line_end":196,"column_start":5,"column_end":30}},{"value":"/   0.0, 0.0, 1.0, 0.0,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316078,"byte_end":316103,"line_start":197,"line_end":197,"column_start":5,"column_end":30}},{"value":"/   tx,  ty,  tz,  1.0,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316108,"byte_end":316133,"line_start":198,"line_end":198,"column_start":5,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316138,"byte_end":316144,"line_start":199,"line_end":199,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316149,"byte_end":316156,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316161,"byte_end":316170,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2686},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317055,"byte_end":317061,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"new_2d","qualname":"<Transform3D<T, Src, Dst>>::new_2d","value":"pub fn new_2d(T, T, T, T, T, T) -> Self where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create a transform representing a 2d transformation from the components\n of a 2 by 3 matrix transformation.","sig":null,"attributes":[{"value":"/ Create a transform representing a 2d transformation from the components","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316641,"byte_end":316716,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/ of a 2 by 3 matrix transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316721,"byte_end":316759,"line_start":219,"line_end":219,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316764,"byte_end":316767,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Components follow the column-major-column-vector notation (m41 and m42","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316772,"byte_end":316846,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ representating the translation terms).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316851,"byte_end":316893,"line_start":222,"line_end":222,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316898,"byte_end":316901,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316906,"byte_end":316917,"line_start":224,"line_end":224,"column_start":5,"column_end":16}},{"value":"/ m11  m12   0   0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316922,"byte_end":316942,"line_start":225,"line_end":225,"column_start":5,"column_end":25}},{"value":"/ m21  m22   0   0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316947,"byte_end":316967,"line_start":226,"line_end":226,"column_start":5,"column_end":25}},{"value":"/   0    0   1   0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316972,"byte_end":316992,"line_start":227,"line_end":227,"column_start":5,"column_end":25}},{"value":"/ m41  m42   0   1","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":316997,"byte_end":317017,"line_start":228,"line_end":228,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317022,"byte_end":317029,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317034,"byte_end":317043,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2689},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317581,"byte_end":317586,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"is_2d","qualname":"<Transform3D<T, Src, Dst>>::is_2d","value":"pub fn is_2d(&Self) -> bool where T: Zero + One + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this transform can be represented with a `Transform2D`.","sig":null,"attributes":[{"value":"/ Returns `true` if this transform can be represented with a `Transform2D`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317402,"byte_end":317479,"line_start":247,"line_end":247,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317484,"byte_end":317487,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#2d-transform>","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317492,"byte_end":317555,"line_start":249,"line_end":249,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317560,"byte_end":317569,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318373,"byte_end":318381,"line_start":274,"line_end":274,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Transform3D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317993,"byte_end":318048,"line_start":265,"line_end":265,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318053,"byte_end":318056,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in the same order as they are","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318061,"byte_end":318117,"line_start":267,"line_end":267,"column_start":5,"column_end":61}},{"value":"/ specified in `Transform3D::new`, that is following the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318122,"byte_end":318180,"line_start":268,"line_end":268,"column_start":5,"column_end":63}},{"value":"/ column-major-column-vector matrix notation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318185,"byte_end":318232,"line_start":269,"line_end":269,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318237,"byte_end":318240,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found on the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318245,"byte_end":318299,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/ 13th, 14th and 15th slots of the array.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318304,"byte_end":318347,"line_start":272,"line_end":272,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318352,"byte_end":318361,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319046,"byte_end":319065,"line_start":292,"line_end":292,"column_start":12,"column_end":31},"name":"to_array_transposed","qualname":"<Transform3D<T, Src, Dst>>::to_array_transposed","value":"pub fn to_array_transposed(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms transposed.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms transposed.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318640,"byte_end":318706,"line_start":283,"line_end":283,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318711,"byte_end":318714,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in transposed order from the same order of","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318719,"byte_end":318788,"line_start":285,"line_end":285,"column_start":5,"column_end":74}},{"value":"/ `Transform3D::new` and `Transform3D::to_array`, that is following","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318793,"byte_end":318862,"line_start":286,"line_end":286,"column_start":5,"column_end":74}},{"value":"/ the row-major-column-vector matrix notation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318867,"byte_end":318915,"line_start":287,"line_end":287,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318920,"byte_end":318923,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found at indices 3, 7 and 11","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":318928,"byte_end":318998,"line_start":289,"line_end":289,"column_start":5,"column_end":75}},{"value":"/ of the array.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319003,"byte_end":319020,"line_start":290,"line_end":290,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319025,"byte_end":319034,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319445,"byte_end":319454,"line_start":304,"line_end":304,"column_start":12,"column_end":21},"name":"to_arrays","qualname":"<Transform3D<T, Src, Dst>>::to_arrays","value":"pub fn to_arrays(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array` with elements packed four at a time\n in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array` with elements packed four at a time","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319324,"byte_end":319388,"line_start":301,"line_end":301,"column_start":5,"column_end":69}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319393,"byte_end":319419,"line_start":302,"line_end":302,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319424,"byte_end":319433,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2701},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319857,"byte_end":319877,"line_start":316,"line_end":316,"column_start":12,"column_end":32},"name":"to_arrays_transposed","qualname":"<Transform3D<T, Src, Dst>>::to_arrays_transposed","value":"pub fn to_arrays_transposed(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array_transposed` with elements packed\n four at a time in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array_transposed` with elements packed","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319725,"byte_end":319785,"line_start":313,"line_end":313,"column_start":5,"column_end":65}},{"value":"/ four at a time in an array of arrays.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319790,"byte_end":319831,"line_start":314,"line_end":314,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":319836,"byte_end":319845,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320456,"byte_end":320466,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform3D<T, Src, Dst>>::from_array","value":"pub fn from_array([T; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform providing its components via an array\n of 16 elements instead of as individual parameters.","sig":null,"attributes":[{"value":"/ Create a transform providing its components via an array","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320148,"byte_end":320208,"line_start":325,"line_end":325,"column_start":5,"column_end":65}},{"value":"/ of 16 elements instead of as individual parameters.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320213,"byte_end":320268,"line_start":326,"line_end":326,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320273,"byte_end":320276,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320281,"byte_end":320331,"line_start":328,"line_end":328,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320336,"byte_end":320398,"line_start":329,"line_end":329,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320403,"byte_end":320430,"line_start":330,"line_end":330,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320435,"byte_end":320444,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2706},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":321040,"byte_end":321051,"line_start":348,"line_end":348,"column_start":12,"column_end":23},"name":"from_arrays","qualname":"<Transform3D<T, Src, Dst>>::from_arrays","value":"pub fn from_arrays([[T; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `from_array` with elements packed four at a time\n in an array of arrays.","sig":null,"attributes":[{"value":"/ Equivalent to `from_array` with elements packed four at a time","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320755,"byte_end":320821,"line_start":341,"line_end":341,"column_start":5,"column_end":71}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320826,"byte_end":320852,"line_start":342,"line_end":342,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320857,"byte_end":320860,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320865,"byte_end":320915,"line_start":344,"line_end":344,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320920,"byte_end":320982,"line_start":345,"line_end":345,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":320987,"byte_end":321014,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":321019,"byte_end":321028,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2709},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":321440,"byte_end":321452,"line_start":359,"line_end":359,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Transform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":321378,"byte_end":321414,"line_start":357,"line_end":357,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":321419,"byte_end":321428,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2710},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":321796,"byte_end":321806,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":321716,"byte_end":321770,"line_start":368,"line_end":368,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":321775,"byte_end":321784,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2711},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":322201,"byte_end":322212,"line_start":381,"line_end":381,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform3D<T, Src, Dst>>::with_source","value":"pub fn with_source<NewSrc>(&Self) -> Transform3D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":322115,"byte_end":322175,"line_start":379,"line_end":379,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":322180,"byte_end":322189,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2713},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":322607,"byte_end":322623,"line_start":392,"line_end":392,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform3D<T, Src, Dst>>::with_destination","value":"pub fn with_destination<NewDst>(&Self) -> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":322516,"byte_end":322581,"line_start":390,"line_end":390,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":322586,"byte_end":322595,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2715},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323216,"byte_end":323221,"line_start":407,"line_end":407,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Transform3D<T, Src, Dst>>::to_2d","value":"pub fn to_2d(&Self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Create a 2D transform picking the relevant terms from this transform.","sig":null,"attributes":[{"value":"/ Create a 2D transform picking the relevant terms from this transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":322927,"byte_end":323000,"line_start":401,"line_end":401,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323005,"byte_end":323008,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ This method assumes that self represents a 2d transformation, callers","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323013,"byte_end":323086,"line_start":403,"line_end":403,"column_start":5,"column_end":78}},{"value":"/ should check that [`self.is_2d()`] returns `true` beforehand.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323091,"byte_end":323156,"line_start":404,"line_end":404,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323161,"byte_end":323164,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ [`self.is_2d()`]: #method.is_2d","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323169,"byte_end":323204,"line_start":406,"line_end":406,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2720},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323631,"byte_end":323639,"line_start":429,"line_end":429,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity matrix:","sig":null,"attributes":[{"value":"/ Creates an identity matrix:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323474,"byte_end":323505,"line_start":420,"line_end":420,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323510,"byte_end":323513,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323518,"byte_end":323529,"line_start":422,"line_end":422,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323534,"byte_end":323545,"line_start":423,"line_end":423,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323550,"byte_end":323561,"line_start":424,"line_end":424,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323566,"byte_end":323577,"line_start":425,"line_end":425,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323582,"byte_end":323593,"line_start":426,"line_end":426,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323598,"byte_end":323605,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323610,"byte_end":323619,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2722},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324169,"byte_end":324173,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"skew","qualname":"<Transform3D<T, Src, Dst>>::skew","value":"pub fn skew(Angle<T>, Angle<T>) -> Self where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d skew transform.","sig":null,"attributes":[{"value":"/ Create a 2d skew transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324050,"byte_end":324081,"line_start":444,"line_end":444,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324086,"byte_end":324089,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#funcdef-skew>","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324094,"byte_end":324157,"line_start":446,"line_end":446,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2725},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324858,"byte_end":324869,"line_start":473,"line_end":473,"column_start":12,"column_end":23},"name":"perspective","qualname":"<Transform3D<T, Src, Dst>>::perspective","value":"pub fn perspective(T) -> Self where T: Neg<Output = T> + Div<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Create a simple perspective transform, projecting to the plane `z = -d`.","sig":null,"attributes":[{"value":"/ Create a simple perspective transform, projecting to the plane `z = -d`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324560,"byte_end":324636,"line_start":463,"line_end":463,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324641,"byte_end":324644,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324649,"byte_end":324660,"line_start":465,"line_end":465,"column_start":5,"column_end":16}},{"value":"/ 1   0   0   0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324665,"byte_end":324682,"line_start":466,"line_end":466,"column_start":5,"column_end":22}},{"value":"/ 0   1   0   0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324687,"byte_end":324704,"line_start":467,"line_end":467,"column_start":5,"column_end":22}},{"value":"/ 0   0   1 -1/d","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324709,"byte_end":324727,"line_start":468,"line_end":468,"column_start":5,"column_end":23}},{"value":"/ 0   0   0   1","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324732,"byte_end":324749,"line_start":469,"line_end":469,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324754,"byte_end":324761,"line_start":470,"line_end":470,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324766,"byte_end":324769,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms-2/#PerspectiveDefined>.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":324774,"byte_end":324846,"line_start":472,"line_end":472,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2732},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":325579,"byte_end":325583,"line_start":500,"line_end":500,"column_start":12,"column_end":16},"name":"then","qualname":"<Transform3D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Transform3D<T, Dst, NewDst>)\n-> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":325354,"byte_end":325435,"line_start":495,"line_end":495,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":325440,"byte_end":325480,"line_start":496,"line_end":496,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":325485,"byte_end":325488,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to self * mat","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":325493,"byte_end":325551,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":325556,"byte_end":325567,"line_start":499,"line_end":499,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2738},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327767,"byte_end":327778,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"translation","qualname":"<Transform3D<T, Src, Dst>>::translation","value":"pub fn translation(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d translation transform:","sig":null,"attributes":[{"value":"/ Create a 3d translation transform:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327603,"byte_end":327641,"line_start":530,"line_end":530,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327646,"byte_end":327649,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327654,"byte_end":327665,"line_start":532,"line_end":532,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327670,"byte_end":327681,"line_start":533,"line_end":533,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327686,"byte_end":327697,"line_start":534,"line_end":534,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327702,"byte_end":327713,"line_start":535,"line_end":535,"column_start":5,"column_end":16}},{"value":"/ x y z 1","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327718,"byte_end":327729,"line_start":536,"line_end":536,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327734,"byte_end":327741,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327746,"byte_end":327755,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328161,"byte_end":328174,"line_start":553,"line_end":553,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform3D<T, Src, Dst>>::pre_translate","value":"pub fn pre_translate(&Self, Vector3D<T, Src>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied before self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328053,"byte_end":328133,"line_start":551,"line_end":551,"column_start":5,"column_end":85}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328138,"byte_end":328149,"line_start":552,"line_end":552,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328457,"byte_end":328471,"line_start":562,"line_end":562,"column_start":12,"column_end":26},"name":"then_translate","qualname":"<Transform3D<T, Src, Dst>>::then_translate","value":"pub fn then_translate(&Self, Vector3D<T, Dst>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied after self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328350,"byte_end":328429,"line_start":560,"line_end":560,"column_start":5,"column_end":84}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328434,"byte_end":328445,"line_start":561,"line_end":561,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2747},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328984,"byte_end":328992,"line_start":577,"line_end":577,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Transform3D<T, Src, Dst>>::rotation","value":"pub fn rotation(T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d rotation transform from an angle / axis.\n The supplied axis must be normalized.\n","sig":null,"attributes":[{"value":"/ Create a 3d rotation transform from an angle / axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328870,"byte_end":328926,"line_start":575,"line_end":575,"column_start":5,"column_end":61}},{"value":"/ The supplied axis must be normalized.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328931,"byte_end":328972,"line_start":576,"line_end":576,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":329969,"byte_end":329980,"line_start":615,"line_end":615,"column_start":12,"column_end":23},"name":"then_rotate","qualname":"<Transform3D<T, Src, Dst>>::then_rotate","value":"pub fn then_rotate(&Self, T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied after self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":329865,"byte_end":329941,"line_start":613,"line_end":613,"column_start":5,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":329946,"byte_end":329957,"line_start":614,"line_end":614,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2749},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330207,"byte_end":330217,"line_start":621,"line_end":621,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform3D<T, Src, Dst>>::pre_rotate","value":"pub fn pre_rotate(&Self, T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied before self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330102,"byte_end":330179,"line_start":619,"line_end":619,"column_start":5,"column_end":82}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330184,"byte_end":330195,"line_start":620,"line_end":620,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2754},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330629,"byte_end":330634,"line_start":640,"line_end":640,"column_start":12,"column_end":17},"name":"scale","qualname":"<Transform3D<T, Src, Dst>>::scale","value":"pub fn scale(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d scale transform:","sig":null,"attributes":[{"value":"/ Create a 3d scale transform:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330471,"byte_end":330503,"line_start":631,"line_end":631,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330508,"byte_end":330511,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330516,"byte_end":330527,"line_start":633,"line_end":633,"column_start":5,"column_end":16}},{"value":"/ x 0 0 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330532,"byte_end":330543,"line_start":634,"line_end":634,"column_start":5,"column_end":16}},{"value":"/ 0 y 0 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330548,"byte_end":330559,"line_start":635,"line_end":635,"column_start":5,"column_end":16}},{"value":"/ 0 0 z 0","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330564,"byte_end":330575,"line_start":636,"line_end":636,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330580,"byte_end":330591,"line_start":637,"line_end":637,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330596,"byte_end":330603,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330608,"byte_end":330617,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2757},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331011,"byte_end":331020,"line_start":654,"line_end":654,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform3D<T, Src, Dst>>::pre_scale","value":"pub fn pre_scale(&Self, T, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied before self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330909,"byte_end":330983,"line_start":652,"line_end":652,"column_start":5,"column_end":79}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330988,"byte_end":330999,"line_start":653,"line_end":653,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331538,"byte_end":331548,"line_start":668,"line_end":668,"column_start":12,"column_end":22},"name":"then_scale","qualname":"<Transform3D<T, Src, Dst>>::then_scale","value":"pub fn then_scale(&Self, T, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied after self's transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331437,"byte_end":331510,"line_start":666,"line_end":666,"column_start":5,"column_end":78}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331515,"byte_end":331526,"line_start":667,"line_end":667,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2763},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":332063,"byte_end":332092,"line_start":685,"line_end":685,"column_start":12,"column_end":41},"name":"transform_point2d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d_homogeneous","value":"pub fn transform_point2d_homogeneous(&Self, Point2D<T, Src>)\n-> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 2d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 2d point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331861,"byte_end":331938,"line_start":681,"line_end":681,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331943,"byte_end":331946,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331951,"byte_end":332037,"line_start":683,"line_end":683,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":332042,"byte_end":332051,"line_start":684,"line_end":684,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2764},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":332705,"byte_end":332722,"line_start":701,"line_end":701,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, Point2D<T, Src>) -> Option<Point2D<T, Dst>>\nwhere T: Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this transform, if the transform makes sense,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":332460,"byte_end":332551,"line_start":696,"line_end":696,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":332556,"byte_end":332580,"line_start":697,"line_end":697,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":332585,"byte_end":332588,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":332593,"byte_end":332679,"line_start":699,"line_end":699,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":332684,"byte_end":332693,"line_start":700,"line_end":700,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2765},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333440,"byte_end":333458,"line_start":721,"line_end":721,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector2d","value":"pub fn transform_vector2d(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this matrix.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333256,"byte_end":333315,"line_start":717,"line_end":717,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333320,"byte_end":333323,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333328,"byte_end":333414,"line_start":719,"line_end":719,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333419,"byte_end":333428,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2766},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333836,"byte_end":333865,"line_start":732,"line_end":732,"column_start":12,"column_end":41},"name":"transform_point3d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d_homogeneous","value":"pub fn transform_point3d_homogeneous(&Self, Point3D<T, Src>)\n-> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 3d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 3d point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333634,"byte_end":333711,"line_start":728,"line_end":728,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333716,"byte_end":333719,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333724,"byte_end":333810,"line_start":730,"line_end":730,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":333815,"byte_end":333824,"line_start":731,"line_end":731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2767},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334546,"byte_end":334563,"line_start":748,"line_end":748,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, Point3D<T, Src>) -> Option<Point3D<T, Dst>>\nwhere T: Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this transform, if the transform makes sense,","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334301,"byte_end":334392,"line_start":743,"line_end":743,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334397,"byte_end":334421,"line_start":744,"line_end":744,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334426,"byte_end":334429,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334434,"byte_end":334520,"line_start":746,"line_end":746,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334525,"byte_end":334534,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2768},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334936,"byte_end":334954,"line_start":759,"line_end":759,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector3d","value":"pub fn transform_vector3d(&Self, Vector3D<T, Src>) -> Vector3D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this matrix.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334752,"byte_end":334811,"line_start":755,"line_end":755,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334816,"byte_end":334819,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334824,"byte_end":334910,"line_start":757,"line_end":757,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":334915,"byte_end":334924,"line_start":758,"line_end":758,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2769},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":335410,"byte_end":335432,"line_start":769,"line_end":769,"column_start":12,"column_end":34},"name":"outer_transformed_rect","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_rect","value":"pub fn outer_transformed_rect(&Self, &Rect<T, Src>) -> Option<Rect<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":335226,"byte_end":335321,"line_start":767,"line_end":767,"column_start":5,"column_end":100}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":335326,"byte_end":335398,"line_start":768,"line_end":768,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2770},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":336061,"byte_end":336084,"line_start":785,"line_end":785,"column_start":12,"column_end":35},"name":"outer_transformed_box2d","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_box2d","value":"pub fn outer_transformed_box2d(&Self, &Box2D<T, Src>) -> Option<Box2D<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d box that encompasses the result of transforming the given box by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a 2d box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":335886,"byte_end":335972,"line_start":783,"line_end":783,"column_start":5,"column_end":91}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":335977,"byte_end":336049,"line_start":784,"line_end":784,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":336665,"byte_end":336688,"line_start":799,"line_end":799,"column_start":12,"column_end":35},"name":"outer_transformed_box3d","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_box3d","value":"pub fn outer_transformed_box3d(&Self, &Box3D<T, Src>) -> Option<Box3D<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a 3d box that encompasses the result of transforming the given box by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a 3d box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":336490,"byte_end":336576,"line_start":797,"line_end":797,"column_start":5,"column_end":91}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":336581,"byte_end":336653,"line_start":798,"line_end":798,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2776},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":337759,"byte_end":337764,"line_start":828,"line_end":828,"column_start":12,"column_end":17},"name":"ortho","qualname":"<Transform3D<T, Src, Dst>>::ortho","value":"pub fn ortho(T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an orthogonal projection transform.\n","sig":null,"attributes":[{"value":"/ Create an orthogonal projection transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":337701,"byte_end":337747,"line_start":827,"line_end":827,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2777},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":338607,"byte_end":338626,"line_start":847,"line_end":847,"column_start":12,"column_end":31},"name":"is_backface_visible","qualname":"<Transform3D<T, Src, Dst>>::is_backface_visible","value":"pub fn is_backface_visible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether shapes on the XY plane with Z pointing towards the\n screen transformed by this matrix would be facing back.\n","sig":null,"attributes":[{"value":"/ Check whether shapes on the XY plane with Z pointing towards the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":338463,"byte_end":338531,"line_start":845,"line_end":845,"column_start":5,"column_end":73}},{"value":"/ screen transformed by this matrix would be facing back.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":338536,"byte_end":338595,"line_start":846,"line_end":846,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":339127,"byte_end":339140,"line_start":859,"line_end":859,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform3D<T, Src, Dst>>::is_invertible","value":"pub fn is_invertible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":339033,"byte_end":339101,"line_start":857,"line_end":857,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":339106,"byte_end":339115,"line_start":858,"line_end":858,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2779},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":339270,"byte_end":339277,"line_start":864,"line_end":864,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Option<Transform3D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":339212,"byte_end":339258,"line_start":863,"line_end":863,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2780},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":343072,"byte_end":343083,"line_start":944,"line_end":944,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform3D<T, Src, Dst>>::determinant","value":"pub fn determinant(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute the determinant of the transform.\n","sig":null,"attributes":[{"value":"/ Compute the determinant of the transform.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":343015,"byte_end":343060,"line_start":943,"line_end":943,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2781},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":344466,"byte_end":344471,"line_start":973,"line_end":973,"column_start":12,"column_end":17},"name":"mul_s","qualname":"<Transform3D<T, Src, Dst>>::mul_s","value":"pub fn mul_s(&Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies all of the transform's component by a scalar and returns the result.\n","sig":null,"attributes":[{"value":"/ Multiplies all of the transform's component by a scalar and returns the result.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":344355,"byte_end":344438,"line_start":971,"line_end":971,"column_start":5,"column_end":88}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":344443,"byte_end":344454,"line_start":972,"line_end":972,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2782},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":344893,"byte_end":344903,"line_start":983,"line_end":983,"column_start":12,"column_end":22},"name":"from_scale","qualname":"<Transform3D<T, Src, Dst>>::from_scale","value":"pub fn from_scale(Scale<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenience function to create a scale transform from a `Scale`.\n","sig":null,"attributes":[{"value":"/ Convenience function to create a scale transform from a `Scale`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":344813,"byte_end":344881,"line_start":982,"line_end":982,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2787},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":345213,"byte_end":345226,"line_start":993,"line_end":993,"column_start":12,"column_end":25},"name":"project_to_2d","qualname":"<Transform3D<T, Src, Dst>>::project_to_2d","value":"pub fn project_to_2d(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a projection of this transform in 2d space.\n","sig":null,"attributes":[{"value":"/ Returns a projection of this transform in 2d space.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":345146,"byte_end":345201,"line_start":992,"line_end":992,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2792},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":346723,"byte_end":346727,"line_start":1032,"line_end":1032,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform3D<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Transform3D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":346623,"byte_end":346697,"line_start":1030,"line_end":1030,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":346702,"byte_end":346711,"line_start":1031,"line_end":1031,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2794},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":346922,"byte_end":346930,"line_start":1037,"line_end":1037,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform3D<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Transform3D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":346827,"byte_end":346910,"line_start":1036,"line_end":1036,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2800},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348459,"byte_end":348468,"line_start":1068,"line_end":1068,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform3D<T, Src, Dst>>::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348133,"byte_end":348214,"line_start":1061,"line_end":1061,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348219,"byte_end":348249,"line_start":1062,"line_end":1062,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348254,"byte_end":348257,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348262,"byte_end":348342,"line_start":1064,"line_end":1064,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348347,"byte_end":348350,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348355,"byte_end":348433,"line_start":1066,"line_end":1066,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348438,"byte_end":348447,"line_start":1067,"line_end":1067,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2801},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348904,"byte_end":348917,"line_start":1079,"line_end":1079,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform3D<T, Src, Dst>>::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348567,"byte_end":348648,"line_start":1072,"line_end":1072,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348653,"byte_end":348682,"line_start":1073,"line_end":1073,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348687,"byte_end":348690,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348695,"byte_end":348779,"line_start":1075,"line_end":1075,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348784,"byte_end":348787,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348792,"byte_end":348878,"line_start":1077,"line_end":1077,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348883,"byte_end":348892,"line_start":1078,"line_end":1078,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2849},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363047,"byte_end":363060,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"Translation2D","qualname":"::translation::Translation2D","value":"Translation2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2855}],"decl_id":null,"docs":" A 2d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 2d transformation from a space to another that can only express translations.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362146,"byte_end":362229,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362230,"byte_end":362233,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector2D is the ability to cast","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362234,"byte_end":362306,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362307,"byte_end":362353,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362354,"byte_end":362357,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362358,"byte_end":362370,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362371,"byte_end":362374,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362375,"byte_end":362382,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use euclid::{Translation2D, Point2D, point2};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362383,"byte_end":362432,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/ struct ParentSpace;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362433,"byte_end":362456,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ struct ChildSpace;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362457,"byte_end":362479,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"/ type ScrollOffset = Translation2D<i32, ParentSpace, ChildSpace>;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362480,"byte_end":362548,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ type ParentPoint = Point2D<i32, ParentSpace>;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362549,"byte_end":362598,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/ type ChildPoint = Point2D<i32, ChildSpace>;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362599,"byte_end":362646,"line_start":35,"line_end":35,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362647,"byte_end":362650,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let scrolling = ScrollOffset::new(0, 100);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362651,"byte_end":362697,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/ let p1: ParentPoint = point2(0, 0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362698,"byte_end":362737,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/ let p2: ChildPoint = scrolling.transform_point(p1);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362738,"byte_end":362793,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362794,"byte_end":362801,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362802,"byte_end":362805,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":362806,"byte_end":362816,"line_start":42,"line_end":42,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2853},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363084,"byte_end":363085,"line_start":52,"line_end":52,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation2D::x","value":"T","parent":{"krate":0,"index":2849},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2854},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363098,"byte_end":363099,"line_start":53,"line_end":53,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation2D::y","value":"T","parent":{"krate":0,"index":2849},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2855},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363131,"byte_end":363136,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2849},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364379,"byte_end":364382,"line_start":109,"line_end":109,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation2D<T, Src, Dst>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364352,"byte_end":364361,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2885},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364533,"byte_end":364538,"line_start":118,"line_end":118,"column_start":12,"column_end":17},"name":"splat","qualname":"<Translation2D<T, Src, Dst>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364512,"byte_end":364521,"line_start":117,"line_end":117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364795,"byte_end":364803,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (both `x` and `y` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (both `x` and `y` is `zero()`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364708,"byte_end":364769,"line_start":129,"line_end":129,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364774,"byte_end":364783,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2887},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365351,"byte_end":365362,"line_start":149,"line_end":149,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation2D<T, Src, Dst>>::is_identity","value":"pub fn is_identity(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (both x and y is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (both x and y is `zero()`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364898,"byte_end":364963,"line_start":138,"line_end":138,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364968,"byte_end":364971,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364976,"byte_end":364987,"line_start":140,"line_end":140,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation2D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364992,"byte_end":365031,"line_start":141,"line_end":141,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365036,"byte_end":365039,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation2D::<f32>::identity().is_identity(), true);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365044,"byte_end":365113,"line_start":143,"line_end":143,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation2D::new(0, 0).is_identity(), true);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365118,"byte_end":365179,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(Translation2D::new(1, 0).is_identity(), false);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365184,"byte_end":365246,"line_start":145,"line_end":145,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(Translation2D::new(0, 1).is_identity(), false);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365251,"byte_end":365313,"line_start":146,"line_end":146,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365318,"byte_end":365325,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365330,"byte_end":365339,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2888},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365555,"byte_end":365569,"line_start":159,"line_end":159,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation2D<T, Src, Dst>>::transform_size","value":"pub fn transform_size(&Self, Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365499,"byte_end":365529,"line_start":157,"line_end":157,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365534,"byte_end":365543,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2893},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365773,"byte_end":365782,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation2D<T, Src, Dst>>::to_vector","value":"pub fn to_vector(&Self) -> Vector2D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 2D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 2D vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365721,"byte_end":365747,"line_start":165,"line_end":165,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365752,"byte_end":365761,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2894},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365914,"byte_end":365922,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation2D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365852,"byte_end":365888,"line_start":171,"line_end":171,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365893,"byte_end":365902,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2896},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366039,"byte_end":366047,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation2D<T, Src, Dst>>::to_tuple","value":"pub fn to_tuple(&Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365978,"byte_end":366013,"line_start":177,"line_end":177,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366018,"byte_end":366027,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2897},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366183,"byte_end":366193,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366103,"byte_end":366157,"line_start":183,"line_end":183,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366162,"byte_end":366171,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366434,"byte_end":366446,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Translation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366372,"byte_end":366408,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366413,"byte_end":366422,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2899},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366706,"byte_end":366718,"line_start":205,"line_end":205,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation2D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform2D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366622,"byte_end":366680,"line_start":203,"line_end":203,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366685,"byte_end":366694,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2900},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366893,"byte_end":366908,"line_start":214,"line_end":214,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Translation2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366827,"byte_end":366867,"line_start":212,"line_end":212,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":366872,"byte_end":366881,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2901},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367119,"byte_end":367133,"line_start":223,"line_end":223,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation2D<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(&Self, &Rect<T, Src>) -> Rect<T::Output, Dst> where\nT: Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367049,"byte_end":367093,"line_start":221,"line_end":221,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367098,"byte_end":367107,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2902},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367429,"byte_end":367442,"line_start":235,"line_end":235,"column_start":12,"column_end":25},"name":"transform_box","qualname":"<Translation2D<T, Src, Dst>>::transform_box","value":"pub fn transform_box(&Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367362,"byte_end":367403,"line_start":233,"line_end":233,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367408,"byte_end":367417,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2903},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367719,"byte_end":367726,"line_start":247,"line_end":247,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Translation2D<T::Output, Dst, Src> where T: Neg","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367655,"byte_end":367693,"line_start":245,"line_end":245,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367698,"byte_end":367707,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2953},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370011,"byte_end":370024,"line_start":326,"line_end":326,"column_start":12,"column_end":25},"name":"Translation3D","qualname":"::translation::Translation3D","value":"Translation3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2959},{"krate":0,"index":2960}],"decl_id":null,"docs":" A 3d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 3d transformation from a space to another that can only express translations.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369781,"byte_end":369864,"line_start":321,"line_end":321,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369865,"byte_end":369868,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector3D is the ability to cast","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369869,"byte_end":369941,"line_start":323,"line_end":323,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369942,"byte_end":369988,"line_start":324,"line_end":324,"column_start":1,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369989,"byte_end":369999,"line_start":325,"line_end":325,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2957},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370048,"byte_end":370049,"line_start":327,"line_end":327,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation3D::x","value":"T","parent":{"krate":0,"index":2953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2958},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370062,"byte_end":370063,"line_start":328,"line_end":328,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation3D::y","value":"T","parent":{"krate":0,"index":2953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2959},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370076,"byte_end":370077,"line_start":329,"line_end":329,"column_start":9,"column_end":10},"name":"z","qualname":"::translation::Translation3D::z","value":"T","parent":{"krate":0,"index":2953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2960},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370109,"byte_end":370114,"line_start":331,"line_end":331,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371795,"byte_end":371798,"line_start":403,"line_end":403,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation3D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371768,"byte_end":371777,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371970,"byte_end":371975,"line_start":413,"line_end":413,"column_start":12,"column_end":17},"name":"splat","qualname":"<Translation3D<T, Src, Dst>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371949,"byte_end":371958,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372258,"byte_end":372266,"line_start":427,"line_end":427,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (`x`, `y` and `z` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (`x`, `y` and `z` is `zero()`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372171,"byte_end":372232,"line_start":425,"line_end":425,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372237,"byte_end":372246,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372917,"byte_end":372928,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation3D<T, Src, Dst>>::is_identity","value":"pub fn is_identity(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (`x`, `y` and `z` is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (`x`, `y` and `z` is `zero()`).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372381,"byte_end":372450,"line_start":434,"line_end":434,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372455,"byte_end":372458,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372463,"byte_end":372474,"line_start":436,"line_end":436,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation3D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372479,"byte_end":372518,"line_start":437,"line_end":437,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372523,"byte_end":372526,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation3D::<f32>::identity().is_identity(), true);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372531,"byte_end":372600,"line_start":439,"line_end":439,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 0).is_identity(), true);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372605,"byte_end":372669,"line_start":440,"line_end":440,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(Translation3D::new(1, 0, 0).is_identity(), false);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372674,"byte_end":372739,"line_start":441,"line_end":441,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 1, 0).is_identity(), false);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372744,"byte_end":372809,"line_start":442,"line_end":442,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 1).is_identity(), false);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372814,"byte_end":372879,"line_start":443,"line_end":443,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372884,"byte_end":372891,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":372896,"byte_end":372905,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2993},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373137,"byte_end":373151,"line_start":456,"line_end":456,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation3D<T, Src, Dst>>::transform_size","value":"pub fn transform_size(Self, Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373081,"byte_end":373111,"line_start":454,"line_end":454,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373116,"byte_end":373125,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373354,"byte_end":373363,"line_start":464,"line_end":464,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation3D<T, Src, Dst>>::to_vector","value":"pub fn to_vector(&Self) -> Vector3D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 3D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 3D vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373302,"byte_end":373328,"line_start":462,"line_end":462,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373333,"byte_end":373342,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373506,"byte_end":373514,"line_start":470,"line_end":470,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation3D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373441,"byte_end":373480,"line_start":468,"line_end":468,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373485,"byte_end":373494,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373642,"byte_end":373650,"line_start":476,"line_end":476,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation3D<T, Src, Dst>>::to_tuple","value":"pub fn to_tuple(&Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373578,"byte_end":373616,"line_start":474,"line_end":474,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373621,"byte_end":373630,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3002},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373797,"byte_end":373807,"line_start":482,"line_end":482,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373717,"byte_end":373771,"line_start":480,"line_end":480,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373776,"byte_end":373785,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374071,"byte_end":374083,"line_start":493,"line_end":493,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Translation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374009,"byte_end":374045,"line_start":491,"line_end":491,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374050,"byte_end":374059,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374363,"byte_end":374375,"line_start":504,"line_end":504,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374279,"byte_end":374337,"line_start":502,"line_end":502,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374342,"byte_end":374351,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3005},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374550,"byte_end":374567,"line_start":513,"line_end":513,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Translation3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, &Point3D<T, Src>) -> Point3D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374484,"byte_end":374524,"line_start":511,"line_end":511,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374529,"byte_end":374538,"line_start":512,"line_end":512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3006},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374789,"byte_end":374806,"line_start":522,"line_end":522,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Translation3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, &Point2D<T, Src>) -> Point2D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374723,"byte_end":374763,"line_start":520,"line_end":520,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374768,"byte_end":374777,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3007},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375015,"byte_end":375030,"line_start":531,"line_end":531,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Translation3D<T, Src, Dst>>::transform_box2d","value":"pub fn transform_box2d(&Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374948,"byte_end":374989,"line_start":529,"line_end":529,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":374994,"byte_end":375003,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3008},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375316,"byte_end":375331,"line_start":543,"line_end":543,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Translation3D<T, Src, Dst>>::transform_box3d","value":"pub fn transform_box3d(&Self, &Box3D<T, Src>) -> Box3D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 3D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 3D box and cast its unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375249,"byte_end":375290,"line_start":541,"line_end":541,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375295,"byte_end":375304,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3009},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375620,"byte_end":375634,"line_start":555,"line_end":555,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation3D<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(&Self, &Rect<T, Src>) -> Rect<T, Dst> where\nT: Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375550,"byte_end":375594,"line_start":553,"line_end":553,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375599,"byte_end":375608,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3010},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375922,"byte_end":375929,"line_start":567,"line_end":567,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Translation3D<T::Output, Dst, Src> where T: Neg","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375858,"byte_end":375896,"line_start":565,"line_end":565,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":375901,"byte_end":375910,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3061},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/trig.rs","byte_start":385976,"byte_end":385980,"line_start":11,"line_end":11,"column_start":11,"column_end":15},"name":"Trig","qualname":"::trig::Trig","value":"Trig","parent":null,"children":[{"krate":0,"index":3062},{"krate":0,"index":3063},{"krate":0,"index":3064},{"krate":0,"index":3065},{"krate":0,"index":3066},{"krate":0,"index":3067}],"decl_id":null,"docs":" Trait for basic trigonometry functions, so they can be used on generic numeric types\n","sig":null,"attributes":[{"value":"/ Trait for basic trigonometry functions, so they can be used on generic numeric types","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/trig.rs","byte_start":385877,"byte_end":385965,"line_start":10,"line_end":10,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3062},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/trig.rs","byte_start":385990,"byte_end":385993,"line_start":12,"line_end":12,"column_start":8,"column_end":11},"name":"sin","qualname":"::trig::Trig::sin","value":"pub fn sin(Self) -> Self","parent":{"krate":0,"index":3061},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3063},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/trig.rs","byte_start":386016,"byte_end":386019,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"cos","qualname":"::trig::Trig::cos","value":"pub fn cos(Self) -> Self","parent":{"krate":0,"index":3061},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3064},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/trig.rs","byte_start":386042,"byte_end":386045,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"tan","qualname":"::trig::Trig::tan","value":"pub fn tan(Self) -> Self","parent":{"krate":0,"index":3061},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3065},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/trig.rs","byte_start":386068,"byte_end":386078,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"fast_atan2","qualname":"::trig::Trig::fast_atan2","value":"pub fn fast_atan2(Self, Self) -> Self","parent":{"krate":0,"index":3061},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3066},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/trig.rs","byte_start":386113,"byte_end":386131,"line_start":16,"line_end":16,"column_start":8,"column_end":26},"name":"degrees_to_radians","qualname":"::trig::Trig::degrees_to_radians","value":"pub fn degrees_to_radians(Self) -> Self","parent":{"krate":0,"index":3061},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3067},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/trig.rs","byte_start":386159,"byte_end":386177,"line_start":17,"line_end":17,"column_start":8,"column_end":26},"name":"radians_to_degrees","qualname":"::trig::Trig::radians_to_degrees","value":"pub fn radians_to_degrees(Self) -> Self","parent":{"krate":0,"index":3061},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3113},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389341,"byte_end":389349,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"Vector2D","qualname":"::vector::Vector2D","value":"Vector2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118}],"decl_id":null,"docs":" A 2d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Vector tagged with a unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389283,"byte_end":389318,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389319,"byte_end":389329,"line_start":35,"line_end":35,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3116},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389422,"byte_end":389423,"line_start":38,"line_end":38,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector2D::x","value":"T","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389362,"byte_end":389413,"line_start":37,"line_end":37,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3117},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389490,"byte_end":389491,"line_start":40,"line_end":40,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector2D::y","value":"T","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389432,"byte_end":389481,"line_start":39,"line_end":39,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3118},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389523,"byte_end":389528,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3153},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391893,"byte_end":391897,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391819,"byte_end":391867,"line_start":142,"line_end":142,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391872,"byte_end":391881,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3154},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392075,"byte_end":392078,"line_start":153,"line_end":153,"column_start":12,"column_end":15},"name":"one","qualname":"<Vector2D<T, U>>::one","value":"pub fn one() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to one.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392002,"byte_end":392049,"line_start":151,"line_end":151,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392054,"byte_end":392063,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3155},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392256,"byte_end":392259,"line_start":162,"line_end":162,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392178,"byte_end":392224,"line_start":160,"line_end":160,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392229,"byte_end":392238,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3156},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392467,"byte_end":392472,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vector2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392384,"byte_end":392441,"line_start":170,"line_end":170,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392446,"byte_end":392455,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3157},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392688,"byte_end":392709,"line_start":184,"line_end":184,"column_start":12,"column_end":33},"name":"from_angle_and_length","qualname":"<Vector2D<T, U>>::from_angle_and_length","value":"pub fn from_angle_and_length(Angle<T>, T) -> Self where T: Trig + Mul<Output =\nT> + Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking angle and length\n","sig":null,"attributes":[{"value":"/ Constructor taking angle and length","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392637,"byte_end":392676,"line_start":183,"line_end":183,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3158},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392980,"byte_end":392992,"line_start":193,"line_end":193,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392888,"byte_end":392954,"line_start":191,"line_end":191,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":392959,"byte_end":392968,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3159},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393134,"byte_end":393146,"line_start":199,"line_end":199,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector2D<T, U>>::from_untyped","value":"pub fn from_untyped(Vector2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unit-less value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unit-less value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393071,"byte_end":393108,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393113,"byte_end":393122,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3160},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393790,"byte_end":393793,"line_start":223,"line_end":223,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector2D<T, U>>::abs","value":"pub fn abs(Self) -> Self where T: Signed","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393220,"byte_end":393283,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393288,"byte_end":393291,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393296,"byte_end":393309,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393314,"byte_end":393317,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393322,"byte_end":393333,"line_start":207,"line_end":207,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393338,"byte_end":393364,"line_start":208,"line_end":208,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393369,"byte_end":393392,"line_start":209,"line_end":209,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393397,"byte_end":393410,"line_start":210,"line_end":210,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393415,"byte_end":393418,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, U>(-1, 2).abs(), vec2(1, 2));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393423,"byte_end":393477,"line_start":212,"line_end":212,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393482,"byte_end":393485,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let vec = vec2::<_, U>(f32::NAN, -f32::MAX).abs();","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393490,"byte_end":393544,"line_start":214,"line_end":214,"column_start":5,"column_end":59}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393549,"byte_end":393577,"line_start":215,"line_end":215,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, f32::MAX);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393582,"byte_end":393614,"line_start":216,"line_end":216,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393619,"byte_end":393626,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393631,"byte_end":393634,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393639,"byte_end":393651,"line_start":219,"line_end":219,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393656,"byte_end":393659,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393664,"byte_end":393743,"line_start":221,"line_end":221,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393748,"byte_end":393778,"line_start":222,"line_end":222,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3161},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393937,"byte_end":393940,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector2D<T, U>>::dot","value":"pub fn dot(Self, Self) -> T where T: Add<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393895,"byte_end":393911,"line_start":230,"line_end":230,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":393916,"byte_end":393925,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3162},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394194,"byte_end":394199,"line_start":241,"line_end":241,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector2D<T, U>>::cross","value":"pub fn cross(Self, Self) -> T where T: Sub<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].\n","sig":null,"attributes":[{"value":"/ Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394082,"byte_end":394168,"line_start":239,"line_end":239,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394173,"byte_end":394182,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3163},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394432,"byte_end":394445,"line_start":250,"line_end":250,"column_start":12,"column_end":25},"name":"component_mul","qualname":"<Vector2D<T, U>>::component_mul","value":"pub fn component_mul(Self, Self) -> Self where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise multiplication of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise multiplication of the two vectors.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394341,"byte_end":394406,"line_start":248,"line_end":248,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394411,"byte_end":394420,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3167},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394705,"byte_end":394711,"line_start":261,"line_end":261,"column_start":12,"column_end":18},"name":"extend","qualname":"<Vector2D<T, U>>::extend","value":"pub fn extend(Self, T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d vector from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d vector from this one, using the specified z value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394613,"byte_end":394679,"line_start":259,"line_end":259,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394684,"byte_end":394693,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3168},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394911,"byte_end":394919,"line_start":269,"line_end":269,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector2D<T, U>>::to_point","value":"pub fn to_point(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394787,"byte_end":394821,"line_start":265,"line_end":265,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394826,"byte_end":394829,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394834,"byte_end":394885,"line_start":267,"line_end":267,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394890,"byte_end":394899,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3169},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395105,"byte_end":395107,"line_start":279,"line_end":279,"column_start":12,"column_end":14},"name":"yx","qualname":"<Vector2D<T, U>>::yx","value":"pub fn yx(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.\n","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395062,"byte_end":395079,"line_start":277,"line_end":277,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395084,"byte_end":395093,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3170},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395223,"byte_end":395230,"line_start":285,"line_end":285,"column_start":12,"column_end":19},"name":"to_size","qualname":"<Vector2D<T, U>>::to_size","value":"pub fn to_size(Self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a size.\n","sig":null,"attributes":[{"value":"/ Cast this vector into a size.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395164,"byte_end":395197,"line_start":283,"line_end":283,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395202,"byte_end":395211,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3171},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395376,"byte_end":395386,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395296,"byte_end":395350,"line_start":289,"line_end":289,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395355,"byte_end":395364,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3172},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395507,"byte_end":395516,"line_start":297,"line_end":297,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Vector2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395463,"byte_end":395481,"line_start":295,"line_end":295,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395486,"byte_end":395495,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3174},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395648,"byte_end":395656,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395586,"byte_end":395622,"line_start":301,"line_end":301,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395627,"byte_end":395636,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3176},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395772,"byte_end":395780,"line_start":309,"line_end":309,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395711,"byte_end":395746,"line_start":307,"line_end":307,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395751,"byte_end":395760,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3177},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395932,"byte_end":395937,"line_start":315,"line_end":315,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Vector2D<T, U>>::to_3d","value":"pub fn to_3d(Self) -> Vector3D<T, U> where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d vector with `z` coordinate equals to `T::zero()`.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d vector with `z` coordinate equals to `T::zero()`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395835,"byte_end":395906,"line_start":313,"line_end":313,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":395911,"byte_end":395920,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3178},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396405,"byte_end":396410,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396049,"byte_end":396104,"line_start":322,"line_end":322,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396109,"byte_end":396112,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396117,"byte_end":396192,"line_start":324,"line_end":324,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396197,"byte_end":396200,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396205,"byte_end":396216,"line_start":326,"line_end":326,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396221,"byte_end":396244,"line_start":327,"line_end":327,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396249,"byte_end":396263,"line_start":328,"line_end":328,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396268,"byte_end":396271,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).round(), vec2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396276,"byte_end":396351,"line_start":330,"line_end":330,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396356,"byte_end":396363,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396368,"byte_end":396377,"line_start":332,"line_end":332,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396382,"byte_end":396393,"line_start":333,"line_end":333,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3179},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396905,"byte_end":396909,"line_start":353,"line_end":353,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396515,"byte_end":396606,"line_start":341,"line_end":341,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396611,"byte_end":396614,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396619,"byte_end":396694,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396699,"byte_end":396702,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396707,"byte_end":396718,"line_start":345,"line_end":345,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396723,"byte_end":396746,"line_start":346,"line_end":346,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396751,"byte_end":396765,"line_start":347,"line_end":347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396770,"byte_end":396773,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).ceil(), vec2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396778,"byte_end":396851,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396856,"byte_end":396863,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396868,"byte_end":396877,"line_start":351,"line_end":351,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":396882,"byte_end":396893,"line_start":352,"line_end":352,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3180},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397401,"byte_end":397406,"line_start":372,"line_end":372,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397011,"byte_end":397099,"line_start":360,"line_end":360,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397104,"byte_end":397107,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397112,"byte_end":397187,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397192,"byte_end":397195,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397200,"byte_end":397211,"line_start":364,"line_end":364,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397216,"byte_end":397239,"line_start":365,"line_end":365,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397244,"byte_end":397258,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397263,"byte_end":397266,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).floor(), vec2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397271,"byte_end":397347,"line_start":368,"line_end":368,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397352,"byte_end":397359,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397364,"byte_end":397373,"line_start":370,"line_end":370,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397378,"byte_end":397389,"line_start":371,"line_end":371,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3181},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397746,"byte_end":397763,"line_start":384,"line_end":384,"column_start":12,"column_end":29},"name":"angle_from_x_axis","qualname":"<Vector2D<T, U>>::angle_from_x_axis","value":"pub fn angle_from_x_axis(Self) -> Angle<T> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and the x axis.\n Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`\n is `+y` axis.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and the x axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397511,"byte_end":397575,"line_start":379,"line_end":379,"column_start":5,"column_end":69}},{"value":"/ Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397580,"byte_end":397654,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/ is `+y` axis.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397659,"byte_end":397676,"line_start":381,"line_end":381,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397681,"byte_end":397684,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397689,"byte_end":397734,"line_start":383,"line_end":383,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3182},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397964,"byte_end":397976,"line_start":393,"line_end":393,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector2D<T, U>>::to_transform","value":"pub fn to_transform(Self) -> Transform2D<T, U, U> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units.\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397883,"byte_end":397938,"line_start":391,"line_end":391,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":397943,"byte_end":397952,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3186},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398263,"byte_end":398276,"line_start":407,"line_end":407,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector2D<T, U>>::square_length","value":"pub fn square_length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398197,"byte_end":398237,"line_start":405,"line_end":405,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398242,"byte_end":398251,"line_start":406,"line_end":406,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3187},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398496,"byte_end":398515,"line_start":415,"line_end":415,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector2D<T, U>>::project_onto_vector","value":"pub fn project_onto_vector(Self, Self) -> Self where T: Sub<T, Output = T> +\nDiv<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398343,"byte_end":398394,"line_start":411,"line_end":411,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398399,"byte_end":398402,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398407,"byte_end":398470,"line_start":413,"line_end":413,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398475,"byte_end":398484,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3188},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398814,"byte_end":398822,"line_start":425,"line_end":425,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector2D<T, U>>::angle_to","value":"pub fn angle_to(Self, Self) -> Angle<T> where T: Sub<Output = T> + Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and another vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398676,"byte_end":398744,"line_start":422,"line_end":422,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398749,"byte_end":398752,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398757,"byte_end":398802,"line_start":424,"line_end":424,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3192},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399086,"byte_end":399092,"line_start":436,"line_end":436,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector2D<T, U>>::length","value":"pub fn length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399030,"byte_end":399060,"line_start":434,"line_end":434,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399065,"byte_end":399074,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3193},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399242,"byte_end":399251,"line_start":443,"line_end":443,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector2D<T, U>>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399153,"byte_end":399200,"line_start":440,"line_end":440,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399205,"byte_end":399214,"line_start":441,"line_end":441,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399219,"byte_end":399230,"line_start":442,"line_end":442,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3194},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399541,"byte_end":399554,"line_start":453,"line_end":453,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector2D<T, U>>::try_normalize","value":"pub fn try_normalize(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399308,"byte_end":399355,"line_start":447,"line_end":447,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399360,"byte_end":399363,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399368,"byte_end":399461,"line_start":449,"line_end":449,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399466,"byte_end":399499,"line_start":450,"line_end":450,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399504,"byte_end":399513,"line_start":451,"line_end":451,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399518,"byte_end":399529,"line_start":452,"line_end":452,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3195},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399858,"byte_end":399874,"line_start":465,"line_end":465,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector2D<T, U>>::robust_normalize","value":"pub fn robust_normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399726,"byte_end":399816,"line_start":462,"line_end":462,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399821,"byte_end":399830,"line_start":463,"line_end":463,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399835,"byte_end":399846,"line_start":464,"line_end":464,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3196},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400186,"byte_end":400201,"line_start":477,"line_end":477,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector2D<T, U>>::with_max_length","value":"pub fn with_max_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400110,"byte_end":400160,"line_start":475,"line_end":475,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400165,"byte_end":400174,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3197},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400513,"byte_end":400528,"line_start":488,"line_end":488,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector2D<T, U>>::with_min_length","value":"pub fn with_min_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400434,"byte_end":400487,"line_start":486,"line_end":486,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400492,"byte_end":400501,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3198},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400851,"byte_end":400863,"line_start":499,"line_end":499,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector2D<T, U>>::clamp_length","value":"pub fn clamp_length(Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400761,"byte_end":400825,"line_start":497,"line_end":497,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":400830,"byte_end":400839,"line_start":498,"line_end":498,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3202},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401751,"byte_end":401755,"line_start":527,"line_end":527,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401106,"byte_end":401185,"line_start":509,"line_end":509,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401190,"byte_end":401193,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401198,"byte_end":401211,"line_start":511,"line_end":511,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401216,"byte_end":401219,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401224,"byte_end":401235,"line_start":513,"line_end":513,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec2;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401240,"byte_end":401261,"line_start":514,"line_end":514,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector2D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401266,"byte_end":401300,"line_start":515,"line_end":515,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401305,"byte_end":401308,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ let from: Vector2D<_> = vec2(0.0, 10.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401313,"byte_end":401357,"line_start":517,"line_end":517,"column_start":5,"column_end":49}},{"value":"/ let to:  Vector2D<_> = vec2(8.0, -4.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401362,"byte_end":401405,"line_start":518,"line_end":518,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401410,"byte_end":401413,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec2(-8.0,  24.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401418,"byte_end":401473,"line_start":520,"line_end":520,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec2( 0.0,  10.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401478,"byte_end":401533,"line_start":521,"line_end":521,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec2( 4.0,   3.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401538,"byte_end":401593,"line_start":522,"line_end":522,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec2( 8.0,  -4.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401598,"byte_end":401653,"line_start":523,"line_end":523,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec2(16.0, -18.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401658,"byte_end":401713,"line_start":524,"line_end":524,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401718,"byte_end":401725,"line_start":525,"line_end":525,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401730,"byte_end":401739,"line_start":526,"line_end":526,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3203},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401970,"byte_end":401977,"line_start":534,"line_end":534,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector2D<T, U>>::reflect","value":"pub fn reflect(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401869,"byte_end":401944,"line_start":532,"line_end":532,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401949,"byte_end":401958,"line_start":533,"line_end":533,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3207},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402259,"byte_end":402262,"line_start":543,"line_end":543,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402147,"byte_end":402233,"line_start":541,"line_end":541,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402238,"byte_end":402247,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3208},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402472,"byte_end":402475,"line_start":549,"line_end":549,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402360,"byte_end":402446,"line_start":547,"line_end":547,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402451,"byte_end":402460,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3209},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402771,"byte_end":402776,"line_start":558,"line_end":558,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402573,"byte_end":402647,"line_start":553,"line_end":553,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402652,"byte_end":402688,"line_start":554,"line_end":554,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402693,"byte_end":402696,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402701,"byte_end":402745,"line_start":556,"line_end":556,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402750,"byte_end":402759,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3210},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402996,"byte_end":403008,"line_start":567,"line_end":567,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector2D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402892,"byte_end":402970,"line_start":565,"line_end":565,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402975,"byte_end":402984,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3211},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403258,"byte_end":403268,"line_start":576,"line_end":576,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector2D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403156,"byte_end":403232,"line_start":574,"line_end":574,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403237,"byte_end":403246,"line_start":575,"line_end":575,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3215},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403554,"byte_end":403559,"line_start":587,"line_end":587,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector2D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403457,"byte_end":403528,"line_start":585,"line_end":585,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403533,"byte_end":403542,"line_start":586,"line_end":586,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3216},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403810,"byte_end":403819,"line_start":596,"line_end":596,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector2D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403709,"byte_end":403784,"line_start":594,"line_end":594,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403789,"byte_end":403798,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3220},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404396,"byte_end":404400,"line_start":611,"line_end":611,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Vector2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404015,"byte_end":404089,"line_start":605,"line_end":605,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404094,"byte_end":404097,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404102,"byte_end":404190,"line_start":607,"line_end":607,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404195,"byte_end":404283,"line_start":608,"line_end":608,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404288,"byte_end":404370,"line_start":609,"line_end":609,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404375,"byte_end":404384,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3222},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404865,"byte_end":404873,"line_start":620,"line_end":620,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Vector2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404489,"byte_end":404572,"line_start":615,"line_end":615,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404577,"byte_end":404580,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404585,"byte_end":404673,"line_start":617,"line_end":617,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404678,"byte_end":404766,"line_start":618,"line_end":618,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":404771,"byte_end":404853,"line_start":619,"line_end":619,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3224},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405198,"byte_end":405204,"line_start":631,"line_end":631,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Vector2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405142,"byte_end":405172,"line_start":629,"line_end":629,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405177,"byte_end":405186,"line_start":630,"line_end":630,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3225},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405320,"byte_end":405326,"line_start":637,"line_end":637,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Vector2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405264,"byte_end":405294,"line_start":635,"line_end":635,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405299,"byte_end":405308,"line_start":636,"line_end":636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3226},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405683,"byte_end":405691,"line_start":647,"line_end":647,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Vector2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405386,"byte_end":405446,"line_start":641,"line_end":641,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405451,"byte_end":405454,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405459,"byte_end":405537,"line_start":643,"line_end":643,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405542,"byte_end":405616,"line_start":644,"line_end":644,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405621,"byte_end":405657,"line_start":645,"line_end":645,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405662,"byte_end":405671,"line_start":646,"line_end":646,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3227},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406048,"byte_end":406054,"line_start":657,"line_end":657,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Vector2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405753,"byte_end":405811,"line_start":651,"line_end":651,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405816,"byte_end":405819,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405824,"byte_end":405902,"line_start":653,"line_end":653,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405907,"byte_end":405981,"line_start":654,"line_end":654,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":405986,"byte_end":406022,"line_start":655,"line_end":655,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406027,"byte_end":406036,"line_start":656,"line_end":656,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3228},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406407,"byte_end":406413,"line_start":667,"line_end":667,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Vector2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 vector, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406114,"byte_end":406170,"line_start":661,"line_end":661,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406175,"byte_end":406178,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406183,"byte_end":406261,"line_start":663,"line_end":663,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406266,"byte_end":406340,"line_start":664,"line_end":664,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406345,"byte_end":406381,"line_start":665,"line_end":665,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406386,"byte_end":406395,"line_start":666,"line_end":666,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3229},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406766,"byte_end":406772,"line_start":677,"line_end":677,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Vector2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 vector, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406473,"byte_end":406529,"line_start":671,"line_end":671,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406534,"byte_end":406537,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406542,"byte_end":406620,"line_start":673,"line_end":673,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406625,"byte_end":406699,"line_start":674,"line_end":674,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406704,"byte_end":406740,"line_start":675,"line_end":675,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406745,"byte_end":406754,"line_start":676,"line_end":676,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3348},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411516,"byte_end":411524,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"name":"Vector3D","qualname":"::vector::Vector3D","value":"Vector3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":3351},{"krate":0,"index":3352},{"krate":0,"index":3353},{"krate":0,"index":3354}],"decl_id":null,"docs":" A 3d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Vector tagged with a unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411458,"byte_end":411493,"line_start":876,"line_end":876,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411494,"byte_end":411504,"line_start":877,"line_end":877,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3351},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411597,"byte_end":411598,"line_start":880,"line_end":880,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector3D::x","value":"T","parent":{"krate":0,"index":3348},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411537,"byte_end":411588,"line_start":879,"line_end":879,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3352},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411665,"byte_end":411666,"line_start":882,"line_end":882,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector3D::y","value":"T","parent":{"krate":0,"index":3348},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411607,"byte_end":411656,"line_start":881,"line_end":881,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3353},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411730,"byte_end":411731,"line_start":884,"line_end":884,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::Vector3D::z","value":"T","parent":{"krate":0,"index":3348},"children":[],"decl_id":null,"docs":" The `z` (traditionally, depth) coordinate.\n","sig":null,"attributes":[{"value":"/ The `z` (traditionally, depth) coordinate.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411675,"byte_end":411721,"line_start":883,"line_end":883,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":3354},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411763,"byte_end":411768,"line_start":886,"line_end":886,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":3348},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3389},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413952,"byte_end":413956,"line_start":979,"line_end":979,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413878,"byte_end":413926,"line_start":977,"line_end":977,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413931,"byte_end":413940,"line_start":978,"line_end":978,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3390},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414139,"byte_end":414142,"line_start":988,"line_end":988,"column_start":12,"column_end":15},"name":"one","qualname":"<Vector3D<T, U>>::one","value":"pub fn one() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to one.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414066,"byte_end":414113,"line_start":986,"line_end":986,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414118,"byte_end":414127,"line_start":987,"line_end":987,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3391},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414323,"byte_end":414326,"line_start":997,"line_end":997,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414245,"byte_end":414291,"line_start":995,"line_end":995,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414296,"byte_end":414305,"line_start":996,"line_end":996,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3392},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414554,"byte_end":414559,"line_start":1007,"line_end":1007,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vector3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414471,"byte_end":414528,"line_start":1005,"line_end":1005,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414533,"byte_end":414542,"line_start":1006,"line_end":1006,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3393},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414842,"byte_end":414854,"line_start":1021,"line_end":1021,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>)\n-> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414750,"byte_end":414816,"line_start":1019,"line_end":1019,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414821,"byte_end":414830,"line_start":1020,"line_end":1020,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3394},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415027,"byte_end":415039,"line_start":1027,"line_end":1027,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector3D<T, U>>::from_untyped","value":"pub fn from_untyped(Vector3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":414965,"byte_end":415001,"line_start":1025,"line_end":1025,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415006,"byte_end":415015,"line_start":1026,"line_end":1026,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3395},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415731,"byte_end":415734,"line_start":1052,"line_end":1052,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector3D<T, U>>::abs","value":"pub fn abs(Self) -> Self where T: Signed","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415118,"byte_end":415181,"line_start":1031,"line_end":1031,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415186,"byte_end":415189,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415194,"byte_end":415207,"line_start":1033,"line_end":1033,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415212,"byte_end":415215,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415220,"byte_end":415231,"line_start":1035,"line_end":1035,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415236,"byte_end":415262,"line_start":1036,"line_end":1036,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415267,"byte_end":415290,"line_start":1037,"line_end":1037,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415295,"byte_end":415308,"line_start":1038,"line_end":1038,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415313,"byte_end":415316,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, U>(-1, 0, 2).abs(), vec3(1, 0, 2));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415321,"byte_end":415381,"line_start":1040,"line_end":1040,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415386,"byte_end":415389,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ let vec = vec3::<_, U>(f32::NAN, 0.0, -f32::MAX).abs();","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415394,"byte_end":415453,"line_start":1042,"line_end":1042,"column_start":5,"column_end":64}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415458,"byte_end":415486,"line_start":1043,"line_end":1043,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, 0.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415491,"byte_end":415518,"line_start":1044,"line_end":1044,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(vec.z, f32::MAX);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415523,"byte_end":415555,"line_start":1045,"line_end":1045,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415560,"byte_end":415567,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415572,"byte_end":415575,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415580,"byte_end":415592,"line_start":1048,"line_end":1048,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415597,"byte_end":415600,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415605,"byte_end":415684,"line_start":1050,"line_end":1050,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415689,"byte_end":415719,"line_start":1051,"line_end":1051,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3396},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415892,"byte_end":415895,"line_start":1061,"line_end":1061,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector3D<T, U>>::dot","value":"pub fn dot(Self, Self) -> T where T: Add<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415850,"byte_end":415866,"line_start":1059,"line_end":1059,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":415871,"byte_end":415880,"line_start":1060,"line_end":1060,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3400},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416136,"byte_end":416141,"line_start":1072,"line_end":1072,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector3D<T, U>>::cross","value":"pub fn cross(Self, Self) -> Self where T: Sub<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Cross product.\n","sig":null,"attributes":[{"value":"/ Cross product.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416092,"byte_end":416110,"line_start":1070,"line_end":1070,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416115,"byte_end":416124,"line_start":1071,"line_end":1071,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3401},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416504,"byte_end":416517,"line_start":1085,"line_end":1085,"column_start":12,"column_end":25},"name":"component_mul","qualname":"<Vector3D<T, U>>::component_mul","value":"pub fn component_mul(Self, Self) -> Self where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise multiplication of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise multiplication of the two vectors.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416413,"byte_end":416478,"line_start":1083,"line_end":1083,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416483,"byte_end":416492,"line_start":1084,"line_end":1084,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3402},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416791,"byte_end":416799,"line_start":1096,"line_end":1096,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector3D<T, U>>::to_point","value":"pub fn to_point(Self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416667,"byte_end":416701,"line_start":1092,"line_end":1092,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416706,"byte_end":416709,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416714,"byte_end":416765,"line_start":1094,"line_end":1094,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416770,"byte_end":416779,"line_start":1095,"line_end":1095,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3403},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416964,"byte_end":416966,"line_start":1102,"line_end":1102,"column_start":12,"column_end":14},"name":"xy","qualname":"<Vector3D<T, U>>::xy","value":"pub fn xy(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416875,"byte_end":416938,"line_start":1100,"line_end":1100,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416943,"byte_end":416952,"line_start":1101,"line_end":1101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3404},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417122,"byte_end":417124,"line_start":1108,"line_end":1108,"column_start":12,"column_end":14},"name":"xz","qualname":"<Vector3D<T, U>>::xz","value":"pub fn xz(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417033,"byte_end":417096,"line_start":1106,"line_end":1106,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417101,"byte_end":417110,"line_start":1107,"line_end":1107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3405},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417280,"byte_end":417282,"line_start":1114,"line_end":1114,"column_start":12,"column_end":14},"name":"yz","qualname":"<Vector3D<T, U>>::yz","value":"pub fn yz(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417191,"byte_end":417254,"line_start":1112,"line_end":1112,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417259,"byte_end":417268,"line_start":1113,"line_end":1113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3406},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417414,"byte_end":417422,"line_start":1120,"line_end":1120,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417349,"byte_end":417388,"line_start":1118,"line_end":1118,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417393,"byte_end":417402,"line_start":1119,"line_end":1119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3408},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417553,"byte_end":417564,"line_start":1126,"line_end":1126,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Vector3D<T, U>>::to_array_4d","value":"pub fn to_array_4d(Self) -> [T; ] where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y, z and 0.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417485,"byte_end":417527,"line_start":1124,"line_end":1124,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417532,"byte_end":417541,"line_start":1125,"line_end":1125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417736,"byte_end":417744,"line_start":1135,"line_end":1135,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417672,"byte_end":417710,"line_start":1133,"line_end":1133,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417715,"byte_end":417724,"line_start":1134,"line_end":1134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417877,"byte_end":417888,"line_start":1141,"line_end":1141,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Vector3D<T, U>>::to_tuple_4d","value":"pub fn to_tuple_4d(Self) -> (T, T, T, T) where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y, z and 0.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417810,"byte_end":417851,"line_start":1139,"line_end":1139,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":417856,"byte_end":417865,"line_start":1140,"line_end":1140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3412},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418082,"byte_end":418092,"line_start":1150,"line_end":1150,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418002,"byte_end":418056,"line_start":1148,"line_end":1148,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418061,"byte_end":418070,"line_start":1149,"line_end":1149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3413},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418221,"byte_end":418230,"line_start":1156,"line_end":1156,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Vector3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418177,"byte_end":418195,"line_start":1154,"line_end":1154,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418200,"byte_end":418209,"line_start":1155,"line_end":1155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3415},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418363,"byte_end":418368,"line_start":1162,"line_end":1162,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Vector3D<T, U>>::to_2d","value":"pub fn to_2d(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d vector.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418308,"byte_end":418337,"line_start":1160,"line_end":1160,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418342,"byte_end":418351,"line_start":1161,"line_end":1161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3416},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418790,"byte_end":418795,"line_start":1178,"line_end":1178,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418424,"byte_end":418479,"line_start":1166,"line_end":1166,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418484,"byte_end":418487,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418492,"byte_end":418567,"line_start":1168,"line_end":1168,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418572,"byte_end":418575,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418580,"byte_end":418591,"line_start":1170,"line_end":1170,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418596,"byte_end":418619,"line_start":1171,"line_end":1171,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418624,"byte_end":418638,"line_start":1172,"line_end":1172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418643,"byte_end":418646,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).round(), vec3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418651,"byte_end":418736,"line_start":1174,"line_end":1174,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418741,"byte_end":418748,"line_start":1175,"line_end":1175,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418753,"byte_end":418762,"line_start":1176,"line_end":1176,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418767,"byte_end":418778,"line_start":1177,"line_end":1177,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3417},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419316,"byte_end":419320,"line_start":1197,"line_end":1197,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":418916,"byte_end":419007,"line_start":1185,"line_end":1185,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419012,"byte_end":419015,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419020,"byte_end":419095,"line_start":1187,"line_end":1187,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419100,"byte_end":419103,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419108,"byte_end":419119,"line_start":1189,"line_end":1189,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419124,"byte_end":419147,"line_start":1190,"line_end":1190,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419152,"byte_end":419166,"line_start":1191,"line_end":1191,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419171,"byte_end":419174,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), vec3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419179,"byte_end":419262,"line_start":1193,"line_end":1193,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419267,"byte_end":419274,"line_start":1194,"line_end":1194,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419279,"byte_end":419288,"line_start":1195,"line_end":1195,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419293,"byte_end":419304,"line_start":1196,"line_end":1196,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3418},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419837,"byte_end":419842,"line_start":1216,"line_end":1216,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419437,"byte_end":419525,"line_start":1204,"line_end":1204,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419530,"byte_end":419533,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419538,"byte_end":419613,"line_start":1206,"line_end":1206,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419618,"byte_end":419621,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419626,"byte_end":419637,"line_start":1208,"line_end":1208,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419642,"byte_end":419665,"line_start":1209,"line_end":1209,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419670,"byte_end":419684,"line_start":1210,"line_end":1210,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419689,"byte_end":419692,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).floor(), vec3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419697,"byte_end":419783,"line_start":1212,"line_end":1212,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419788,"byte_end":419795,"line_start":1213,"line_end":1213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419800,"byte_end":419809,"line_start":1214,"line_end":1214,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419814,"byte_end":419825,"line_start":1215,"line_end":1215,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3419},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420043,"byte_end":420055,"line_start":1225,"line_end":1225,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector3D<T, U>>::to_transform","value":"pub fn to_transform(Self) -> Transform3D<T, U, U> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":419963,"byte_end":420017,"line_start":1223,"line_end":1223,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420022,"byte_end":420031,"line_start":1224,"line_end":1224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3423},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420350,"byte_end":420363,"line_start":1239,"line_end":1239,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector3D<T, U>>::square_length","value":"pub fn square_length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420284,"byte_end":420324,"line_start":1237,"line_end":1237,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420329,"byte_end":420338,"line_start":1238,"line_end":1238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3424},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420601,"byte_end":420620,"line_start":1247,"line_end":1247,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector3D<T, U>>::project_onto_vector","value":"pub fn project_onto_vector(Self, Self) -> Self where T: Sub<T, Output = T> +\nDiv<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420448,"byte_end":420499,"line_start":1243,"line_end":1243,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420504,"byte_end":420507,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420512,"byte_end":420575,"line_start":1245,"line_end":1245,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420580,"byte_end":420589,"line_start":1246,"line_end":1246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420956,"byte_end":420964,"line_start":1259,"line_end":1259,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector3D<T, U>>::angle_to","value":"pub fn angle_to(Self, Self) -> Angle<T> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the positive angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the positive angle between this vector and another vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420818,"byte_end":420888,"line_start":1256,"line_end":1256,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420893,"byte_end":420896,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between 0 and PI.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420901,"byte_end":420944,"line_start":1258,"line_end":1258,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3429},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421217,"byte_end":421223,"line_start":1271,"line_end":1271,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector3D<T, U>>::length","value":"pub fn length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421161,"byte_end":421191,"line_start":1269,"line_end":1269,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421196,"byte_end":421205,"line_start":1270,"line_end":1270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3430},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421372,"byte_end":421381,"line_start":1278,"line_end":1278,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector3D<T, U>>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421284,"byte_end":421330,"line_start":1275,"line_end":1275,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421335,"byte_end":421344,"line_start":1276,"line_end":1276,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421349,"byte_end":421360,"line_start":1277,"line_end":1277,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3431},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421671,"byte_end":421684,"line_start":1288,"line_end":1288,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector3D<T, U>>::try_normalize","value":"pub fn try_normalize(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421438,"byte_end":421485,"line_start":1282,"line_end":1282,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421490,"byte_end":421493,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421498,"byte_end":421591,"line_start":1284,"line_end":1284,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421596,"byte_end":421629,"line_start":1285,"line_end":1285,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421634,"byte_end":421643,"line_start":1286,"line_end":1286,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421648,"byte_end":421659,"line_start":1287,"line_end":1287,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3432},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421988,"byte_end":422004,"line_start":1300,"line_end":1300,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector3D<T, U>>::robust_normalize","value":"pub fn robust_normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421856,"byte_end":421946,"line_start":1297,"line_end":1297,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421951,"byte_end":421960,"line_start":1298,"line_end":1298,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":421965,"byte_end":421976,"line_start":1299,"line_end":1299,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3433},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422316,"byte_end":422331,"line_start":1312,"line_end":1312,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector3D<T, U>>::with_max_length","value":"pub fn with_max_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422240,"byte_end":422290,"line_start":1310,"line_end":1310,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422295,"byte_end":422304,"line_start":1311,"line_end":1311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3434},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422643,"byte_end":422658,"line_start":1323,"line_end":1323,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector3D<T, U>>::with_min_length","value":"pub fn with_min_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422564,"byte_end":422617,"line_start":1321,"line_end":1321,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422622,"byte_end":422631,"line_start":1322,"line_end":1322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3435},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422981,"byte_end":422993,"line_start":1334,"line_end":1334,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector3D<T, U>>::clamp_length","value":"pub fn clamp_length(Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422891,"byte_end":422955,"line_start":1332,"line_end":1332,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":422960,"byte_end":422969,"line_start":1333,"line_end":1333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3439},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423923,"byte_end":423927,"line_start":1362,"line_end":1362,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423236,"byte_end":423315,"line_start":1344,"line_end":1344,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423320,"byte_end":423323,"line_start":1345,"line_end":1345,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423328,"byte_end":423341,"line_start":1346,"line_end":1346,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423346,"byte_end":423349,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423354,"byte_end":423365,"line_start":1348,"line_end":1348,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec3;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423370,"byte_end":423391,"line_start":1349,"line_end":1349,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector3D;","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423396,"byte_end":423430,"line_start":1350,"line_end":1350,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423435,"byte_end":423438,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ let from: Vector3D<_> = vec3(0.0, 10.0, -1.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423443,"byte_end":423493,"line_start":1352,"line_end":1352,"column_start":5,"column_end":55}},{"value":"/ let to:  Vector3D<_> = vec3(8.0, -4.0,  0.0);","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423498,"byte_end":423547,"line_start":1353,"line_end":1353,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423552,"byte_end":423555,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423560,"byte_end":423621,"line_start":1355,"line_end":1355,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423626,"byte_end":423687,"line_start":1356,"line_end":1356,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423692,"byte_end":423753,"line_start":1357,"line_end":1357,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423758,"byte_end":423819,"line_start":1358,"line_end":1358,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec3(16.0, -18.0,  1.0));","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423824,"byte_end":423885,"line_start":1359,"line_end":1359,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423890,"byte_end":423897,"line_start":1360,"line_end":1360,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423902,"byte_end":423911,"line_start":1361,"line_end":1361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424142,"byte_end":424149,"line_start":1369,"line_end":1369,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector3D<T, U>>::reflect","value":"pub fn reflect(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424041,"byte_end":424116,"line_start":1367,"line_end":1367,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424121,"byte_end":424130,"line_start":1368,"line_end":1368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3444},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424431,"byte_end":424434,"line_start":1378,"line_end":1378,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424319,"byte_end":424405,"line_start":1376,"line_end":1376,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424410,"byte_end":424419,"line_start":1377,"line_end":1377,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3445},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424713,"byte_end":424716,"line_start":1388,"line_end":1388,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424601,"byte_end":424687,"line_start":1386,"line_end":1386,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424692,"byte_end":424701,"line_start":1387,"line_end":1387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3446},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425081,"byte_end":425086,"line_start":1401,"line_end":1401,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424883,"byte_end":424957,"line_start":1396,"line_end":1396,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424962,"byte_end":424998,"line_start":1397,"line_end":1397,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425003,"byte_end":425006,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425011,"byte_end":425055,"line_start":1399,"line_end":1399,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425060,"byte_end":425069,"line_start":1400,"line_end":1400,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3447},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425306,"byte_end":425318,"line_start":1410,"line_end":1410,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector3D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425202,"byte_end":425280,"line_start":1408,"line_end":1408,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425285,"byte_end":425294,"line_start":1409,"line_end":1409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3448},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425601,"byte_end":425611,"line_start":1420,"line_end":1420,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector3D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425499,"byte_end":425575,"line_start":1418,"line_end":1418,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425580,"byte_end":425589,"line_start":1419,"line_end":1419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425930,"byte_end":425935,"line_start":1432,"line_end":1432,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector3D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425833,"byte_end":425904,"line_start":1430,"line_end":1430,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425909,"byte_end":425918,"line_start":1431,"line_end":1431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3453},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426220,"byte_end":426229,"line_start":1442,"line_end":1442,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector3D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426119,"byte_end":426194,"line_start":1440,"line_end":1440,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426199,"byte_end":426208,"line_start":1441,"line_end":1441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3457},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426840,"byte_end":426844,"line_start":1458,"line_end":1458,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Vector3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426459,"byte_end":426533,"line_start":1452,"line_end":1452,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426538,"byte_end":426541,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426546,"byte_end":426634,"line_start":1454,"line_end":1454,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426639,"byte_end":426727,"line_start":1455,"line_end":1455,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426732,"byte_end":426814,"line_start":1456,"line_end":1456,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426819,"byte_end":426828,"line_start":1457,"line_end":1457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3459},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427309,"byte_end":427317,"line_start":1467,"line_end":1467,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Vector3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426933,"byte_end":427016,"line_start":1462,"line_end":1462,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427021,"byte_end":427024,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427029,"byte_end":427117,"line_start":1464,"line_end":1464,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427122,"byte_end":427210,"line_start":1465,"line_end":1465,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427215,"byte_end":427297,"line_start":1466,"line_end":1466,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3461},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427715,"byte_end":427721,"line_start":1482,"line_end":1482,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Vector3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427659,"byte_end":427689,"line_start":1480,"line_end":1480,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427694,"byte_end":427703,"line_start":1481,"line_end":1481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3462},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427837,"byte_end":427843,"line_start":1488,"line_end":1488,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Vector3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427781,"byte_end":427811,"line_start":1486,"line_end":1486,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427816,"byte_end":427825,"line_start":1487,"line_end":1487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3463},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428200,"byte_end":428208,"line_start":1498,"line_end":1498,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Vector3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427903,"byte_end":427963,"line_start":1492,"line_end":1492,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427968,"byte_end":427971,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":427976,"byte_end":428054,"line_start":1494,"line_end":1494,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428059,"byte_end":428133,"line_start":1495,"line_end":1495,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428138,"byte_end":428174,"line_start":1496,"line_end":1496,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428179,"byte_end":428188,"line_start":1497,"line_end":1497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3464},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428565,"byte_end":428571,"line_start":1508,"line_end":1508,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Vector3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428270,"byte_end":428328,"line_start":1502,"line_end":1502,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428333,"byte_end":428336,"line_start":1503,"line_end":1503,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428341,"byte_end":428419,"line_start":1504,"line_end":1504,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428424,"byte_end":428498,"line_start":1505,"line_end":1505,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428503,"byte_end":428539,"line_start":1506,"line_end":1506,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428544,"byte_end":428553,"line_start":1507,"line_end":1507,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3465},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428926,"byte_end":428932,"line_start":1518,"line_end":1518,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Vector3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` vector, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428631,"byte_end":428689,"line_start":1512,"line_end":1512,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428694,"byte_end":428697,"line_start":1513,"line_end":1513,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428702,"byte_end":428780,"line_start":1514,"line_end":1514,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428785,"byte_end":428859,"line_start":1515,"line_end":1515,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428864,"byte_end":428900,"line_start":1516,"line_end":1516,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428905,"byte_end":428914,"line_start":1517,"line_end":1517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3466},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429287,"byte_end":429293,"line_start":1528,"line_end":1528,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Vector3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` vector, truncating decimals if any.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":428992,"byte_end":429050,"line_start":1522,"line_end":1522,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429055,"byte_end":429058,"line_start":1523,"line_end":1523,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429063,"byte_end":429141,"line_start":1524,"line_end":1524,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429146,"byte_end":429220,"line_start":1525,"line_end":1525,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429225,"byte_end":429261,"line_start":1526,"line_end":1526,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429266,"byte_end":429275,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3830},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434519,"byte_end":434531,"line_start":1747,"line_end":1747,"column_start":12,"column_end":24},"name":"BoolVector2D","qualname":"::vector::BoolVector2D","value":"BoolVector2D { x, y }","parent":null,"children":[{"krate":0,"index":3831},{"krate":0,"index":3832}],"decl_id":null,"docs":" A 2d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 2d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434384,"byte_end":434456,"line_start":1745,"line_end":1745,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3831},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434542,"byte_end":434543,"line_start":1748,"line_end":1748,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector2D::x","value":"bool","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3832},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434559,"byte_end":434560,"line_start":1749,"line_end":1749,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector2D::y","value":"bool","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3848},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434706,"byte_end":434718,"line_start":1754,"line_end":1754,"column_start":12,"column_end":24},"name":"BoolVector3D","qualname":"::vector::BoolVector3D","value":"BoolVector3D { x, y, z }","parent":null,"children":[{"krate":0,"index":3849},{"krate":0,"index":3850},{"krate":0,"index":3851}],"decl_id":null,"docs":" A 3d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 3d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434571,"byte_end":434643,"line_start":1752,"line_end":1752,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3849},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434729,"byte_end":434730,"line_start":1755,"line_end":1755,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector3D::x","value":"bool","parent":{"krate":0,"index":3848},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3850},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434746,"byte_end":434747,"line_start":1756,"line_end":1756,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector3D::y","value":"bool","parent":{"krate":0,"index":3848},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3851},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434763,"byte_end":434764,"line_start":1757,"line_end":1757,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::BoolVector3D::z","value":"bool","parent":{"krate":0,"index":3848},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3583},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434895,"byte_end":434898,"line_start":1763,"line_end":1763,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector2D>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434799,"byte_end":434869,"line_start":1761,"line_end":1761,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434874,"byte_end":434883,"line_start":1762,"line_end":1762,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3584},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435046,"byte_end":435049,"line_start":1769,"line_end":1769,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector2D>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434951,"byte_end":435020,"line_start":1767,"line_end":1767,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435025,"byte_end":435034,"line_start":1768,"line_end":1768,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3585},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435220,"byte_end":435224,"line_start":1775,"line_end":1775,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector2D>::none","value":"pub fn none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435102,"byte_end":435194,"line_start":1773,"line_end":1773,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435199,"byte_end":435208,"line_start":1774,"line_end":1774,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3586},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435361,"byte_end":435364,"line_start":1781,"line_end":1781,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector2D>::and","value":"pub fn and(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435272,"byte_end":435335,"line_start":1779,"line_end":1779,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435340,"byte_end":435349,"line_start":1780,"line_end":1780,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3587},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435594,"byte_end":435596,"line_start":1790,"line_end":1790,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector2D>::or","value":"pub fn or(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435506,"byte_end":435568,"line_start":1788,"line_end":1788,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435573,"byte_end":435582,"line_start":1789,"line_end":1789,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3588},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435840,"byte_end":435843,"line_start":1799,"line_end":1799,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector2D>::not","value":"pub fn not(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435738,"byte_end":435814,"line_start":1797,"line_end":1797,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435819,"byte_end":435828,"line_start":1798,"line_end":1798,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3589},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436165,"byte_end":436177,"line_start":1809,"line_end":1809,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector2D>::select_point","value":"pub fn select_point<T, U>(Self, Point2D<T, U>, Point2D<T, U>) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":435952,"byte_end":436044,"line_start":1806,"line_end":1806,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436049,"byte_end":436139,"line_start":1807,"line_end":1807,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436144,"byte_end":436153,"line_start":1808,"line_end":1808,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3592},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436584,"byte_end":436597,"line_start":1819,"line_end":1819,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector2D>::select_vector","value":"pub fn select_vector<T, U>(Self, Vector2D<T, U>, Vector2D<T, U>)\n-> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436370,"byte_end":436463,"line_start":1816,"line_end":1816,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436468,"byte_end":436558,"line_start":1817,"line_end":1817,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436563,"byte_end":436572,"line_start":1818,"line_end":1818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3595},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437003,"byte_end":437014,"line_start":1829,"line_end":1829,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector2D>::select_size","value":"pub fn select_size<T, U>(Self, Size2D<T, U>, Size2D<T, U>) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436791,"byte_end":436882,"line_start":1826,"line_end":1826,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436887,"byte_end":436977,"line_start":1827,"line_end":1827,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":436982,"byte_end":436991,"line_start":1828,"line_end":1828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3599},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437339,"byte_end":437342,"line_start":1840,"line_end":1840,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector3D>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437243,"byte_end":437313,"line_start":1838,"line_end":1838,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437318,"byte_end":437327,"line_start":1839,"line_end":1839,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3600},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437500,"byte_end":437503,"line_start":1846,"line_end":1846,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector3D>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437405,"byte_end":437474,"line_start":1844,"line_end":1844,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437479,"byte_end":437488,"line_start":1845,"line_end":1845,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3601},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437684,"byte_end":437688,"line_start":1852,"line_end":1852,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector3D>::none","value":"pub fn none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437566,"byte_end":437658,"line_start":1850,"line_end":1850,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437663,"byte_end":437672,"line_start":1851,"line_end":1851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3602},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437825,"byte_end":437828,"line_start":1858,"line_end":1858,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector3D>::and","value":"pub fn and(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437736,"byte_end":437799,"line_start":1856,"line_end":1856,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437804,"byte_end":437813,"line_start":1857,"line_end":1857,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3603},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438092,"byte_end":438094,"line_start":1868,"line_end":1868,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector3D>::or","value":"pub fn or(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438004,"byte_end":438066,"line_start":1866,"line_end":1866,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438071,"byte_end":438080,"line_start":1867,"line_end":1867,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3604},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438372,"byte_end":438375,"line_start":1878,"line_end":1878,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector3D>::not","value":"pub fn not(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438270,"byte_end":438346,"line_start":1876,"line_end":1876,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438351,"byte_end":438360,"line_start":1877,"line_end":1877,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3605},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438721,"byte_end":438733,"line_start":1889,"line_end":1889,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector3D>::select_point","value":"pub fn select_point<T, U>(Self, Point3D<T, U>, Point3D<T, U>) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438508,"byte_end":438600,"line_start":1886,"line_end":1886,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438605,"byte_end":438695,"line_start":1887,"line_end":1887,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438700,"byte_end":438709,"line_start":1888,"line_end":1888,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3608},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439184,"byte_end":439197,"line_start":1900,"line_end":1900,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector3D>::select_vector","value":"pub fn select_vector<T, U>(Self, Vector3D<T, U>, Vector3D<T, U>)\n-> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":438970,"byte_end":439063,"line_start":1897,"line_end":1897,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439068,"byte_end":439158,"line_start":1898,"line_end":1898,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439163,"byte_end":439172,"line_start":1899,"line_end":1899,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3611},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439663,"byte_end":439674,"line_start":1912,"line_end":1912,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector3D>::select_size","value":"pub fn select_size<T, U>(Self, Size3D<T, U>, Size3D<T, U>) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439435,"byte_end":439526,"line_start":1908,"line_end":1908,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439531,"byte_end":439621,"line_start":1909,"line_end":1909,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439626,"byte_end":439635,"line_start":1910,"line_end":1910,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439640,"byte_end":439651,"line_start":1911,"line_end":1911,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3614},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440023,"byte_end":440025,"line_start":1922,"line_end":1922,"column_start":12,"column_end":14},"name":"xy","qualname":"<BoolVector3D>::xy","value":"pub fn xy(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":439933,"byte_end":439997,"line_start":1920,"line_end":1920,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440002,"byte_end":440011,"line_start":1921,"line_end":1921,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3615},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440230,"byte_end":440232,"line_start":1931,"line_end":1931,"column_start":12,"column_end":14},"name":"xz","qualname":"<BoolVector3D>::xz","value":"pub fn xz(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440140,"byte_end":440204,"line_start":1929,"line_end":1929,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440209,"byte_end":440218,"line_start":1930,"line_end":1930,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3616},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440437,"byte_end":440439,"line_start":1940,"line_end":1940,"column_start":12,"column_end":14},"name":"yz","qualname":"<BoolVector3D>::yz","value":"pub fn yz(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's y and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's y and z coordinates.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440347,"byte_end":440411,"line_start":1938,"line_end":1938,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440416,"byte_end":440425,"line_start":1939,"line_end":1939,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":3617},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440604,"byte_end":440608,"line_start":1950,"line_end":1950,"column_start":14,"column_end":18},"name":"vec2","qualname":"::vector::vec2","value":"pub const fn vec2<T, U>(T, T) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440552,"byte_end":440580,"line_start":1948,"line_end":1948,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440581,"byte_end":440590,"line_start":1949,"line_end":1949,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3620},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440773,"byte_end":440777,"line_start":1960,"line_end":1960,"column_start":14,"column_end":18},"name":"vec3","qualname":"::vector::vec3","value":"pub const fn vec3<T, U>(T, T, T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440721,"byte_end":440749,"line_start":1958,"line_end":1958,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440750,"byte_end":440759,"line_start":1959,"line_end":1959,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3623},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440973,"byte_end":440978,"line_start":1971,"line_end":1971,"column_start":14,"column_end":19},"name":"bvec2","qualname":"::vector::bvec2","value":"pub const fn bvec2(bool, bool) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector2D { x, y }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector2D { x, y }`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440907,"byte_end":440949,"line_start":1969,"line_end":1969,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":440950,"byte_end":440959,"line_start":1970,"line_end":1970,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3624},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":441113,"byte_end":441118,"line_start":1977,"line_end":1977,"column_start":14,"column_end":19},"name":"bvec3","qualname":"::vector::bvec3","value":"pub const fn bvec3(bool, bool, bool) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector3D { x, y, z }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector3D { x, y, z }`.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":441044,"byte_end":441089,"line_start":1975,"line_end":1975,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":441090,"byte_end":441099,"line_start":1976,"line_end":1976,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":3867},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3050,"byte_end":3061,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"UnknownUnit","qualname":"::UnknownUnit","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default unit.\n","sig":null,"attributes":[{"value":"/ The default unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2940,"byte_end":2961,"line_start":87,"line_end":87,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":3625},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3072,"byte_end":3079,"line_start":91,"line_end":91,"column_start":9,"column_end":16},"name":"default","qualname":"::default","value":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":3626},{"krate":0,"index":4675},{"krate":0,"index":3627},{"krate":0,"index":3629},{"krate":0,"index":3631},{"krate":0,"index":3633},{"krate":0,"index":3635},{"krate":0,"index":3637},{"krate":0,"index":3639},{"krate":0,"index":3641},{"krate":0,"index":3643},{"krate":0,"index":3645},{"krate":0,"index":3647},{"krate":0,"index":3649},{"krate":0,"index":3651},{"krate":0,"index":3653},{"krate":0,"index":3655},{"krate":0,"index":3657},{"krate":0,"index":3659},{"krate":0,"index":3661},{"krate":0,"index":3663},{"krate":0,"index":3665}],"decl_id":null,"docs":" A set of aliases for all types, tagged with the default unknown unit.\n","sig":null,"attributes":[{"value":"/ A set of aliases for all types, tagged with the default unknown unit.","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3086,"byte_end":3159,"line_start":92,"line_end":92,"column_start":5,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":3627},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3202,"byte_end":3208,"line_start":95,"line_end":95,"column_start":14,"column_end":20},"name":"Length","qualname":"::default::Length","value":"super::Length<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3629},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3258,"byte_end":3265,"line_start":96,"line_end":96,"column_start":14,"column_end":21},"name":"Point2D","qualname":"::default::Point2D","value":"super::Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3631},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3316,"byte_end":3323,"line_start":97,"line_end":97,"column_start":14,"column_end":21},"name":"Point3D","qualname":"::default::Point3D","value":"super::Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3633},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3374,"byte_end":3382,"line_start":98,"line_end":98,"column_start":14,"column_end":22},"name":"Vector2D","qualname":"::default::Vector2D","value":"super::Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3635},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3434,"byte_end":3442,"line_start":99,"line_end":99,"column_start":14,"column_end":22},"name":"Vector3D","qualname":"::default::Vector3D","value":"super::Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3637},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3494,"byte_end":3511,"line_start":100,"line_end":100,"column_start":14,"column_end":31},"name":"HomogeneousVector","qualname":"::default::HomogeneousVector","value":"super::HomogeneousVector<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3639},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3572,"byte_end":3578,"line_start":101,"line_end":101,"column_start":14,"column_end":20},"name":"Size2D","qualname":"::default::Size2D","value":"super::Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3641},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3628,"byte_end":3634,"line_start":102,"line_end":102,"column_start":14,"column_end":20},"name":"Size3D","qualname":"::default::Size3D","value":"super::Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3643},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3684,"byte_end":3688,"line_start":103,"line_end":103,"column_start":14,"column_end":18},"name":"Rect","qualname":"::default::Rect","value":"super::Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3645},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3736,"byte_end":3741,"line_start":104,"line_end":104,"column_start":14,"column_end":19},"name":"Box2D","qualname":"::default::Box2D","value":"super::Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3647},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3790,"byte_end":3795,"line_start":105,"line_end":105,"column_start":14,"column_end":19},"name":"Box3D","qualname":"::default::Box3D","value":"super::Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3649},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3844,"byte_end":3857,"line_start":106,"line_end":106,"column_start":14,"column_end":27},"name":"SideOffsets2D","qualname":"::default::SideOffsets2D","value":"super::SideOffsets2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3651},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3914,"byte_end":3925,"line_start":107,"line_end":107,"column_start":14,"column_end":25},"name":"Transform2D","qualname":"::default::Transform2D","value":"super::Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3653},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":3993,"byte_end":4004,"line_start":108,"line_end":108,"column_start":14,"column_end":25},"name":"Transform3D","qualname":"::default::Transform3D","value":"super::Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3655},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":4072,"byte_end":4082,"line_start":109,"line_end":109,"column_start":14,"column_end":24},"name":"Rotation2D","qualname":"::default::Rotation2D","value":"super::Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3657},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":4149,"byte_end":4159,"line_start":110,"line_end":110,"column_start":14,"column_end":24},"name":"Rotation3D","qualname":"::default::Rotation3D","value":"super::Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3659},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":4226,"byte_end":4239,"line_start":111,"line_end":111,"column_start":14,"column_end":27},"name":"Translation2D","qualname":"::default::Translation2D","value":"super::Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3661},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":4309,"byte_end":4322,"line_start":112,"line_end":112,"column_start":14,"column_end":27},"name":"Translation3D","qualname":"::default::Translation3D","value":"super::Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3663},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":4392,"byte_end":4397,"line_start":113,"line_end":113,"column_start":14,"column_end":19},"name":"Scale","qualname":"::default::Scale","value":"super::Scale<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3665},"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":4459,"byte_end":4475,"line_start":114,"line_end":114,"column_start":14,"column_end":30},"name":"RigidTransform3D","qualname":"::default::RigidTransform3D","value":"super::RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6672,"byte_end":6677,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6851,"byte_end":6856,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7124,"byte_end":7129,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7668,"byte_end":7673,"line_start":77,"line_end":77,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8358,"byte_end":8363,"line_start":104,"line_end":104,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8514,"byte_end":8519,"line_start":114,"line_end":114,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8623,"byte_end":8628,"line_start":123,"line_end":123,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9068,"byte_end":9073,"line_start":148,"line_end":148,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9788,"byte_end":9793,"line_start":178,"line_end":178,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9974,"byte_end":9979,"line_start":185,"line_end":185,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10139,"byte_end":10144,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10309,"byte_end":10314,"line_start":198,"line_end":198,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10465,"byte_end":10470,"line_start":204,"line_end":204,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10618,"byte_end":10623,"line_start":210,"line_end":210,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10816,"byte_end":10821,"line_start":217,"line_end":217,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10969,"byte_end":10974,"line_start":223,"line_end":223,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11141,"byte_end":11146,"line_start":231,"line_end":231,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11330,"byte_end":11335,"line_start":239,"line_end":239,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11463,"byte_end":11468,"line_start":245,"line_end":245,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11652,"byte_end":11657,"line_start":253,"line_end":253,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11779,"byte_end":11784,"line_start":259,"line_end":259,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11925,"byte_end":11930,"line_start":266,"line_end":266,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19582,"byte_end":19587,"line_start":70,"line_end":70,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19726,"byte_end":19731,"line_start":77,"line_end":77,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19770,"byte_end":19775,"line_start":79,"line_end":79,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19913,"byte_end":19918,"line_start":85,"line_end":85,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20058,"byte_end":20063,"line_start":91,"line_end":91,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20112,"byte_end":20117,"line_start":93,"line_end":93,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20318,"byte_end":20323,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20485,"byte_end":20490,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22202,"byte_end":22207,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23649,"byte_end":23654,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23939,"byte_end":23944,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24426,"byte_end":24431,"line_start":249,"line_end":249,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25646,"byte_end":25651,"line_start":285,"line_end":285,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":26907,"byte_end":26912,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27225,"byte_end":27230,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27451,"byte_end":27456,"line_start":355,"line_end":355,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27655,"byte_end":27660,"line_start":366,"line_end":366,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27860,"byte_end":27865,"line_start":376,"line_end":376,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28083,"byte_end":28088,"line_start":385,"line_end":385,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28231,"byte_end":28236,"line_start":392,"line_end":392,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28454,"byte_end":28459,"line_start":401,"line_end":401,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28622,"byte_end":28627,"line_start":408,"line_end":408,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28875,"byte_end":28880,"line_start":417,"line_end":417,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29074,"byte_end":29079,"line_start":425,"line_end":425,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29327,"byte_end":29332,"line_start":434,"line_end":434,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29483,"byte_end":29488,"line_start":442,"line_end":442,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30370,"byte_end":30375,"line_start":476,"line_end":476,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33214,"byte_end":33219,"line_start":554,"line_end":554,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33894,"byte_end":33899,"line_start":573,"line_end":573,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34561,"byte_end":34566,"line_start":596,"line_end":596,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":42962,"byte_end":42967,"line_start":40,"line_end":40,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43106,"byte_end":43111,"line_start":47,"line_end":47,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43150,"byte_end":43155,"line_start":49,"line_end":49,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43293,"byte_end":43298,"line_start":55,"line_end":55,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43438,"byte_end":43443,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43492,"byte_end":43497,"line_start":63,"line_end":63,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43698,"byte_end":43703,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43865,"byte_end":43870,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45896,"byte_end":45901,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47347,"byte_end":47352,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47655,"byte_end":47660,"line_start":210,"line_end":210,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48179,"byte_end":48184,"line_start":239,"line_end":239,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48650,"byte_end":48655,"line_start":254,"line_end":254,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50096,"byte_end":50101,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50418,"byte_end":50423,"line_start":320,"line_end":320,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50644,"byte_end":50649,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51219,"byte_end":51224,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51424,"byte_end":51429,"line_start":369,"line_end":369,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51647,"byte_end":51652,"line_start":378,"line_end":378,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51813,"byte_end":51818,"line_start":386,"line_end":386,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52044,"byte_end":52049,"line_start":395,"line_end":395,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52230,"byte_end":52235,"line_start":403,"line_end":403,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52491,"byte_end":52496,"line_start":412,"line_end":412,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52698,"byte_end":52703,"line_start":420,"line_end":420,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52959,"byte_end":52964,"line_start":429,"line_end":429,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53123,"byte_end":53128,"line_start":437,"line_end":437,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54136,"byte_end":54141,"line_start":477,"line_end":477,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57000,"byte_end":57005,"line_start":555,"line_end":555,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57684,"byte_end":57689,"line_start":574,"line_end":574,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":58357,"byte_end":58362,"line_start":599,"line_end":599,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68597,"byte_end":68614,"line_start":34,"line_end":34,"column_start":27,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68653,"byte_end":68670,"line_start":36,"line_end":36,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":69706,"byte_end":69723,"line_start":81,"line_end":81,"column_start":19,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":69771,"byte_end":69788,"line_start":83,"line_end":83,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":69980,"byte_end":69997,"line_start":92,"line_end":92,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70196,"byte_end":70213,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70539,"byte_end":70556,"line_start":118,"line_end":118,"column_start":59,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71361,"byte_end":71378,"line_start":148,"line_end":148,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71556,"byte_end":71573,"line_start":155,"line_end":155,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71750,"byte_end":71767,"line_start":162,"line_end":162,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71941,"byte_end":71958,"line_start":169,"line_end":169,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":72124,"byte_end":72141,"line_start":176,"line_end":176,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74881,"byte_end":74887,"line_start":44,"line_end":44,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75005,"byte_end":75011,"line_start":50,"line_end":50,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75579,"byte_end":75585,"line_start":78,"line_end":78,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75753,"byte_end":75759,"line_start":86,"line_end":86,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76828,"byte_end":76834,"line_start":124,"line_end":124,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77181,"byte_end":77187,"line_start":138,"line_end":138,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77639,"byte_end":77645,"line_start":151,"line_end":151,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77776,"byte_end":77782,"line_start":157,"line_end":157,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77907,"byte_end":77913,"line_start":164,"line_end":164,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78041,"byte_end":78047,"line_start":171,"line_end":171,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78250,"byte_end":78256,"line_start":180,"line_end":180,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78475,"byte_end":78481,"line_start":189,"line_end":189,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78689,"byte_end":78695,"line_start":196,"line_end":196,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78869,"byte_end":78875,"line_start":203,"line_end":203,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79007,"byte_end":79013,"line_start":210,"line_end":210,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79222,"byte_end":79228,"line_start":219,"line_end":219,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79406,"byte_end":79412,"line_start":226,"line_end":226,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79709,"byte_end":79715,"line_start":237,"line_end":237,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79937,"byte_end":79943,"line_start":247,"line_end":247,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":80172,"byte_end":80178,"line_start":257,"line_end":257,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":80327,"byte_end":80333,"line_start":265,"line_end":265,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":80562,"byte_end":80568,"line_start":275,"line_end":275,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":80746,"byte_end":80752,"line_start":283,"line_end":283,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81004,"byte_end":81010,"line_start":293,"line_end":293,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81222,"byte_end":81228,"line_start":303,"line_end":303,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81401,"byte_end":81407,"line_start":312,"line_end":312,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81532,"byte_end":81538,"line_start":318,"line_end":318,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81677,"byte_end":81683,"line_start":324,"line_end":324,"column_start":23,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81718,"byte_end":81724,"line_start":326,"line_end":326,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81843,"byte_end":81849,"line_start":332,"line_end":332,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81979,"byte_end":81985,"line_start":339,"line_end":339,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90748,"byte_end":90749,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90889,"byte_end":90890,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":94104,"byte_end":94111,"line_start":38,"line_end":38,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":94150,"byte_end":94157,"line_start":40,"line_end":40,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":95413,"byte_end":95420,"line_start":96,"line_end":96,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":95468,"byte_end":95475,"line_start":98,"line_end":98,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":95625,"byte_end":95632,"line_start":107,"line_end":107,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":95846,"byte_end":95853,"line_start":119,"line_end":119,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96027,"byte_end":96034,"line_start":125,"line_end":125,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96151,"byte_end":96158,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97307,"byte_end":97314,"line_start":186,"line_end":186,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102376,"byte_end":102383,"line_start":386,"line_end":386,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102984,"byte_end":102991,"line_start":410,"line_end":410,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105825,"byte_end":105832,"line_start":488,"line_end":488,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106021,"byte_end":106028,"line_start":495,"line_end":495,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106165,"byte_end":106172,"line_start":502,"line_end":502,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106352,"byte_end":106359,"line_start":511,"line_end":511,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106599,"byte_end":106606,"line_start":520,"line_end":520,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106793,"byte_end":106800,"line_start":528,"line_end":528,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107051,"byte_end":107058,"line_start":537,"line_end":537,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107198,"byte_end":107205,"line_start":544,"line_end":544,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107415,"byte_end":107422,"line_start":553,"line_end":553,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107662,"byte_end":107669,"line_start":562,"line_end":562,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107856,"byte_end":107863,"line_start":570,"line_end":570,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108114,"byte_end":108121,"line_start":579,"line_end":579,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108271,"byte_end":108278,"line_start":586,"line_end":586,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108499,"byte_end":108506,"line_start":595,"line_end":595,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108663,"byte_end":108670,"line_start":602,"line_end":602,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108916,"byte_end":108923,"line_start":611,"line_end":611,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109097,"byte_end":109104,"line_start":619,"line_end":619,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109325,"byte_end":109332,"line_start":628,"line_end":628,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109489,"byte_end":109496,"line_start":635,"line_end":635,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109742,"byte_end":109749,"line_start":644,"line_end":644,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109915,"byte_end":109922,"line_start":652,"line_end":652,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110029,"byte_end":110036,"line_start":659,"line_end":659,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110190,"byte_end":110197,"line_start":667,"line_end":667,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110349,"byte_end":110356,"line_start":675,"line_end":675,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110536,"byte_end":110543,"line_start":683,"line_end":683,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110868,"byte_end":110875,"line_start":695,"line_end":695,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110976,"byte_end":110983,"line_start":701,"line_end":701,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111088,"byte_end":111095,"line_start":707,"line_end":707,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111196,"byte_end":111203,"line_start":713,"line_end":713,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111524,"byte_end":111531,"line_start":731,"line_end":731,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111570,"byte_end":111577,"line_start":733,"line_end":733,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":112515,"byte_end":112522,"line_start":776,"line_end":776,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":112570,"byte_end":112577,"line_start":778,"line_end":778,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":112748,"byte_end":112755,"line_start":787,"line_end":787,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":112957,"byte_end":112964,"line_start":798,"line_end":798,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113205,"byte_end":113212,"line_start":808,"line_end":808,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113349,"byte_end":113356,"line_start":814,"line_end":814,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114593,"byte_end":114600,"line_start":871,"line_end":871,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120191,"byte_end":120198,"line_start":1086,"line_end":1086,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120937,"byte_end":120944,"line_start":1118,"line_end":1118,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123864,"byte_end":123871,"line_start":1200,"line_end":1200,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124128,"byte_end":124135,"line_start":1211,"line_end":1211,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124272,"byte_end":124279,"line_start":1218,"line_end":1218,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1170},{"krate":0,"index":1171}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124468,"byte_end":124475,"line_start":1227,"line_end":1227,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1175},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124784,"byte_end":124791,"line_start":1240,"line_end":1240,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125009,"byte_end":125016,"line_start":1249,"line_end":1249,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125285,"byte_end":125292,"line_start":1258,"line_end":1258,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125432,"byte_end":125439,"line_start":1265,"line_end":1265,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125667,"byte_end":125674,"line_start":1274,"line_end":1274,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1198},{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125983,"byte_end":125990,"line_start":1287,"line_end":1287,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":126208,"byte_end":126215,"line_start":1296,"line_end":1296,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1207},{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":126484,"byte_end":126491,"line_start":1305,"line_end":1305,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":126641,"byte_end":126648,"line_start":1312,"line_end":1312,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":126923,"byte_end":126930,"line_start":1325,"line_end":1325,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":127132,"byte_end":127139,"line_start":1334,"line_end":1334,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":127450,"byte_end":127457,"line_start":1347,"line_end":1347,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":127603,"byte_end":127610,"line_start":1354,"line_end":1354,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":127885,"byte_end":127892,"line_start":1367,"line_end":1367,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128094,"byte_end":128101,"line_start":1376,"line_end":1376,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128412,"byte_end":128419,"line_start":1389,"line_end":1389,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128557,"byte_end":128564,"line_start":1396,"line_end":1396,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128671,"byte_end":128678,"line_start":1403,"line_end":1403,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128832,"byte_end":128839,"line_start":1411,"line_end":1411,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128991,"byte_end":128998,"line_start":1419,"line_end":1419,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":129178,"byte_end":129185,"line_start":1427,"line_end":1427,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":129644,"byte_end":129651,"line_start":1445,"line_end":1445,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":129760,"byte_end":129767,"line_start":1451,"line_end":1451,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":129881,"byte_end":129888,"line_start":1457,"line_end":1457,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":130003,"byte_end":130010,"line_start":1463,"line_end":1463,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145703,"byte_end":145707,"line_start":72,"line_end":72,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145850,"byte_end":145854,"line_start":79,"line_end":79,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145893,"byte_end":145897,"line_start":81,"line_end":81,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146039,"byte_end":146043,"line_start":87,"line_end":87,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146191,"byte_end":146195,"line_start":93,"line_end":93,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146244,"byte_end":146248,"line_start":95,"line_end":95,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146521,"byte_end":146525,"line_start":105,"line_end":105,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146639,"byte_end":146643,"line_start":111,"line_end":111,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146811,"byte_end":146815,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147216,"byte_end":147220,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148488,"byte_end":148492,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149011,"byte_end":149015,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149371,"byte_end":149375,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149795,"byte_end":149799,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150369,"byte_end":150373,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151220,"byte_end":151224,"line_start":300,"line_end":300,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151842,"byte_end":151846,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1406}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152659,"byte_end":152663,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153031,"byte_end":153035,"line_start":355,"line_end":355,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153258,"byte_end":153262,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153646,"byte_end":153650,"line_start":382,"line_end":382,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153988,"byte_end":153992,"line_start":395,"line_end":395,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154116,"byte_end":154120,"line_start":402,"line_end":402,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154255,"byte_end":154259,"line_start":409,"line_end":409,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154459,"byte_end":154463,"line_start":420,"line_end":420,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154683,"byte_end":154687,"line_start":429,"line_end":429,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154830,"byte_end":154834,"line_start":436,"line_end":436,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1449},{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155062,"byte_end":155066,"line_start":445,"line_end":445,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155229,"byte_end":155233,"line_start":452,"line_end":452,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155491,"byte_end":155495,"line_start":461,"line_end":461,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155701,"byte_end":155705,"line_start":469,"line_end":469,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1469},{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155963,"byte_end":155967,"line_start":478,"line_end":478,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156136,"byte_end":156140,"line_start":486,"line_end":486,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156781,"byte_end":156785,"line_start":509,"line_end":509,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1485},{"krate":0,"index":1487},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1495}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160129,"byte_end":160133,"line_start":597,"line_end":597,"column_start":76,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":162195,"byte_end":162199,"line_start":648,"line_end":648,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1505}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172722,"byte_end":172738,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1522}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173051,"byte_end":173067,"line_start":39,"line_end":39,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173349,"byte_end":173365,"line_start":48,"line_end":48,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177751,"byte_end":177767,"line_start":187,"line_end":187,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177943,"byte_end":177959,"line_start":194,"line_end":194,"column_start":67,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":1554}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181848,"byte_end":181858,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181911,"byte_end":181921,"line_start":42,"line_end":42,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182103,"byte_end":182113,"line_start":51,"line_end":51,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182175,"byte_end":182185,"line_start":53,"line_end":53,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182336,"byte_end":182346,"line_start":62,"line_end":62,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182491,"byte_end":182501,"line_start":71,"line_end":71,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183052,"byte_end":183062,"line_start":96,"line_end":96,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184707,"byte_end":184717,"line_start":159,"line_end":159,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184922,"byte_end":184932,"line_start":169,"line_end":169,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186331,"byte_end":186341,"line_start":209,"line_end":209,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187761,"byte_end":187771,"line_start":251,"line_end":251,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187824,"byte_end":187834,"line_start":253,"line_end":253,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188101,"byte_end":188111,"line_start":265,"line_end":265,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188173,"byte_end":188183,"line_start":267,"line_end":267,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1679}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188389,"byte_end":188399,"line_start":276,"line_end":276,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1684}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188612,"byte_end":188622,"line_start":288,"line_end":288,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1690},{"krate":0,"index":1691}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189493,"byte_end":189503,"line_start":319,"line_end":319,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1700},{"krate":0,"index":1701}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192050,"byte_end":192060,"line_start":403,"line_end":403,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":201698,"byte_end":201708,"line_start":706,"line_end":706,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1733}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":201963,"byte_end":201973,"line_start":716,"line_end":716,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1738},{"krate":0,"index":1739}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212573,"byte_end":212578,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217240,"byte_end":217245,"line_start":241,"line_end":241,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1789},{"krate":0,"index":1791}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":219131,"byte_end":219136,"line_start":300,"line_end":300,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1798},{"krate":0,"index":1799}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":219359,"byte_end":219364,"line_start":310,"line_end":310,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1804},{"krate":0,"index":1805}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":219599,"byte_end":219604,"line_start":320,"line_end":320,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1810},{"krate":0,"index":1811}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":219962,"byte_end":219967,"line_start":332,"line_end":332,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220102,"byte_end":220107,"line_start":338,"line_end":338,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220170,"byte_end":220175,"line_start":340,"line_end":340,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220330,"byte_end":220335,"line_start":346,"line_end":346,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220470,"byte_end":220475,"line_start":352,"line_end":352,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220612,"byte_end":220617,"line_start":358,"line_end":358,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220680,"byte_end":220685,"line_start":360,"line_end":360,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1844}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220830,"byte_end":220835,"line_start":366,"line_end":366,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220952,"byte_end":220957,"line_start":372,"line_end":372,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":221087,"byte_end":221092,"line_start":378,"line_end":378,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224087,"byte_end":224100,"line_start":60,"line_end":60,"column_start":27,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224139,"byte_end":224152,"line_start":62,"line_end":62,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1893}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224436,"byte_end":224449,"line_start":74,"line_end":74,"column_start":19,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224497,"byte_end":224510,"line_start":76,"line_end":76,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224766,"byte_end":224779,"line_start":88,"line_end":88,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225019,"byte_end":225032,"line_start":100,"line_end":100,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225276,"byte_end":225289,"line_start":110,"line_end":110,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225565,"byte_end":225578,"line_start":122,"line_end":122,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":228656,"byte_end":228669,"line_start":229,"line_end":229,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1930},{"krate":0,"index":1931}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":229004,"byte_end":229017,"line_start":244,"line_end":244,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1935},{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":229352,"byte_end":229365,"line_start":258,"line_end":258,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1940}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":229606,"byte_end":229619,"line_start":268,"line_end":268,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1945},{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":229992,"byte_end":230005,"line_start":282,"line_end":282,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":230151,"byte_end":230164,"line_start":289,"line_end":289,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1955}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":230499,"byte_end":230512,"line_start":303,"line_end":303,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1959}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":230753,"byte_end":230766,"line_start":313,"line_end":313,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1964},{"krate":0,"index":1965}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":231139,"byte_end":231152,"line_start":327,"line_end":327,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1969}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235594,"byte_end":235600,"line_start":41,"line_end":41,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235639,"byte_end":235645,"line_start":43,"line_end":43,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237077,"byte_end":237083,"line_start":102,"line_end":102,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237131,"byte_end":237137,"line_start":104,"line_end":104,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2025}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237305,"byte_end":237311,"line_start":113,"line_end":113,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2029}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237498,"byte_end":237504,"line_start":123,"line_end":123,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2034}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237721,"byte_end":237727,"line_start":131,"line_end":131,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2038}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237843,"byte_end":237849,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238980,"byte_end":238986,"line_start":184,"line_end":184,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2050},{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":2060},{"krate":0,"index":2061}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242353,"byte_end":242359,"line_start":307,"line_end":307,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2065},{"krate":0,"index":2067},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245527,"byte_end":245533,"line_start":395,"line_end":395,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246126,"byte_end":246132,"line_start":411,"line_end":411,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248028,"byte_end":248034,"line_start":470,"line_end":470,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2094},{"krate":0,"index":2095}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248593,"byte_end":248599,"line_start":488,"line_end":488,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2099}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248755,"byte_end":248761,"line_start":496,"line_end":496,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248915,"byte_end":248921,"line_start":504,"line_end":504,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249077,"byte_end":249083,"line_start":512,"line_end":512,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2111}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249211,"byte_end":249217,"line_start":519,"line_end":519,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2115},{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249396,"byte_end":249402,"line_start":528,"line_end":528,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2120},{"krate":0,"index":2121}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249650,"byte_end":249656,"line_start":537,"line_end":537,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2125},{"krate":0,"index":2126}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249856,"byte_end":249862,"line_start":544,"line_end":544,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2130}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250049,"byte_end":250055,"line_start":550,"line_end":550,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":2136}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250209,"byte_end":250215,"line_start":556,"line_end":556,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250387,"byte_end":250393,"line_start":564,"line_end":564,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2145},{"krate":0,"index":2146}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250624,"byte_end":250630,"line_start":573,"line_end":573,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2150}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250812,"byte_end":250818,"line_start":581,"line_end":581,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2154},{"krate":0,"index":2155}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251043,"byte_end":251049,"line_start":590,"line_end":590,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251235,"byte_end":251241,"line_start":598,"line_end":598,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2164},{"krate":0,"index":2165}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251500,"byte_end":251506,"line_start":607,"line_end":607,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2169}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251652,"byte_end":251658,"line_start":614,"line_end":614,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2173},{"krate":0,"index":2174}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251883,"byte_end":251889,"line_start":623,"line_end":623,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2178}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":252075,"byte_end":252081,"line_start":631,"line_end":631,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":252340,"byte_end":252346,"line_start":640,"line_end":640,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2188}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253104,"byte_end":253110,"line_start":675,"line_end":675,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2195}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253235,"byte_end":253241,"line_start":682,"line_end":682,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253365,"byte_end":253371,"line_start":689,"line_end":689,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2206}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253489,"byte_end":253495,"line_start":696,"line_end":696,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2211}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253619,"byte_end":253625,"line_start":703,"line_end":703,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260382,"byte_end":260388,"line_start":940,"line_end":940,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260427,"byte_end":260433,"line_start":942,"line_end":942,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2229}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":261432,"byte_end":261438,"line_start":985,"line_end":985,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":261486,"byte_end":261492,"line_start":987,"line_end":987,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2236}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":261689,"byte_end":261695,"line_start":996,"line_end":996,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2240}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":261910,"byte_end":261916,"line_start":1007,"line_end":1007,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2245}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262200,"byte_end":262206,"line_start":1017,"line_end":1017,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2249}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262342,"byte_end":262348,"line_start":1023,"line_end":1023,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263577,"byte_end":263583,"line_start":1071,"line_end":1071,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2261},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267171,"byte_end":267177,"line_start":1194,"line_end":1194,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2276},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270077,"byte_end":270083,"line_start":1276,"line_end":1276,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2289},{"krate":0,"index":2290}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270721,"byte_end":270727,"line_start":1292,"line_end":1292,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2300}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272803,"byte_end":272809,"line_start":1360,"line_end":1360,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2304},{"krate":0,"index":2305}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273452,"byte_end":273458,"line_start":1380,"line_end":1380,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2309}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273614,"byte_end":273620,"line_start":1388,"line_end":1388,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2313}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273774,"byte_end":273780,"line_start":1396,"line_end":1396,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2317}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273936,"byte_end":273942,"line_start":1404,"line_end":1404,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2321}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":274084,"byte_end":274090,"line_start":1411,"line_end":1411,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2325},{"krate":0,"index":2326}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":274282,"byte_end":274288,"line_start":1420,"line_end":1420,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2330},{"krate":0,"index":2331}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":274609,"byte_end":274615,"line_start":1433,"line_end":1433,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":274888,"byte_end":274894,"line_start":1444,"line_end":1444,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275081,"byte_end":275087,"line_start":1450,"line_end":1450,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275241,"byte_end":275247,"line_start":1456,"line_end":1456,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2351}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275454,"byte_end":275460,"line_start":1465,"line_end":1465,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2355},{"krate":0,"index":2356}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275764,"byte_end":275770,"line_start":1478,"line_end":1478,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2360}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275987,"byte_end":275993,"line_start":1487,"line_end":1487,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2365}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":276285,"byte_end":276291,"line_start":1500,"line_end":1500,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":276506,"byte_end":276512,"line_start":1509,"line_end":1509,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2374},{"krate":0,"index":2375}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":276840,"byte_end":276846,"line_start":1522,"line_end":1522,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2379}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":276992,"byte_end":276998,"line_start":1529,"line_end":1529,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2383},{"krate":0,"index":2384}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":277290,"byte_end":277296,"line_start":1542,"line_end":1542,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2388}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":277511,"byte_end":277517,"line_start":1551,"line_end":1551,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2393},{"krate":0,"index":2394}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":277845,"byte_end":277851,"line_start":1564,"line_end":1564,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278428,"byte_end":278434,"line_start":1590,"line_end":1590,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2402}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278564,"byte_end":278570,"line_start":1597,"line_end":1597,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2407}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278706,"byte_end":278712,"line_start":1604,"line_end":1604,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2413}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278839,"byte_end":278845,"line_start":1611,"line_end":1611,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2418}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278987,"byte_end":278993,"line_start":1618,"line_end":1618,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2422}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288671,"byte_end":288682,"line_start":87,"line_end":87,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288735,"byte_end":288746,"line_start":89,"line_end":89,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289100,"byte_end":289111,"line_start":103,"line_end":103,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289173,"byte_end":289184,"line_start":105,"line_end":105,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2485}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289515,"byte_end":289526,"line_start":118,"line_end":118,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2490}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289799,"byte_end":289810,"line_start":132,"line_end":132,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291475,"byte_end":291486,"line_start":182,"line_end":182,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2515},{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2521}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":295234,"byte_end":295245,"line_start":306,"line_end":306,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2526},{"krate":0,"index":2528}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296164,"byte_end":296175,"line_start":332,"line_end":332,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2534},{"krate":0,"index":2535}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296809,"byte_end":296820,"line_start":361,"line_end":361,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297607,"byte_end":297618,"line_start":383,"line_end":383,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2546},{"krate":0,"index":2549},{"krate":0,"index":2550}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298720,"byte_end":298731,"line_start":428,"line_end":428,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2557}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299699,"byte_end":299710,"line_start":461,"line_end":461,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2562},{"krate":0,"index":2564},{"krate":0,"index":2565}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300802,"byte_end":300813,"line_start":509,"line_end":509,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302637,"byte_end":302648,"line_start":568,"line_end":568,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":303783,"byte_end":303794,"line_start":607,"line_end":607,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2585}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":304002,"byte_end":304013,"line_start":616,"line_end":616,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2590},{"krate":0,"index":2591}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":304599,"byte_end":304610,"line_start":629,"line_end":629,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2596}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":313435,"byte_end":313446,"line_start":108,"line_end":108,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":313499,"byte_end":313510,"line_start":110,"line_end":110,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2665}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":314214,"byte_end":314225,"line_start":134,"line_end":134,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":314287,"byte_end":314298,"line_start":136,"line_end":136,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2674}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":314999,"byte_end":315010,"line_start":159,"line_end":159,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2679}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315543,"byte_end":315554,"line_start":183,"line_end":183,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2685},{"krate":0,"index":2686},{"krate":0,"index":2689}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317962,"byte_end":317973,"line_start":264,"line_end":264,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2701},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2713},{"krate":0,"index":2715}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323418,"byte_end":323429,"line_start":416,"line_end":416,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2725}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":325268,"byte_end":325279,"line_start":491,"line_end":491,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2732}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327547,"byte_end":327558,"line_start":526,"line_end":526,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2738},{"krate":0,"index":2741},{"krate":0,"index":2742}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328728,"byte_end":328739,"line_start":571,"line_end":571,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2747},{"krate":0,"index":2748},{"krate":0,"index":2749}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330415,"byte_end":330426,"line_start":627,"line_end":627,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2754},{"krate":0,"index":2757},{"krate":0,"index":2758}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331775,"byte_end":331786,"line_start":677,"line_end":677,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2763},{"krate":0,"index":2764},{"krate":0,"index":2765},{"krate":0,"index":2766},{"krate":0,"index":2767},{"krate":0,"index":2768},{"krate":0,"index":2769},{"krate":0,"index":2770},{"krate":0,"index":2771}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":337474,"byte_end":337485,"line_start":817,"line_end":817,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2780},{"krate":0,"index":2781},{"krate":0,"index":2782}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":345035,"byte_end":345046,"line_start":988,"line_end":988,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2787}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":346592,"byte_end":346603,"line_start":1029,"line_end":1029,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2792},{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348102,"byte_end":348113,"line_start":1060,"line_end":1060,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2800},{"krate":0,"index":2801}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":349081,"byte_end":349092,"line_start":1085,"line_end":1085,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2806},{"krate":0,"index":2807}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":350026,"byte_end":350037,"line_start":1101,"line_end":1101,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2812}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":350231,"byte_end":350242,"line_start":1110,"line_end":1110,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2817}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363602,"byte_end":363615,"line_start":74,"line_end":74,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363668,"byte_end":363681,"line_start":76,"line_end":76,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2864}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363889,"byte_end":363902,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363964,"byte_end":363977,"line_start":88,"line_end":88,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2873}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364141,"byte_end":364154,"line_start":97,"line_end":97,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2878}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364319,"byte_end":364332,"line_start":107,"line_end":107,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2884},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365688,"byte_end":365701,"line_start":164,"line_end":164,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2893},{"krate":0,"index":2894},{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2901},{"krate":0,"index":2902},{"krate":0,"index":2903}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367926,"byte_end":367939,"line_start":255,"line_end":255,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2909},{"krate":0,"index":2910}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":368227,"byte_end":368240,"line_start":263,"line_end":263,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":2915}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":368453,"byte_end":368466,"line_start":270,"line_end":270,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2921},{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":368754,"byte_end":368767,"line_start":278,"line_end":278,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":2927}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":368957,"byte_end":368970,"line_start":285,"line_end":285,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2932}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369120,"byte_end":369133,"line_start":291,"line_end":291,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2937}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369280,"byte_end":369293,"line_start":297,"line_end":297,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2942}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369470,"byte_end":369483,"line_start":306,"line_end":306,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2947}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369624,"byte_end":369637,"line_start":315,"line_end":315,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2952}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370177,"byte_end":370190,"line_start":334,"line_end":334,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370243,"byte_end":370256,"line_start":336,"line_end":336,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2969}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371260,"byte_end":371273,"line_start":379,"line_end":379,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371335,"byte_end":371348,"line_start":381,"line_end":381,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2978}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371533,"byte_end":371546,"line_start":390,"line_end":390,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2983}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371735,"byte_end":371748,"line_start":401,"line_end":401,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373269,"byte_end":373282,"line_start":461,"line_end":461,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3005},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3010}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":376138,"byte_end":376151,"line_start":575,"line_end":575,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3016},{"krate":0,"index":3017}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":376457,"byte_end":376470,"line_start":583,"line_end":583,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3022}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":376710,"byte_end":376723,"line_start":591,"line_end":591,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3028},{"krate":0,"index":3029}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377029,"byte_end":377042,"line_start":599,"line_end":599,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3034}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377259,"byte_end":377272,"line_start":607,"line_end":607,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3039}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377427,"byte_end":377440,"line_start":613,"line_end":613,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3044}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377595,"byte_end":377608,"line_start":619,"line_end":619,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3049}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377793,"byte_end":377806,"line_start":628,"line_end":628,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3054}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377947,"byte_end":377960,"line_start":637,"line_end":637,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3059}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389613,"byte_end":389621,"line_start":47,"line_end":47,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389660,"byte_end":389668,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3125}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":390935,"byte_end":390943,"line_start":106,"line_end":106,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":390990,"byte_end":390998,"line_start":108,"line_end":108,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3132}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391130,"byte_end":391138,"line_start":114,"line_end":114,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3136}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391285,"byte_end":391293,"line_start":121,"line_end":121,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3141}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391490,"byte_end":391498,"line_start":129,"line_end":129,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3145}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391672,"byte_end":391680,"line_start":135,"line_end":135,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3149}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391798,"byte_end":391806,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3153},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3158},{"krate":0,"index":3159},{"krate":0,"index":3160},{"krate":0,"index":3161},{"krate":0,"index":3162},{"krate":0,"index":3163}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394592,"byte_end":394600,"line_start":258,"line_end":258,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3167},{"krate":0,"index":3168},{"krate":0,"index":3169},{"krate":0,"index":3170},{"krate":0,"index":3171},{"krate":0,"index":3172},{"krate":0,"index":3174},{"krate":0,"index":3176},{"krate":0,"index":3177},{"krate":0,"index":3178},{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3181},{"krate":0,"index":3182}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398115,"byte_end":398123,"line_start":401,"line_end":401,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3188}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399009,"byte_end":399017,"line_start":433,"line_end":433,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3192},{"krate":0,"index":3193},{"krate":0,"index":3194},{"krate":0,"index":3195},{"krate":0,"index":3196},{"krate":0,"index":3197},{"krate":0,"index":3198}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401006,"byte_end":401014,"line_start":505,"line_end":505,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3202},{"krate":0,"index":3203}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402126,"byte_end":402134,"line_start":540,"line_end":540,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3207},{"krate":0,"index":3208},{"krate":0,"index":3209},{"krate":0,"index":3210},{"krate":0,"index":3211}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403436,"byte_end":403444,"line_start":584,"line_end":584,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3215},{"krate":0,"index":3216}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403994,"byte_end":404002,"line_start":604,"line_end":604,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3220},{"krate":0,"index":3222},{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3226},{"krate":0,"index":3227},{"krate":0,"index":3228},{"krate":0,"index":3229}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406854,"byte_end":406862,"line_start":682,"line_end":682,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3233},{"krate":0,"index":3234}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407027,"byte_end":407035,"line_start":691,"line_end":691,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3238},{"krate":0,"index":3239}],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407254,"byte_end":407262,"line_start":700,"line_end":700,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3243},{"krate":0,"index":3244}],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407487,"byte_end":407495,"line_start":709,"line_end":709,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3248}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407682,"byte_end":407690,"line_start":715,"line_end":715,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3254}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407860,"byte_end":407868,"line_start":721,"line_end":721,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3259}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407998,"byte_end":408006,"line_start":728,"line_end":728,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3263},{"krate":0,"index":3264}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":408246,"byte_end":408254,"line_start":737,"line_end":737,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":3268}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":408394,"byte_end":408402,"line_start":744,"line_end":744,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3272},{"krate":0,"index":3273}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":408622,"byte_end":408630,"line_start":753,"line_end":753,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3277}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":408787,"byte_end":408795,"line_start":760,"line_end":760,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3282},{"krate":0,"index":3283}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409040,"byte_end":409048,"line_start":769,"line_end":769,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3287}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409222,"byte_end":409230,"line_start":777,"line_end":777,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3291},{"krate":0,"index":3292}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409450,"byte_end":409458,"line_start":786,"line_end":786,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3296}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409615,"byte_end":409623,"line_start":793,"line_end":793,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3301},{"krate":0,"index":3302}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409868,"byte_end":409876,"line_start":802,"line_end":802,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3306}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410044,"byte_end":410052,"line_start":810,"line_end":810,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3310}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410209,"byte_end":410217,"line_start":818,"line_end":818,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3314}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410372,"byte_end":410380,"line_start":826,"line_end":826,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3318}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410564,"byte_end":410572,"line_start":834,"line_end":834,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3322},{"krate":0,"index":3323}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410895,"byte_end":410903,"line_start":846,"line_end":846,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3328}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411004,"byte_end":411012,"line_start":852,"line_end":852,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3334}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411115,"byte_end":411123,"line_start":858,"line_end":858,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3339}],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411224,"byte_end":411232,"line_start":864,"line_end":864,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3343}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411352,"byte_end":411360,"line_start":870,"line_end":870,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3347}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411856,"byte_end":411864,"line_start":891,"line_end":891,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411903,"byte_end":411911,"line_start":893,"line_end":893,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3361}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":412857,"byte_end":412865,"line_start":936,"line_end":936,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":412912,"byte_end":412920,"line_start":938,"line_end":938,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3368}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413073,"byte_end":413081,"line_start":944,"line_end":944,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3372}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413252,"byte_end":413260,"line_start":952,"line_end":952,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3377}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413462,"byte_end":413470,"line_start":960,"line_end":960,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3381}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413711,"byte_end":413719,"line_start":970,"line_end":970,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3385}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413857,"byte_end":413865,"line_start":976,"line_end":976,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3389},{"krate":0,"index":3390},{"krate":0,"index":3391},{"krate":0,"index":3392},{"krate":0,"index":3393},{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3396}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416071,"byte_end":416079,"line_start":1069,"line_end":1069,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3400},{"krate":0,"index":3401},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":3406},{"krate":0,"index":3408},{"krate":0,"index":3410},{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3419}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420202,"byte_end":420210,"line_start":1233,"line_end":1233,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3423},{"krate":0,"index":3424}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420797,"byte_end":420805,"line_start":1255,"line_end":1255,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3428},{"krate":0,"index":3429},{"krate":0,"index":3430},{"krate":0,"index":3431},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":3434},{"krate":0,"index":3435}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423136,"byte_end":423144,"line_start":1340,"line_end":1340,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3439},{"krate":0,"index":3440}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424298,"byte_end":424306,"line_start":1375,"line_end":1375,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3444},{"krate":0,"index":3445},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3448}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425812,"byte_end":425820,"line_start":1429,"line_end":1429,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3452},{"krate":0,"index":3453}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426438,"byte_end":426446,"line_start":1451,"line_end":1451,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3457},{"krate":0,"index":3459},{"krate":0,"index":3461},{"krate":0,"index":3462},{"krate":0,"index":3463},{"krate":0,"index":3464},{"krate":0,"index":3465},{"krate":0,"index":3466}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429375,"byte_end":429383,"line_start":1533,"line_end":1533,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3470},{"krate":0,"index":3471}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429557,"byte_end":429565,"line_start":1542,"line_end":1542,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3475},{"krate":0,"index":3476}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429806,"byte_end":429814,"line_start":1551,"line_end":1551,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3481},{"krate":0,"index":3482}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430048,"byte_end":430056,"line_start":1560,"line_end":1560,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3486}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430243,"byte_end":430251,"line_start":1566,"line_end":1566,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3492}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430421,"byte_end":430429,"line_start":1572,"line_end":1572,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3497}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430559,"byte_end":430567,"line_start":1579,"line_end":1579,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3501},{"krate":0,"index":3502}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430825,"byte_end":430833,"line_start":1588,"line_end":1588,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":3506}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430973,"byte_end":430981,"line_start":1595,"line_end":1595,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3510},{"krate":0,"index":3511}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":431264,"byte_end":431272,"line_start":1608,"line_end":1608,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3515}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":431429,"byte_end":431437,"line_start":1615,"line_end":1615,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3520},{"krate":0,"index":3521}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":431747,"byte_end":431755,"line_start":1628,"line_end":1628,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3525}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":431956,"byte_end":431964,"line_start":1637,"line_end":1637,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3529},{"krate":0,"index":3530}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":432247,"byte_end":432255,"line_start":1650,"line_end":1650,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3534}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":432412,"byte_end":432420,"line_start":1657,"line_end":1657,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3539},{"krate":0,"index":3540}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":432730,"byte_end":432738,"line_start":1670,"line_end":1670,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3544}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":432933,"byte_end":432941,"line_start":1679,"line_end":1679,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3548}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":433098,"byte_end":433106,"line_start":1687,"line_end":1687,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3552}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":433261,"byte_end":433269,"line_start":1695,"line_end":1695,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3556}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":433453,"byte_end":433461,"line_start":1703,"line_end":1703,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3560},{"krate":0,"index":3561}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":433918,"byte_end":433926,"line_start":1721,"line_end":1721,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3566}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434035,"byte_end":434043,"line_start":1727,"line_end":1727,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3572}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434155,"byte_end":434163,"line_start":1733,"line_end":1733,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3577}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434278,"byte_end":434286,"line_start":1739,"line_end":1739,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3581}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434780,"byte_end":434792,"line_start":1760,"line_end":1760,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3583},{"krate":0,"index":3584},{"krate":0,"index":3585},{"krate":0,"index":3586},{"krate":0,"index":3587},{"krate":0,"index":3588},{"krate":0,"index":3589},{"krate":0,"index":3592},{"krate":0,"index":3595}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Inherent","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437224,"byte_end":437236,"line_start":1837,"line_end":1837,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3599},{"krate":0,"index":3600},{"krate":0,"index":3601},{"krate":0,"index":3602},{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605},{"krate":0,"index":3608},{"krate":0,"index":3611},{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3616}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2692,"byte_end":2700,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":164}},{"kind":"Mod","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2710,"byte_end":2719,"line_start":68,"line_end":68,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":171}},{"kind":"Mod","span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/lib.rs","byte_start":2776,"byte_end":2779,"line_start":73,"line_end":73,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":809}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6672,"byte_end":6677,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":6851,"byte_end":6856,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7124,"byte_end":7129,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":7668,"byte_end":7673,"line_start":77,"line_end":77,"column_start":9,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8358,"byte_end":8363,"line_start":104,"line_end":104,"column_start":9,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8514,"byte_end":8519,"line_start":114,"line_end":114,"column_start":9,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":8623,"byte_end":8628,"line_start":123,"line_end":123,"column_start":9,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9068,"byte_end":9073,"line_start":148,"line_end":148,"column_start":9,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9788,"byte_end":9793,"line_start":178,"line_end":178,"column_start":37,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":9974,"byte_end":9979,"line_start":185,"line_end":185,"column_start":51,"column_end":56},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10139,"byte_end":10144,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10309,"byte_end":10314,"line_start":198,"line_end":198,"column_start":55,"column_end":60},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10465,"byte_end":10470,"line_start":204,"line_end":204,"column_start":37,"column_end":42},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10618,"byte_end":10623,"line_start":210,"line_end":210,"column_start":47,"column_end":52},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10816,"byte_end":10821,"line_start":217,"line_end":217,"column_start":37,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":10969,"byte_end":10974,"line_start":223,"line_end":223,"column_start":47,"column_end":52},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11141,"byte_end":11146,"line_start":231,"line_end":231,"column_start":40,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11330,"byte_end":11335,"line_start":239,"line_end":239,"column_start":40,"column_end":45},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11463,"byte_end":11468,"line_start":245,"line_end":245,"column_start":40,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11652,"byte_end":11657,"line_start":253,"line_end":253,"column_start":40,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11779,"byte_end":11784,"line_start":259,"line_end":259,"column_start":34,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3667},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/angle.rs","byte_start":11925,"byte_end":11930,"line_start":266,"line_end":266,"column_start":38,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3667},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19582,"byte_end":19587,"line_start":70,"line_end":70,"column_start":27,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19726,"byte_end":19731,"line_start":77,"line_end":77,"column_start":27,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19770,"byte_end":19775,"line_start":79,"line_end":79,"column_start":29,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":19913,"byte_end":19918,"line_start":85,"line_end":85,"column_start":37,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20058,"byte_end":20063,"line_start":91,"line_end":91,"column_start":23,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20112,"byte_end":20117,"line_start":93,"line_end":93,"column_start":39,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20318,"byte_end":20323,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":20485,"byte_end":20490,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":22202,"byte_end":22207,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23649,"byte_end":23654,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":23939,"byte_end":23944,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":24426,"byte_end":24431,"line_start":249,"line_end":249,"column_start":12,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":25646,"byte_end":25651,"line_start":285,"line_end":285,"column_start":12,"column_end":17},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":26907,"byte_end":26912,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27225,"byte_end":27230,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27451,"byte_end":27456,"line_start":355,"line_end":355,"column_start":12,"column_end":17},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27655,"byte_end":27660,"line_start":366,"line_end":366,"column_start":12,"column_end":17},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":27860,"byte_end":27865,"line_start":376,"line_end":376,"column_start":35,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28083,"byte_end":28088,"line_start":385,"line_end":385,"column_start":47,"column_end":52},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28231,"byte_end":28236,"line_start":392,"line_end":392,"column_start":35,"column_end":40},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28454,"byte_end":28459,"line_start":401,"line_end":401,"column_start":47,"column_end":52},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28622,"byte_end":28627,"line_start":408,"line_end":408,"column_start":55,"column_end":60},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":28875,"byte_end":28880,"line_start":417,"line_end":417,"column_start":60,"column_end":65},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29074,"byte_end":29079,"line_start":425,"line_end":425,"column_start":55,"column_end":60},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29327,"byte_end":29332,"line_start":434,"line_end":434,"column_start":60,"column_end":65},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":29483,"byte_end":29488,"line_start":442,"line_end":442,"column_start":12,"column_end":17},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":30370,"byte_end":30375,"line_start":476,"line_end":476,"column_start":28,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33214,"byte_end":33219,"line_start":554,"line_end":554,"column_start":12,"column_end":17},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":33894,"byte_end":33899,"line_start":573,"line_end":573,"column_start":12,"column_end":17},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box2d.rs","byte_start":34561,"byte_end":34566,"line_start":596,"line_end":596,"column_start":35,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":206},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":42962,"byte_end":42967,"line_start":40,"line_end":40,"column_start":27,"column_end":32},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43106,"byte_end":43111,"line_start":47,"line_end":47,"column_start":27,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43150,"byte_end":43155,"line_start":49,"line_end":49,"column_start":29,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43293,"byte_end":43298,"line_start":55,"line_end":55,"column_start":37,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43438,"byte_end":43443,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43492,"byte_end":43497,"line_start":63,"line_end":63,"column_start":39,"column_end":44},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43698,"byte_end":43703,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":43865,"byte_end":43870,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":45896,"byte_end":45901,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47347,"byte_end":47352,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":47655,"byte_end":47660,"line_start":210,"line_end":210,"column_start":12,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48179,"byte_end":48184,"line_start":239,"line_end":239,"column_start":12,"column_end":17},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":48650,"byte_end":48655,"line_start":254,"line_end":254,"column_start":12,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50096,"byte_end":50101,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50418,"byte_end":50423,"line_start":320,"line_end":320,"column_start":12,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":50644,"byte_end":50649,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51219,"byte_end":51224,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51424,"byte_end":51429,"line_start":369,"line_end":369,"column_start":35,"column_end":40},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51647,"byte_end":51652,"line_start":378,"line_end":378,"column_start":47,"column_end":52},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":51813,"byte_end":51818,"line_start":386,"line_end":386,"column_start":35,"column_end":40},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52044,"byte_end":52049,"line_start":395,"line_end":395,"column_start":47,"column_end":52},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52230,"byte_end":52235,"line_start":403,"line_end":403,"column_start":55,"column_end":60},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52491,"byte_end":52496,"line_start":412,"line_end":412,"column_start":60,"column_end":65},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52698,"byte_end":52703,"line_start":420,"line_end":420,"column_start":55,"column_end":60},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":52959,"byte_end":52964,"line_start":429,"line_end":429,"column_start":60,"column_end":65},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":53123,"byte_end":53128,"line_start":437,"line_end":437,"column_start":12,"column_end":17},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":54136,"byte_end":54141,"line_start":477,"line_end":477,"column_start":28,"column_end":33},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57000,"byte_end":57005,"line_start":555,"line_end":555,"column_start":12,"column_end":17},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":57684,"byte_end":57689,"line_start":574,"line_end":574,"column_start":12,"column_end":17},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/box3d.rs","byte_start":58357,"byte_end":58362,"line_start":599,"line_end":599,"column_start":35,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68597,"byte_end":68614,"line_start":34,"line_end":34,"column_start":27,"column_end":44},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":68653,"byte_end":68670,"line_start":36,"line_end":36,"column_start":29,"column_end":46},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":69706,"byte_end":69723,"line_start":81,"line_end":81,"column_start":19,"column_end":36},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":69771,"byte_end":69788,"line_start":83,"line_end":83,"column_start":26,"column_end":43},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":69980,"byte_end":69997,"line_start":92,"line_end":92,"column_start":21,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70196,"byte_end":70213,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":70539,"byte_end":70556,"line_start":118,"line_end":118,"column_start":59,"column_end":76},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71361,"byte_end":71378,"line_start":148,"line_end":148,"column_start":43,"column_end":60},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71556,"byte_end":71573,"line_start":155,"line_end":155,"column_start":43,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71750,"byte_end":71767,"line_start":162,"line_end":162,"column_start":48,"column_end":65},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":71941,"byte_end":71958,"line_start":169,"line_end":169,"column_start":41,"column_end":58},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/homogen.rs","byte_start":72124,"byte_end":72141,"line_start":176,"line_end":176,"column_start":39,"column_end":56},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":571},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":74881,"byte_end":74887,"line_start":44,"line_end":44,"column_start":29,"column_end":35},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75005,"byte_end":75011,"line_start":50,"line_end":50,"column_start":27,"column_end":33},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75579,"byte_end":75585,"line_start":78,"line_end":78,"column_start":12,"column_end":18},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":75753,"byte_end":75759,"line_start":86,"line_end":86,"column_start":19,"column_end":25},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":76828,"byte_end":76834,"line_start":124,"line_end":124,"column_start":24,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77181,"byte_end":77187,"line_start":138,"line_end":138,"column_start":29,"column_end":35},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77639,"byte_end":77645,"line_start":151,"line_end":151,"column_start":39,"column_end":45},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77776,"byte_end":77782,"line_start":157,"line_end":157,"column_start":33,"column_end":39},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":77907,"byte_end":77913,"line_start":164,"line_end":164,"column_start":27,"column_end":33},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78041,"byte_end":78047,"line_start":171,"line_end":171,"column_start":25,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78250,"byte_end":78256,"line_start":180,"line_end":180,"column_start":39,"column_end":45},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78475,"byte_end":78481,"line_start":189,"line_end":189,"column_start":44,"column_end":50},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78689,"byte_end":78695,"line_start":196,"line_end":196,"column_start":74,"column_end":80},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":78869,"byte_end":78875,"line_start":203,"line_end":203,"column_start":37,"column_end":43},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79007,"byte_end":79013,"line_start":210,"line_end":210,"column_start":25,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79222,"byte_end":79228,"line_start":219,"line_end":219,"column_start":37,"column_end":43},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79406,"byte_end":79412,"line_start":226,"line_end":226,"column_start":39,"column_end":45},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":656},"to":{"krate":4,"index":457}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79709,"byte_end":79715,"line_start":237,"line_end":237,"column_start":48,"column_end":54},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":79937,"byte_end":79943,"line_start":247,"line_end":247,"column_start":28,"column_end":34},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":80172,"byte_end":80178,"line_start":257,"line_end":257,"column_start":56,"column_end":62},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":80327,"byte_end":80333,"line_start":265,"line_end":265,"column_start":28,"column_end":34},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":80562,"byte_end":80568,"line_start":275,"line_end":275,"column_start":56,"column_end":62},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":80746,"byte_end":80752,"line_start":283,"line_end":283,"column_start":52,"column_end":58},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81004,"byte_end":81010,"line_start":293,"line_end":293,"column_start":52,"column_end":58},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81222,"byte_end":81228,"line_start":303,"line_end":303,"column_start":25,"column_end":31},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81401,"byte_end":81407,"line_start":312,"line_end":312,"column_start":37,"column_end":43},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81532,"byte_end":81538,"line_start":318,"line_end":318,"column_start":39,"column_end":45},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":1833}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81677,"byte_end":81683,"line_start":324,"line_end":324,"column_start":23,"column_end":29},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81718,"byte_end":81724,"line_start":326,"line_end":326,"column_start":25,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":656},"to":{"krate":1,"index":1822}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81843,"byte_end":81849,"line_start":332,"line_end":332,"column_start":27,"column_end":33},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":656},"to":{"krate":0,"index":811}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/length.rs","byte_start":81979,"byte_end":81985,"line_start":339,"line_end":339,"column_start":41,"column_end":47},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":656},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90748,"byte_end":90749,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":814},"to":{"krate":0,"index":811}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":90889,"byte_end":90890,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":819},"to":{"krate":0,"index":816}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91031,"byte_end":91035,"line_start":49,"line_end":49,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":2081},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91306,"byte_end":91310,"line_start":57,"line_end":57,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":2081},"to":{"krate":0,"index":823}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/num.rs","byte_start":91616,"byte_end":91620,"line_start":65,"line_end":65,"column_start":17,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":2081},"to":{"krate":0,"index":825}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":94104,"byte_end":94111,"line_start":38,"line_end":38,"column_start":27,"column_end":34},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":94150,"byte_end":94157,"line_start":40,"line_end":40,"column_start":29,"column_end":36},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":95413,"byte_end":95420,"line_start":96,"line_end":96,"column_start":19,"column_end":26},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":95468,"byte_end":95475,"line_start":98,"line_end":98,"column_start":26,"column_end":33},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":95625,"byte_end":95632,"line_start":107,"line_end":107,"column_start":21,"column_end":28},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":95846,"byte_end":95853,"line_start":119,"line_end":119,"column_start":39,"column_end":46},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96027,"byte_end":96034,"line_start":125,"line_end":125,"column_start":33,"column_end":40},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":96151,"byte_end":96158,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":97307,"byte_end":97314,"line_start":186,"line_end":186,"column_start":18,"column_end":25},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102376,"byte_end":102383,"line_start":386,"line_end":386,"column_start":24,"column_end":31},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":102984,"byte_end":102991,"line_start":410,"line_end":410,"column_start":28,"column_end":35},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":105825,"byte_end":105832,"line_start":488,"line_end":488,"column_start":39,"column_end":46},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106021,"byte_end":106028,"line_start":495,"line_end":495,"column_start":40,"column_end":47},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106165,"byte_end":106172,"line_start":502,"line_end":502,"column_start":25,"column_end":32},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106352,"byte_end":106359,"line_start":511,"line_end":511,"column_start":39,"column_end":46},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106599,"byte_end":106606,"line_start":520,"line_end":520,"column_start":51,"column_end":58},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":106793,"byte_end":106800,"line_start":528,"line_end":528,"column_start":41,"column_end":48},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107051,"byte_end":107058,"line_start":537,"line_end":537,"column_start":69,"column_end":76},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107198,"byte_end":107205,"line_start":544,"line_end":544,"column_start":25,"column_end":32},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107415,"byte_end":107422,"line_start":553,"line_end":553,"column_start":39,"column_end":46},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107662,"byte_end":107669,"line_start":562,"line_end":562,"column_start":51,"column_end":58},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":107856,"byte_end":107863,"line_start":570,"line_end":570,"column_start":41,"column_end":48},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108114,"byte_end":108121,"line_start":579,"line_end":579,"column_start":69,"column_end":76},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108271,"byte_end":108278,"line_start":586,"line_end":586,"column_start":35,"column_end":42},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108499,"byte_end":108506,"line_start":595,"line_end":595,"column_start":56,"column_end":63},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108663,"byte_end":108670,"line_start":602,"line_end":602,"column_start":55,"column_end":62},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":108916,"byte_end":108923,"line_start":611,"line_end":611,"column_start":60,"column_end":67},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109097,"byte_end":109104,"line_start":619,"line_end":619,"column_start":35,"column_end":42},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109325,"byte_end":109332,"line_start":628,"line_end":628,"column_start":56,"column_end":63},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109489,"byte_end":109496,"line_start":635,"line_end":635,"column_start":55,"column_end":62},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109742,"byte_end":109749,"line_start":644,"line_end":644,"column_start":60,"column_end":67},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":109915,"byte_end":109922,"line_start":652,"line_end":652,"column_start":27,"column_end":34},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":811}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110029,"byte_end":110036,"line_start":659,"line_end":659,"column_start":29,"column_end":36},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110190,"byte_end":110197,"line_start":667,"line_end":667,"column_start":27,"column_end":34},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":825}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110349,"byte_end":110356,"line_start":675,"line_end":675,"column_start":29,"column_end":36},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":823}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110536,"byte_end":110543,"line_start":683,"line_end":683,"column_start":53,"column_end":60},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110868,"byte_end":110875,"line_start":695,"line_end":695,"column_start":29,"column_end":36},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":110976,"byte_end":110983,"line_start":701,"line_end":701,"column_start":29,"column_end":36},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111088,"byte_end":111095,"line_start":707,"line_end":707,"column_start":29,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111196,"byte_end":111203,"line_start":713,"line_end":713,"column_start":29,"column_end":36},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111524,"byte_end":111531,"line_start":731,"line_end":731,"column_start":27,"column_end":34},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":111570,"byte_end":111577,"line_start":733,"line_end":733,"column_start":29,"column_end":36},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":112515,"byte_end":112522,"line_start":776,"line_end":776,"column_start":19,"column_end":26},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":112570,"byte_end":112577,"line_start":778,"line_end":778,"column_start":26,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":112748,"byte_end":112755,"line_start":787,"line_end":787,"column_start":21,"column_end":28},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":112957,"byte_end":112964,"line_start":798,"line_end":798,"column_start":39,"column_end":46},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113205,"byte_end":113212,"line_start":808,"line_end":808,"column_start":33,"column_end":40},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":113349,"byte_end":113356,"line_start":814,"line_end":814,"column_start":12,"column_end":19},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":114593,"byte_end":114600,"line_start":871,"line_end":871,"column_start":18,"column_end":25},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120191,"byte_end":120198,"line_start":1086,"line_end":1086,"column_start":24,"column_end":31},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":120937,"byte_end":120944,"line_start":1118,"line_end":1118,"column_start":28,"column_end":35},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":123864,"byte_end":123871,"line_start":1200,"line_end":1200,"column_start":39,"column_end":46},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124128,"byte_end":124135,"line_start":1211,"line_end":1211,"column_start":40,"column_end":47},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124272,"byte_end":124279,"line_start":1218,"line_end":1218,"column_start":25,"column_end":32},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124468,"byte_end":124475,"line_start":1227,"line_end":1227,"column_start":39,"column_end":46},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":124784,"byte_end":124791,"line_start":1240,"line_end":1240,"column_start":51,"column_end":58},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125009,"byte_end":125016,"line_start":1249,"line_end":1249,"column_start":41,"column_end":48},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125285,"byte_end":125292,"line_start":1258,"line_end":1258,"column_start":69,"column_end":76},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125432,"byte_end":125439,"line_start":1265,"line_end":1265,"column_start":25,"column_end":32},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125667,"byte_end":125674,"line_start":1274,"line_end":1274,"column_start":39,"column_end":46},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":125983,"byte_end":125990,"line_start":1287,"line_end":1287,"column_start":51,"column_end":58},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":126208,"byte_end":126215,"line_start":1296,"line_end":1296,"column_start":41,"column_end":48},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":126484,"byte_end":126491,"line_start":1305,"line_end":1305,"column_start":69,"column_end":76},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":126641,"byte_end":126648,"line_start":1312,"line_end":1312,"column_start":35,"column_end":42},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":126923,"byte_end":126930,"line_start":1325,"line_end":1325,"column_start":47,"column_end":54},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":127132,"byte_end":127139,"line_start":1334,"line_end":1334,"column_start":55,"column_end":62},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":127450,"byte_end":127457,"line_start":1347,"line_end":1347,"column_start":60,"column_end":67},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":127603,"byte_end":127610,"line_start":1354,"line_end":1354,"column_start":35,"column_end":42},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":127885,"byte_end":127892,"line_start":1367,"line_end":1367,"column_start":47,"column_end":54},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128094,"byte_end":128101,"line_start":1376,"line_end":1376,"column_start":55,"column_end":62},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128412,"byte_end":128419,"line_start":1389,"line_end":1389,"column_start":60,"column_end":67},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128557,"byte_end":128564,"line_start":1396,"line_end":1396,"column_start":27,"column_end":34},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1076},"to":{"krate":0,"index":811}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128671,"byte_end":128678,"line_start":1403,"line_end":1403,"column_start":29,"column_end":36},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1076},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128832,"byte_end":128839,"line_start":1411,"line_end":1411,"column_start":27,"column_end":34},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1076},"to":{"krate":0,"index":825}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":128991,"byte_end":128998,"line_start":1419,"line_end":1419,"column_start":29,"column_end":36},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1076},"to":{"krate":0,"index":823}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":129178,"byte_end":129185,"line_start":1427,"line_end":1427,"column_start":53,"column_end":60},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1076},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":129644,"byte_end":129651,"line_start":1445,"line_end":1445,"column_start":29,"column_end":36},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":129760,"byte_end":129767,"line_start":1451,"line_end":1451,"column_start":29,"column_end":36},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":129881,"byte_end":129888,"line_start":1457,"line_end":1457,"column_start":32,"column_end":39},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/point.rs","byte_start":130003,"byte_end":130010,"line_start":1463,"line_end":1463,"column_start":32,"column_end":39},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145703,"byte_end":145707,"line_start":72,"line_end":72,"column_start":27,"column_end":31},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145850,"byte_end":145854,"line_start":79,"line_end":79,"column_start":27,"column_end":31},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":145893,"byte_end":145897,"line_start":81,"line_end":81,"column_start":29,"column_end":33},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146039,"byte_end":146043,"line_start":87,"line_end":87,"column_start":37,"column_end":41},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146191,"byte_end":146195,"line_start":93,"line_end":93,"column_start":23,"column_end":27},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146244,"byte_end":146248,"line_start":95,"line_end":95,"column_start":39,"column_end":43},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146521,"byte_end":146525,"line_start":105,"line_end":105,"column_start":33,"column_end":37},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146639,"byte_end":146643,"line_start":111,"line_end":111,"column_start":12,"column_end":16},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":146811,"byte_end":146815,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":147216,"byte_end":147220,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":148488,"byte_end":148492,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149011,"byte_end":149015,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149371,"byte_end":149375,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":149795,"byte_end":149799,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":150369,"byte_end":150373,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151220,"byte_end":151224,"line_start":300,"line_end":300,"column_start":12,"column_end":16},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":151842,"byte_end":151846,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":152659,"byte_end":152663,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153031,"byte_end":153035,"line_start":355,"line_end":355,"column_start":12,"column_end":16},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153258,"byte_end":153262,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153646,"byte_end":153650,"line_start":382,"line_end":382,"column_start":12,"column_end":16},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":153988,"byte_end":153992,"line_start":395,"line_end":395,"column_start":39,"column_end":43},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154116,"byte_end":154120,"line_start":402,"line_end":402,"column_start":38,"column_end":42},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154255,"byte_end":154259,"line_start":409,"line_end":409,"column_start":38,"column_end":42},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154459,"byte_end":154463,"line_start":420,"line_end":420,"column_start":35,"column_end":39},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154683,"byte_end":154687,"line_start":429,"line_end":429,"column_start":47,"column_end":51},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":154830,"byte_end":154834,"line_start":436,"line_end":436,"column_start":35,"column_end":39},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155062,"byte_end":155066,"line_start":445,"line_end":445,"column_start":47,"column_end":51},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155229,"byte_end":155233,"line_start":452,"line_end":452,"column_start":55,"column_end":59},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155491,"byte_end":155495,"line_start":461,"line_end":461,"column_start":60,"column_end":64},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155701,"byte_end":155705,"line_start":469,"line_end":469,"column_start":55,"column_end":59},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":155963,"byte_end":155967,"line_start":478,"line_end":478,"column_start":60,"column_end":64},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156136,"byte_end":156140,"line_start":486,"line_end":486,"column_start":18,"column_end":22},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":156781,"byte_end":156785,"line_start":509,"line_end":509,"column_start":28,"column_end":32},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":160129,"byte_end":160133,"line_start":597,"line_end":597,"column_start":76,"column_end":80},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rect.rs","byte_start":162195,"byte_end":162199,"line_start":648,"line_end":648,"column_start":35,"column_end":39},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":1322},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":172722,"byte_end":172738,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173051,"byte_end":173067,"line_start":39,"line_end":39,"column_start":25,"column_end":41},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":173349,"byte_end":173365,"line_start":48,"line_end":48,"column_start":40,"column_end":56},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":3769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177751,"byte_end":177767,"line_start":187,"line_end":187,"column_start":9,"column_end":25},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rigid.rs","byte_start":177943,"byte_end":177959,"line_start":194,"line_end":194,"column_start":67,"column_end":83},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":3769},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181848,"byte_end":181858,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":1587},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":181911,"byte_end":181921,"line_start":42,"line_end":42,"column_start":36,"column_end":46},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":1587},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182103,"byte_end":182113,"line_start":51,"line_end":51,"column_start":26,"column_end":36},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":1587},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182175,"byte_end":182185,"line_start":53,"line_end":53,"column_start":33,"column_end":43},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":1587},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182336,"byte_end":182346,"line_start":62,"line_end":62,"column_start":28,"column_end":38},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":1587},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":182491,"byte_end":182501,"line_start":71,"line_end":71,"column_start":19,"column_end":29},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":1587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":183052,"byte_end":183062,"line_start":96,"line_end":96,"column_start":25,"column_end":35},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":1587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184707,"byte_end":184717,"line_start":159,"line_end":159,"column_start":19,"column_end":29},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":1587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":184922,"byte_end":184932,"line_start":169,"line_end":169,"column_start":26,"column_end":36},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":1587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":186331,"byte_end":186341,"line_start":209,"line_end":209,"column_start":19,"column_end":29},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":1587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187761,"byte_end":187771,"line_start":251,"line_end":251,"column_start":34,"column_end":44},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":1653},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":187824,"byte_end":187834,"line_start":253,"line_end":253,"column_start":36,"column_end":46},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":1653},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188101,"byte_end":188111,"line_start":265,"line_end":265,"column_start":26,"column_end":36},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":1653},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188173,"byte_end":188183,"line_start":267,"line_end":267,"column_start":33,"column_end":43},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":1653},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188389,"byte_end":188399,"line_start":276,"line_end":276,"column_start":28,"column_end":38},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":1653},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":188612,"byte_end":188622,"line_start":288,"line_end":288,"column_start":19,"column_end":29},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":1653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":189493,"byte_end":189503,"line_start":319,"line_end":319,"column_start":19,"column_end":29},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":1653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":192050,"byte_end":192060,"line_start":403,"line_end":403,"column_start":19,"column_end":29},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":1653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":201698,"byte_end":201708,"line_start":706,"line_end":706,"column_start":46,"column_end":56},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":1653},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/rotation.rs","byte_start":201963,"byte_end":201973,"line_start":716,"line_end":716,"column_start":35,"column_end":45},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":1653},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":212573,"byte_end":212578,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":217240,"byte_end":217245,"line_start":241,"line_end":241,"column_start":28,"column_end":33},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":219131,"byte_end":219136,"line_start":300,"line_end":300,"column_start":47,"column_end":52},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":219359,"byte_end":219364,"line_start":310,"line_end":310,"column_start":32,"column_end":37},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":219599,"byte_end":219604,"line_start":320,"line_end":320,"column_start":32,"column_end":37},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":219962,"byte_end":219967,"line_start":332,"line_end":332,"column_start":44,"column_end":49},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220102,"byte_end":220107,"line_start":338,"line_end":338,"column_start":30,"column_end":35},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220170,"byte_end":220175,"line_start":340,"line_end":340,"column_start":46,"column_end":51},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":1833}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220330,"byte_end":220335,"line_start":346,"line_end":346,"column_start":32,"column_end":37},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":1822}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220470,"byte_end":220475,"line_start":352,"line_end":352,"column_start":36,"column_end":41},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220612,"byte_end":220617,"line_start":358,"line_end":358,"column_start":34,"column_end":39},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220680,"byte_end":220685,"line_start":360,"line_end":360,"column_start":46,"column_end":51},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220830,"byte_end":220835,"line_start":366,"line_end":366,"column_start":40,"column_end":45},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":220952,"byte_end":220957,"line_start":372,"line_end":372,"column_start":34,"column_end":39},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/scale.rs","byte_start":221087,"byte_end":221092,"line_start":378,"line_end":378,"column_start":32,"column_end":37},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":1762},"to":{"krate":0,"index":816}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224087,"byte_end":224100,"line_start":60,"line_end":60,"column_start":27,"column_end":40},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224139,"byte_end":224152,"line_start":62,"line_end":62,"column_start":29,"column_end":42},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224436,"byte_end":224449,"line_start":74,"line_end":74,"column_start":19,"column_end":32},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224497,"byte_end":224510,"line_start":76,"line_end":76,"column_start":26,"column_end":39},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":224766,"byte_end":224779,"line_start":88,"line_end":88,"column_start":21,"column_end":34},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225019,"byte_end":225032,"line_start":100,"line_end":100,"column_start":39,"column_end":52},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225276,"byte_end":225289,"line_start":110,"line_end":110,"column_start":33,"column_end":46},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":225565,"byte_end":225578,"line_start":122,"line_end":122,"column_start":12,"column_end":25},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":1879},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":228656,"byte_end":228669,"line_start":229,"line_end":229,"column_start":20,"column_end":33},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":229004,"byte_end":229017,"line_start":244,"line_end":244,"column_start":35,"column_end":48},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":229352,"byte_end":229365,"line_start":258,"line_end":258,"column_start":47,"column_end":60},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":229606,"byte_end":229619,"line_start":268,"line_end":268,"column_start":55,"column_end":68},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":229992,"byte_end":230005,"line_start":282,"line_end":282,"column_start":60,"column_end":73},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":230151,"byte_end":230164,"line_start":289,"line_end":289,"column_start":35,"column_end":48},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":230499,"byte_end":230512,"line_start":303,"line_end":303,"column_start":47,"column_end":60},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":230753,"byte_end":230766,"line_start":313,"line_end":313,"column_start":55,"column_end":68},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/side_offsets.rs","byte_start":231139,"byte_end":231152,"line_start":327,"line_end":327,"column_start":60,"column_end":73},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":1879},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235594,"byte_end":235600,"line_start":41,"line_end":41,"column_start":27,"column_end":33},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":235639,"byte_end":235645,"line_start":43,"line_end":43,"column_start":29,"column_end":35},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237077,"byte_end":237083,"line_start":102,"line_end":102,"column_start":19,"column_end":25},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237131,"byte_end":237137,"line_start":104,"line_end":104,"column_start":26,"column_end":32},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237305,"byte_end":237311,"line_start":113,"line_end":113,"column_start":21,"column_end":27},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237498,"byte_end":237504,"line_start":123,"line_end":123,"column_start":39,"column_end":45},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237721,"byte_end":237727,"line_start":131,"line_end":131,"column_start":33,"column_end":39},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":237843,"byte_end":237849,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":2006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":238980,"byte_end":238986,"line_start":184,"line_end":184,"column_start":18,"column_end":24},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":2006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":242353,"byte_end":242359,"line_start":307,"line_end":307,"column_start":28,"column_end":34},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":2006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":245527,"byte_end":245533,"line_start":395,"line_end":395,"column_start":20,"column_end":26},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":2006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":246126,"byte_end":246132,"line_start":411,"line_end":411,"column_start":24,"column_end":30},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":2006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248028,"byte_end":248034,"line_start":470,"line_end":470,"column_start":23,"column_end":29},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":2006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248593,"byte_end":248599,"line_start":488,"line_end":488,"column_start":29,"column_end":35},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":2006},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248755,"byte_end":248761,"line_start":496,"line_end":496,"column_start":27,"column_end":33},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":2006},"to":{"krate":0,"index":825}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":248915,"byte_end":248921,"line_start":504,"line_end":504,"column_start":29,"column_end":35},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":2006},"to":{"krate":0,"index":823}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249077,"byte_end":249083,"line_start":512,"line_end":512,"column_start":27,"column_end":33},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":2006},"to":{"krate":0,"index":811}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249211,"byte_end":249217,"line_start":519,"line_end":519,"column_start":25,"column_end":31},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249396,"byte_end":249402,"line_start":528,"line_end":528,"column_start":25,"column_end":31},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249650,"byte_end":249656,"line_start":537,"line_end":537,"column_start":54,"column_end":60},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":249856,"byte_end":249862,"line_start":544,"line_end":544,"column_start":44,"column_end":50},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250049,"byte_end":250055,"line_start":550,"line_end":550,"column_start":74,"column_end":80},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250209,"byte_end":250215,"line_start":556,"line_end":556,"column_start":37,"column_end":43},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250387,"byte_end":250393,"line_start":564,"line_end":564,"column_start":25,"column_end":31},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250624,"byte_end":250630,"line_start":573,"line_end":573,"column_start":37,"column_end":43},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":250812,"byte_end":250818,"line_start":581,"line_end":581,"column_start":35,"column_end":41},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251043,"byte_end":251049,"line_start":590,"line_end":590,"column_start":47,"column_end":53},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251235,"byte_end":251241,"line_start":598,"line_end":598,"column_start":55,"column_end":61},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251500,"byte_end":251506,"line_start":607,"line_end":607,"column_start":60,"column_end":66},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251652,"byte_end":251658,"line_start":614,"line_end":614,"column_start":35,"column_end":41},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":251883,"byte_end":251889,"line_start":623,"line_end":623,"column_start":47,"column_end":53},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":252075,"byte_end":252081,"line_start":631,"line_end":631,"column_start":55,"column_end":61},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":252340,"byte_end":252346,"line_start":640,"line_end":640,"column_start":60,"column_end":66},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253104,"byte_end":253110,"line_start":675,"line_end":675,"column_start":37,"column_end":43},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253235,"byte_end":253241,"line_start":682,"line_end":682,"column_start":29,"column_end":35},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253365,"byte_end":253371,"line_start":689,"line_end":689,"column_start":29,"column_end":35},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253489,"byte_end":253495,"line_start":696,"line_end":696,"column_start":29,"column_end":35},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":253619,"byte_end":253625,"line_start":703,"line_end":703,"column_start":29,"column_end":35},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":2006},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260382,"byte_end":260388,"line_start":940,"line_end":940,"column_start":27,"column_end":33},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":260427,"byte_end":260433,"line_start":942,"line_end":942,"column_start":29,"column_end":35},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":261432,"byte_end":261438,"line_start":985,"line_end":985,"column_start":19,"column_end":25},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":261486,"byte_end":261492,"line_start":987,"line_end":987,"column_start":26,"column_end":32},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":261689,"byte_end":261695,"line_start":996,"line_end":996,"column_start":21,"column_end":27},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":261910,"byte_end":261916,"line_start":1007,"line_end":1007,"column_start":39,"column_end":45},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262200,"byte_end":262206,"line_start":1017,"line_end":1017,"column_start":33,"column_end":39},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":262342,"byte_end":262348,"line_start":1023,"line_end":1023,"column_start":12,"column_end":18},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":2216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":263577,"byte_end":263583,"line_start":1071,"line_end":1071,"column_start":18,"column_end":24},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":2216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":267171,"byte_end":267177,"line_start":1194,"line_end":1194,"column_start":28,"column_end":34},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":2216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270077,"byte_end":270083,"line_start":1276,"line_end":1276,"column_start":20,"column_end":26},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":2216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":270721,"byte_end":270727,"line_start":1292,"line_end":1292,"column_start":24,"column_end":30},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":2216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":272803,"byte_end":272809,"line_start":1360,"line_end":1360,"column_start":23,"column_end":29},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":2216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273452,"byte_end":273458,"line_start":1380,"line_end":1380,"column_start":29,"column_end":35},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":2216},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273614,"byte_end":273620,"line_start":1388,"line_end":1388,"column_start":27,"column_end":33},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":2216},"to":{"krate":0,"index":825}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273774,"byte_end":273780,"line_start":1396,"line_end":1396,"column_start":29,"column_end":35},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":2216},"to":{"krate":0,"index":823}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":273936,"byte_end":273942,"line_start":1404,"line_end":1404,"column_start":27,"column_end":33},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":2216},"to":{"krate":0,"index":811}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":274084,"byte_end":274090,"line_start":1411,"line_end":1411,"column_start":25,"column_end":31},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":274282,"byte_end":274288,"line_start":1420,"line_end":1420,"column_start":25,"column_end":31},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":274609,"byte_end":274615,"line_start":1433,"line_end":1433,"column_start":54,"column_end":60},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":274888,"byte_end":274894,"line_start":1444,"line_end":1444,"column_start":44,"column_end":50},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275081,"byte_end":275087,"line_start":1450,"line_end":1450,"column_start":74,"column_end":80},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275241,"byte_end":275247,"line_start":1456,"line_end":1456,"column_start":37,"column_end":43},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275454,"byte_end":275460,"line_start":1465,"line_end":1465,"column_start":25,"column_end":31},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275764,"byte_end":275770,"line_start":1478,"line_end":1478,"column_start":37,"column_end":43},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":275987,"byte_end":275993,"line_start":1487,"line_end":1487,"column_start":35,"column_end":41},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":276285,"byte_end":276291,"line_start":1500,"line_end":1500,"column_start":47,"column_end":53},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":276506,"byte_end":276512,"line_start":1509,"line_end":1509,"column_start":55,"column_end":61},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":276840,"byte_end":276846,"line_start":1522,"line_end":1522,"column_start":60,"column_end":66},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":276992,"byte_end":276998,"line_start":1529,"line_end":1529,"column_start":35,"column_end":41},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":277290,"byte_end":277296,"line_start":1542,"line_end":1542,"column_start":47,"column_end":53},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":277511,"byte_end":277517,"line_start":1551,"line_end":1551,"column_start":55,"column_end":61},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":277845,"byte_end":277851,"line_start":1564,"line_end":1564,"column_start":60,"column_end":66},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278428,"byte_end":278434,"line_start":1590,"line_end":1590,"column_start":37,"column_end":43},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278564,"byte_end":278570,"line_start":1597,"line_end":1597,"column_start":29,"column_end":35},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278706,"byte_end":278712,"line_start":1604,"line_end":1604,"column_start":29,"column_end":35},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278839,"byte_end":278845,"line_start":1611,"line_end":1611,"column_start":32,"column_end":38},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/size.rs","byte_start":278987,"byte_end":278993,"line_start":1618,"line_end":1618,"column_start":32,"column_end":38},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":2216},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288671,"byte_end":288682,"line_start":87,"line_end":87,"column_start":34,"column_end":45},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":288735,"byte_end":288746,"line_start":89,"line_end":89,"column_start":36,"column_end":47},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289100,"byte_end":289111,"line_start":103,"line_end":103,"column_start":26,"column_end":37},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289173,"byte_end":289184,"line_start":105,"line_end":105,"column_start":33,"column_end":44},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289515,"byte_end":289526,"line_start":118,"line_end":118,"column_start":28,"column_end":39},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":289799,"byte_end":289810,"line_start":132,"line_end":132,"column_start":19,"column_end":30},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":291475,"byte_end":291486,"line_start":182,"line_end":182,"column_start":25,"column_end":36},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":295234,"byte_end":295245,"line_start":306,"line_end":306,"column_start":35,"column_end":46},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296164,"byte_end":296175,"line_start":332,"line_end":332,"column_start":19,"column_end":30},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":296809,"byte_end":296820,"line_start":361,"line_end":361,"column_start":19,"column_end":30},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":297607,"byte_end":297618,"line_start":383,"line_end":383,"column_start":19,"column_end":30},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":298720,"byte_end":298731,"line_start":428,"line_end":428,"column_start":19,"column_end":30},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":299699,"byte_end":299710,"line_start":461,"line_end":461,"column_start":19,"column_end":30},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":300802,"byte_end":300813,"line_start":509,"line_end":509,"column_start":19,"column_end":30},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":302637,"byte_end":302648,"line_start":568,"line_end":568,"column_start":19,"column_end":30},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":2457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":303783,"byte_end":303794,"line_start":607,"line_end":607,"column_start":32,"column_end":43},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":304002,"byte_end":304013,"line_start":616,"line_end":616,"column_start":48,"column_end":59},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":2457},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform2d.rs","byte_start":304599,"byte_end":304610,"line_start":629,"line_end":629,"column_start":34,"column_end":45},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":313435,"byte_end":313446,"line_start":108,"line_end":108,"column_start":34,"column_end":45},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":2636},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":313499,"byte_end":313510,"line_start":110,"line_end":110,"column_start":36,"column_end":47},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":2636},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":314214,"byte_end":314225,"line_start":134,"line_end":134,"column_start":26,"column_end":37},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":2636},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":314287,"byte_end":314298,"line_start":136,"line_end":136,"column_start":33,"column_end":44},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":2636},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":314999,"byte_end":315010,"line_start":159,"line_end":159,"column_start":28,"column_end":39},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":2636},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":315543,"byte_end":315554,"line_start":183,"line_end":183,"column_start":19,"column_end":30},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":317962,"byte_end":317973,"line_start":264,"line_end":264,"column_start":25,"column_end":36},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":323418,"byte_end":323429,"line_start":416,"line_end":416,"column_start":20,"column_end":31},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":325268,"byte_end":325279,"line_start":491,"line_end":491,"column_start":20,"column_end":31},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":327547,"byte_end":327558,"line_start":526,"line_end":526,"column_start":20,"column_end":31},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":328728,"byte_end":328739,"line_start":571,"line_end":571,"column_start":19,"column_end":30},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":330415,"byte_end":330426,"line_start":627,"line_end":627,"column_start":19,"column_end":30},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":331775,"byte_end":331786,"line_start":677,"line_end":677,"column_start":19,"column_end":30},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":337474,"byte_end":337485,"line_start":817,"line_end":817,"column_start":20,"column_end":31},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":345035,"byte_end":345046,"line_start":988,"line_end":988,"column_start":20,"column_end":31},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":346592,"byte_end":346603,"line_start":1029,"line_end":1029,"column_start":35,"column_end":46},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":348102,"byte_end":348113,"line_start":1060,"line_end":1060,"column_start":32,"column_end":43},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":349081,"byte_end":349092,"line_start":1085,"line_end":1085,"column_start":48,"column_end":59},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":2636},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":350026,"byte_end":350037,"line_start":1101,"line_end":1101,"column_start":32,"column_end":43},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":2636},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/transform3d.rs","byte_start":350231,"byte_end":350242,"line_start":1110,"line_end":1110,"column_start":34,"column_end":45},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":2636},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363602,"byte_end":363615,"line_start":74,"line_end":74,"column_start":34,"column_end":47},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363668,"byte_end":363681,"line_start":76,"line_end":76,"column_start":36,"column_end":49},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363889,"byte_end":363902,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":363964,"byte_end":363977,"line_start":88,"line_end":88,"column_start":33,"column_end":46},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364141,"byte_end":364154,"line_start":97,"line_end":97,"column_start":28,"column_end":41},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":364319,"byte_end":364332,"line_start":107,"line_end":107,"column_start":19,"column_end":32},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":2849},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":365688,"byte_end":365701,"line_start":164,"line_end":164,"column_start":25,"column_end":38},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":2849},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":367926,"byte_end":367939,"line_start":255,"line_end":255,"column_start":69,"column_end":82},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":368227,"byte_end":368240,"line_start":263,"line_end":263,"column_start":72,"column_end":85},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":368453,"byte_end":368466,"line_start":270,"line_end":270,"column_start":69,"column_end":82},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":368754,"byte_end":368767,"line_start":278,"line_end":278,"column_start":72,"column_end":85},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":368957,"byte_end":368970,"line_start":285,"line_end":285,"column_start":46,"column_end":59},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369120,"byte_end":369133,"line_start":291,"line_end":291,"column_start":46,"column_end":59},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369280,"byte_end":369293,"line_start":297,"line_end":297,"column_start":54,"column_end":67},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369470,"byte_end":369483,"line_start":306,"line_end":306,"column_start":31,"column_end":44},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":369624,"byte_end":369637,"line_start":315,"line_end":315,"column_start":46,"column_end":59},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":2849},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370177,"byte_end":370190,"line_start":334,"line_end":334,"column_start":34,"column_end":47},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":370243,"byte_end":370256,"line_start":336,"line_end":336,"column_start":36,"column_end":49},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371260,"byte_end":371273,"line_start":379,"line_end":379,"column_start":26,"column_end":39},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371335,"byte_end":371348,"line_start":381,"line_end":381,"column_start":33,"column_end":46},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371533,"byte_end":371546,"line_start":390,"line_end":390,"column_start":28,"column_end":41},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":371735,"byte_end":371748,"line_start":401,"line_end":401,"column_start":19,"column_end":32},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":2953},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":373269,"byte_end":373282,"line_start":461,"line_end":461,"column_start":25,"column_end":38},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":2953},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":376138,"byte_end":376151,"line_start":575,"line_end":575,"column_start":69,"column_end":82},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":376457,"byte_end":376470,"line_start":583,"line_end":583,"column_start":72,"column_end":85},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":376710,"byte_end":376723,"line_start":591,"line_end":591,"column_start":69,"column_end":82},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377029,"byte_end":377042,"line_start":599,"line_end":599,"column_start":72,"column_end":85},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377259,"byte_end":377272,"line_start":607,"line_end":607,"column_start":46,"column_end":59},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377427,"byte_end":377440,"line_start":613,"line_end":613,"column_start":46,"column_end":59},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377595,"byte_end":377608,"line_start":619,"line_end":619,"column_start":54,"column_end":67},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377793,"byte_end":377806,"line_start":628,"line_end":628,"column_start":31,"column_end":44},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/translation.rs","byte_start":377947,"byte_end":377960,"line_start":637,"line_end":637,"column_start":46,"column_end":59},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":2953},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389613,"byte_end":389621,"line_start":47,"line_end":47,"column_start":27,"column_end":35},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":389660,"byte_end":389668,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":390935,"byte_end":390943,"line_start":106,"line_end":106,"column_start":23,"column_end":31},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":390990,"byte_end":390998,"line_start":108,"line_end":108,"column_start":37,"column_end":45},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391130,"byte_end":391138,"line_start":114,"line_end":114,"column_start":27,"column_end":35},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391285,"byte_end":391293,"line_start":121,"line_end":121,"column_start":27,"column_end":35},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":3113},"to":{"krate":0,"index":811}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391490,"byte_end":391498,"line_start":129,"line_end":129,"column_start":39,"column_end":47},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391672,"byte_end":391680,"line_start":135,"line_end":135,"column_start":33,"column_end":41},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":391798,"byte_end":391806,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":3113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":394592,"byte_end":394600,"line_start":258,"line_end":258,"column_start":18,"column_end":26},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":3113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":398115,"byte_end":398123,"line_start":401,"line_end":401,"column_start":12,"column_end":20},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":3113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":399009,"byte_end":399017,"line_start":433,"line_end":433,"column_start":19,"column_end":27},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":3113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":401006,"byte_end":401014,"line_start":505,"line_end":505,"column_start":12,"column_end":20},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":3113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":402126,"byte_end":402134,"line_start":540,"line_end":540,"column_start":24,"column_end":32},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":3113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403436,"byte_end":403444,"line_start":584,"line_end":584,"column_start":23,"column_end":31},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":3113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":403994,"byte_end":404002,"line_start":604,"line_end":604,"column_start":28,"column_end":36},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":3113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":406854,"byte_end":406862,"line_start":682,"line_end":682,"column_start":25,"column_end":33},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407027,"byte_end":407035,"line_start":691,"line_end":691,"column_start":25,"column_end":33},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407254,"byte_end":407262,"line_start":700,"line_end":700,"column_start":39,"column_end":47},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407487,"byte_end":407495,"line_start":709,"line_end":709,"column_start":44,"column_end":52},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407682,"byte_end":407690,"line_start":715,"line_end":715,"column_start":74,"column_end":82},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407860,"byte_end":407868,"line_start":721,"line_end":721,"column_start":53,"column_end":61},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":407998,"byte_end":408006,"line_start":728,"line_end":728,"column_start":25,"column_end":33},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":408246,"byte_end":408254,"line_start":737,"line_end":737,"column_start":69,"column_end":77},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":408394,"byte_end":408402,"line_start":744,"line_end":744,"column_start":35,"column_end":43},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":408622,"byte_end":408630,"line_start":753,"line_end":753,"column_start":56,"column_end":64},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":408787,"byte_end":408795,"line_start":760,"line_end":760,"column_start":55,"column_end":63},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409040,"byte_end":409048,"line_start":769,"line_end":769,"column_start":60,"column_end":68},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409222,"byte_end":409230,"line_start":777,"line_end":777,"column_start":35,"column_end":43},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409450,"byte_end":409458,"line_start":786,"line_end":786,"column_start":56,"column_end":64},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409615,"byte_end":409623,"line_start":793,"line_end":793,"column_start":55,"column_end":63},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":409868,"byte_end":409876,"line_start":802,"line_end":802,"column_start":60,"column_end":68},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410044,"byte_end":410052,"line_start":810,"line_end":810,"column_start":29,"column_end":37},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":3113},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410209,"byte_end":410217,"line_start":818,"line_end":818,"column_start":27,"column_end":35},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":3113},"to":{"krate":0,"index":825}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410372,"byte_end":410380,"line_start":826,"line_end":826,"column_start":29,"column_end":37},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":3113},"to":{"krate":0,"index":823}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410564,"byte_end":410572,"line_start":834,"line_end":834,"column_start":54,"column_end":62},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":3113},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":410895,"byte_end":410903,"line_start":846,"line_end":846,"column_start":29,"column_end":37},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411004,"byte_end":411012,"line_start":852,"line_end":852,"column_start":29,"column_end":37},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411115,"byte_end":411123,"line_start":858,"line_end":858,"column_start":29,"column_end":37},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411224,"byte_end":411232,"line_start":864,"line_end":864,"column_start":29,"column_end":37},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411352,"byte_end":411360,"line_start":870,"line_end":870,"column_start":35,"column_end":43},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":3113},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411856,"byte_end":411864,"line_start":891,"line_end":891,"column_start":27,"column_end":35},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2081}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":411903,"byte_end":411911,"line_start":893,"line_end":893,"column_start":29,"column_end":37},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":1762}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":412857,"byte_end":412865,"line_start":936,"line_end":936,"column_start":23,"column_end":31},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":1795}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":412912,"byte_end":412920,"line_start":938,"line_end":938,"column_start":37,"column_end":45},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":1790}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413073,"byte_end":413081,"line_start":944,"line_end":944,"column_start":27,"column_end":35},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":7019}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413252,"byte_end":413260,"line_start":952,"line_end":952,"column_start":27,"column_end":35},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":3348},"to":{"krate":0,"index":811}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413462,"byte_end":413470,"line_start":960,"line_end":960,"column_start":39,"column_end":47},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":6831}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413711,"byte_end":413719,"line_start":970,"line_end":970,"column_start":33,"column_end":41},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2059}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":413857,"byte_end":413865,"line_start":976,"line_end":976,"column_start":12,"column_end":20},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":416071,"byte_end":416079,"line_start":1069,"line_end":1069,"column_start":18,"column_end":26},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420202,"byte_end":420210,"line_start":1233,"line_end":1233,"column_start":12,"column_end":20},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":420797,"byte_end":420805,"line_start":1255,"line_end":1255,"column_start":19,"column_end":27},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":423136,"byte_end":423144,"line_start":1340,"line_end":1340,"column_start":12,"column_end":20},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":424298,"byte_end":424306,"line_start":1375,"line_end":1375,"column_start":24,"column_end":32},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":425812,"byte_end":425820,"line_start":1429,"line_end":1429,"column_start":23,"column_end":31},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":426438,"byte_end":426446,"line_start":1451,"line_end":1451,"column_start":28,"column_end":36},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":3348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429375,"byte_end":429383,"line_start":1533,"line_end":1533,"column_start":25,"column_end":33},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2163}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429557,"byte_end":429565,"line_start":1542,"line_end":1542,"column_start":25,"column_end":33},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":429806,"byte_end":429814,"line_start":1551,"line_end":1551,"column_start":52,"column_end":60},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2136}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430048,"byte_end":430056,"line_start":1560,"line_end":1560,"column_start":44,"column_end":52},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430243,"byte_end":430251,"line_start":1566,"line_end":1566,"column_start":74,"column_end":82},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":5401}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430421,"byte_end":430429,"line_start":1572,"line_end":1572,"column_start":53,"column_end":61},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2167}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430559,"byte_end":430567,"line_start":1579,"line_end":1579,"column_start":25,"column_end":33},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2141}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430825,"byte_end":430833,"line_start":1588,"line_end":1588,"column_start":69,"column_end":77},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2171}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":430973,"byte_end":430981,"line_start":1595,"line_end":1595,"column_start":35,"column_end":43},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":431264,"byte_end":431272,"line_start":1608,"line_end":1608,"column_start":56,"column_end":64},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":431429,"byte_end":431437,"line_start":1615,"line_end":1615,"column_start":55,"column_end":63},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2146}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":431747,"byte_end":431755,"line_start":1628,"line_end":1628,"column_start":60,"column_end":68},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2175}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":431956,"byte_end":431964,"line_start":1637,"line_end":1637,"column_start":35,"column_end":43},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":432247,"byte_end":432255,"line_start":1650,"line_end":1650,"column_start":56,"column_end":64},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":432412,"byte_end":432420,"line_start":1657,"line_end":1657,"column_start":55,"column_end":63},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2151}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":432730,"byte_end":432738,"line_start":1670,"line_end":1670,"column_start":60,"column_end":68},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":432933,"byte_end":432941,"line_start":1679,"line_end":1679,"column_start":29,"column_end":37},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":3348},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":433098,"byte_end":433106,"line_start":1687,"line_end":1687,"column_start":27,"column_end":35},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":3348},"to":{"krate":0,"index":825}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":433261,"byte_end":433269,"line_start":1695,"line_end":1695,"column_start":29,"column_end":37},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":3348},"to":{"krate":0,"index":823}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":433453,"byte_end":433461,"line_start":1703,"line_end":1703,"column_start":54,"column_end":62},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":3348},"to":{"krate":0,"index":165}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":433918,"byte_end":433926,"line_start":1721,"line_end":1721,"column_start":29,"column_end":37},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434035,"byte_end":434043,"line_start":1727,"line_end":1727,"column_start":29,"column_end":37},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434155,"byte_end":434163,"line_start":1733,"line_end":1733,"column_start":32,"column_end":40},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":1986}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434278,"byte_end":434286,"line_start":1739,"line_end":1739,"column_start":32,"column_end":40},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":3348},"to":{"krate":1,"index":1989}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":434780,"byte_end":434792,"line_start":1760,"line_end":1760,"column_start":6,"column_end":18},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":3830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/comlarsic/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.3/src/vector.rs","byte_start":437224,"byte_end":437236,"line_start":1837,"line_end":1837,"column_start":6,"column_end":18},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":3848},"to":{"krate":4294967295,"index":4294967295}}]}